{"pageProps":{"post":{"title":"JavaScript相关-1","tags":["JavaScript"],"categories":"JavaScript","description":"## document.write\n\n`document.write()` 方法将一个文本字符串写入一个由 [`document.open()`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document/open) 打开的文档流（document stream）。（[MDN](https://developer.mozilla.org","createDate":"2020-02-11 23:33:22","updateDate":"10/1/2021, 3:34:43 AM","body":"<h2 id=\"documentwrite\">document.write</h2>\n<p><code>document.write()</code> 方法将一个文本字符串写入一个由 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/open\"><code>document.open()</code></a> 打开的文档流（document stream）。（<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/write\">MDN</a>）</p>\n<p>作用：</p>\n<p>加载只有启用JavaScript后的样式文件</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">open</span>()\n    docuemnt.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&#x27;&lt;link rel=&quot;stylesheet&quot; href=&quot;style_neads_js.css&quot; /&gt;&#x27;</span>)\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">close</span>()\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>弊端：</p>\n<ul>\n<li>在非loading阶段使用<code>docuemnt.write</code>会清除已加载的页面</li>\n<li><code>docuemnt.write</code>不能够在XHTML中使用</li>\n<li>嵌入script中的<code>docuemnt.write</code>不能给任意节点添加子节点，因为它是随着DOM的构建执行的</li>\n<li>利用<code>docuemnt.write</code>写入HTML字符流并不是一个好方法，它有违DOM操作的概念</li>\n<li>利用<code>docuemnt.write</code>添加script加载外部脚本时，浏览器的HTML解析会被script的加载所阻塞</li>\n</ul>\n<h2 id=\"功能检测（feature-detection）、功能推断（feature-inference）、和使用ua字符串之间有什么区别\">功能检测（feature detection）、功能推断（feature inference）、和使用UA字符串之间有什么区别</h2>\n<p>功能检测（feature detection） 👍</p>\n<p>功能检测包括确定浏览器是否支持某段代码，以及是否能运行不同的代码（取决于它是否执行），一边浏览器能始终正确运行代码功能，而不会在某些浏览器中出现崩溃和错误</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-string\">&quot;geolocation&quot;</span> <span class=\"hljs-keyword\">in</span> navigator) {\n    <span class=\"hljs-comment\">// 可以使用 navigator.geolocation</span>\n} <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-comment\">// 处理 navigator.geolocation 功能缺失</span>\n}\n</code></pre>\n<p>功能推断（feature inference）👎</p>\n<p>功能推断与功能检测一样，会对功能可用性进行检查，但是在判断通过后还会使用其他功能，因为它假设其他功能也可用</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">getElementsByTagName</span>) {\n  element = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(id);\n}\n</code></pre>\n<p>UA 👎</p>\n<p>这是一个浏览器报告的字符串，它允许网络协议对等方（network protocol peers）识别请求用户代理的应用类型、操作系统、应用供应商和应用版本。它可以通过<code>navigator.userAgent</code>访问。然而，这个字符串很可能存在欺骗性，例如，chrome会同时作为chrome和safari进行报告，因此，要检测safari，除了检查safari字符串，还要检查是否同时存在chrome字符串。</p>\n<h2 id=\"ajax\">Ajax</h2>\n<p><strong>WHAT</strong></p>\n<p>Ajax（asynchronous JavaScript and XML）是使用客户端上的许多web技术，创建异步web应用的一种<strong>技术结合体</strong>。借助Ajax，web应用可以<strong>异步</strong>（在后台）向服务器发送数据可从服务器检索数据而不会干扰现有页面的显示和行为。通过将<strong>数据交互层与表示层分离</strong>，Ajax允许网页和扩展web应用程序动态更改内容而<strong>不需重新加载整个页面</strong>，实际上，现在通常将XML替换为JSON，因为JavaScript对JSON有原生支持优势</p>\n<p><strong>WHY</strong></p>\n<p>优点：</p>\n<ul>\n<li>交互性更好，来自服务器的新内容可以动态更改，无需重新加载整个页面</li>\n<li>减少与服务器的连接，因为脚本和样式只需要被请求一次</li>\n<li>状态可以维护在一个页面上，JavaScript变量和DOM状态将的到保持，因为主容器页面未被重新加载</li>\n<li>基本上包含大部分SPA的优点</li>\n</ul>\n<p>缺点</p>\n<ul>\n<li>动态网页很难收藏</li>\n<li>如果JavaScript在浏览器中被禁用则不起作用</li>\n<li>有些网络爬虫不执行JavaScript，也不会看到JavaScript加载的内容</li>\n</ul>\n<p><strong>HOW</strong></p>\n<ul>\n<li>使用<code>CSS</code>和<code>XHTML</code>来表示</li>\n<li>使用<code>DOM</code>模型来交互和动态显示</li>\n<li>使用<code>XMLHttpRequest</code>来和服务器进行异步通信</li>\n<li>使用<code>JavaScript </code>来绑定和调用</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">var</span> ajax = {};\najax.<span class=\"hljs-property\">httpRequest</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">XMLHttpRequest</span>) {\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();\n    }\n    <span class=\"hljs-keyword\">var</span> versions = [\n        <span class=\"hljs-string\">&quot;MSXML2.XmlHttp.6.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;MSXML2.XmlHttp.5.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;MSXML2.XmlHttp.4.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;MSXML2.XmlHttp.3.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;MSXML2.XmlHttp.2.0&quot;</span>,\n        <span class=\"hljs-string\">&quot;Microsoft.XmlHttp&quot;</span>\n    ];\n    <span class=\"hljs-keyword\">let</span> xhr;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; versions.<span class=\"hljs-property\">length</span>; i++) {\n        <span class=\"hljs-keyword\">try</span> {\n            xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ActiveXObject</span>(versions[i]);\n            <span class=\"hljs-keyword\">break</span>;\n        } <span class=\"hljs-keyword\">catch</span> (e) {\n        }\n    }\n    <span class=\"hljs-keyword\">return</span> xhr;\n};\n\najax.<span class=\"hljs-property\">send</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url, callback, method, data, <span class=\"hljs-keyword\">async</span></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">async</span> === <span class=\"hljs-literal\">undefined</span>) {\n        <span class=\"hljs-keyword\">async</span> = <span class=\"hljs-literal\">true</span>;\n    }\n    <span class=\"hljs-keyword\">let</span> httpRequest = ajax.<span class=\"hljs-title function_\">httpRequest</span>();\n    httpRequest.<span class=\"hljs-title function_\">open</span>(method, url, <span class=\"hljs-keyword\">async</span>);\n    httpRequest.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-keyword\">if</span> (httpRequest.<span class=\"hljs-property\">readyState</span> == <span class=\"hljs-number\">4</span>) {\n            <span class=\"hljs-title function_\">callback</span>(httpRequest.<span class=\"hljs-property\">responseText</span>)\n        }\n    };\n    <span class=\"hljs-keyword\">if</span> (method == <span class=\"hljs-string\">&#x27;POST&#x27;</span>) {\n        httpRequest.<span class=\"hljs-title function_\">setRequestHeader</span>(<span class=\"hljs-string\">&#x27;Content-type&#x27;</span>, <span class=\"hljs-string\">&#x27;application/x-www-form-urlencoded&#x27;</span>);\n    }\n    httpRequest.<span class=\"hljs-title function_\">send</span>(data);\n};\n\najax.<span class=\"hljs-property\">get</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url, data, callback, <span class=\"hljs-keyword\">async</span></span>) {\n    <span class=\"hljs-keyword\">let</span> query = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n        query.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-built_in\">encodeURIComponent</span>(key) + <span class=\"hljs-string\">&#x27;=&#x27;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(data[key]));\n    }\n    ajax.<span class=\"hljs-title function_\">send</span>(url + (query.<span class=\"hljs-property\">length</span> ? <span class=\"hljs-string\">&#x27;?&#x27;</span> + query.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>) : <span class=\"hljs-string\">&#x27;&#x27;</span>), callback, <span class=\"hljs-string\">&#x27;GET&#x27;</span>, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-keyword\">async</span>)\n};\n\najax.<span class=\"hljs-property\">post</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">url, data, callback, <span class=\"hljs-keyword\">async</span></span>) {\n    <span class=\"hljs-keyword\">let</span> query = [];\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> data) {\n        query.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-built_in\">encodeURIComponent</span>(key) + <span class=\"hljs-string\">&#x27;=&#x27;</span> + <span class=\"hljs-built_in\">encodeURIComponent</span>(data[key]));\n    }\n    ajax.<span class=\"hljs-title function_\">send</span>(url, callback, <span class=\"hljs-string\">&#x27;POST&#x27;</span>, query.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>), <span class=\"hljs-keyword\">async</span>)\n};\n</code></pre>\n<h2 id=\"jsonp\">JSONP</h2>\n<p><strong>WHAT</strong></p>\n<p>带填充的json（p for padding），是一种通常用于绕过浏览器中的跨域选址的方法，因为Ajax不允许跨域请求。</p>\n<p>原理：利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞。通过 <code>&lt;script&gt;</code> 标签指向一个需要访问的地址并提供一个回调函数来接收数据。</p>\n<p><strong>WHY</strong></p>\n<p>解决跨域（只适用于GET请求）</p>\n<p><strong>HOW</strong></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// jsonp.js</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jsonp</span>(<span class=\"hljs-params\">{ url, params, cb }</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">let</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;script&quot;</span>)\n        <span class=\"hljs-variable language_\">window</span>[cb] = <span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n            <span class=\"hljs-title function_\">resolve</span>(data)\n            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script)\n        }\n        params = { ...params, cb }\n        <span class=\"hljs-keyword\">let</span> tmp = []\n        <span class=\"hljs-keyword\">for</span>(<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> params)\n            tmp.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${ key }</span>=<span class=\"hljs-subst\">${ params[key] }</span>`</span>)\n        script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${ url }</span>?<span class=\"hljs-subst\">${ tmp.join(<span class=\"hljs-string\">&quot;&amp;&quot;</span>) }</span>`</span>\n    })\n}\n\n<span class=\"hljs-title function_\">jsonp</span>({ \n    <span class=\"hljs-attr\">url</span>: <span class=\"hljs-string\">&quot;http://localhost:3000/say&quot;</span>,\n    <span class=\"hljs-attr\">params</span>: { <span class=\"hljs-attr\">wd</span>: <span class=\"hljs-string\">&quot;hello jsonp&quot;</span> },\n    <span class=\"hljs-attr\">cb</span>: <span class=\"hljs-string\">&quot;show&quot;</span>\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n})\n\n<span class=\"hljs-comment\">// server.js</span>\n<span class=\"hljs-keyword\">let</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>)\n<span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-title function_\">express</span>()\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/say&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">res, res</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">let</span> { wd, cb } = req.<span class=\"hljs-property\">query</span>\n    res.<span class=\"hljs-title function_\">end</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${cb}</span>(&#x27;i am fine, and you?&#x27;)`</span>)\n})\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>)\n</code></pre>\n<h2 id=\"变量提升\">变量提升</h2>\n<p>变量提升（hoisting）用于解释代码中变量声明行为的术语。使用<code>var</code>关键字声明或初始化的变量会将声明语句“提升”到当前作用域的顶部。但是只有声明才会触发提升，赋值语句将保持原样。</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo) <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo) <span class=\"hljs-comment\">// 1</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo) <span class=\"hljs-comment\">// ReferenceError: bar is not defined</span>\n<span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo) <span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<p>函数声明会使函数体提升，但函数表达式（以声明变量的形式书写）只有变量声明会提升</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 函数声明</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo)\n<span class=\"hljs-title function_\">foo</span>(); <span class=\"hljs-comment\">// &#x27;foo&#x27;</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;foo&#x27;</span>)\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo); <span class=\"hljs-comment\">// [Function: foo]</span>\n\n<span class=\"hljs-comment\">// 函数表达式</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(bar) <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-title function_\">bar</span>(); <span class=\"hljs-comment\">// Uncaught TypeError: bar is not a function</span>\n<span class=\"hljs-keyword\">var</span> bar = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;bar&#x27;</span>)\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(bar) <span class=\"hljs-comment\">// [Function: bar]</span>\n</code></pre>\n<h2 id=\"事件冒泡\">事件冒泡</h2>\n<p>当一个事件在DOM元素上触发时，如果有时间监听器，它尝试处理该事件，然后事件冒泡到其父级元素，并发生同样的事情，最后直至到达祖先元素。时间冒泡机制是实现事件委托（event delegation）的原理</p>\n<h2 id=\"attribute和property\">attribute和property</h2>\n<p>attribute是在HTML中定义的，而property实在DOM上定义的。</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;input1&quot;</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> /&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n    <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;input1&quot;</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(input.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&quot;value&quot;</span>)) <span class=\"hljs-comment\">// hello</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(input.<span class=\"hljs-property\">value</span>) <span class=\"hljs-comment\">// hello</span>\n    \n    <span class=\"hljs-comment\">// 当在文本框中输入 ‘world’ 后</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(input.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&quot;value&quot;</span>)) <span class=\"hljs-comment\">// hello</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(input.<span class=\"hljs-property\">value</span>) <span class=\"hljs-comment\">// world</span>\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"document的load事件和domcontentloaded事件之间的区别\">document的load事件和DOMContentLoaded事件之间的区别</h2>\n<p>DOMContentLoaded：👍</p>\n<p>当初始的HTML文档本完全加载和解析完成之后，DOMContentLoaded事件被触发而无需等待样式表、图像和子框架的完成加载</p>\n<p>load：</p>\n<p>window的load事件仅在DOM和所有相关资源全部完成加载后才会触发</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;DOMContentLoaded&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">event</span> =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;DOMContentLoaded&quot;</span>);\n})\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;load&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;window loaded&quot;</span>);\n})\n\n<span class=\"hljs-comment\">// DOMContentLoaded</span>\n<span class=\"hljs-comment\">// window loaded</span>\n</code></pre>\n<h2 id=\"同源策略\">同源策略</h2>\n<p>同源策略是由Netscape提出的一个著名的安全策略，浏览器出于安全方面的考虑，只允许本域名下的接口交互，不同源的客户端脚本，在没有明确授权的情况下，不能读取对方的资源。</p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy\">同源的定义:</a></p>\n<p>如果两个页面的协议，端口（如果有指定）和主机都相同，则两个页面具有相同的<strong>源</strong>。我们也可以把它称为“协议/主机/端口 tuple”，或简单地叫做“tuple&quot;. (&quot;tuple&quot; ，“元”，是指一些事物组合在一起形成一个整体，比如（1，2）叫二元，（1，2，3）叫三元)</p>\n<p>下表给出了相对<code>http://store.company.com/dir/page.html</code>同源检测的示例:</p>\n<p>| URL                                               | 结果 | 原因         |\n| </p>\n"}},"__N_SSG":true}