{"pageProps":{"post":{"title":"JavaScript复习-迭代器","tags":["JavaScript","迭代器","Iterator"],"categories":"2021复习","description":"在软件开发领域，迭代的意思是按照顺序反复多次执行一段程序，通常会有明确的终止条件\n\n任何实现Iterable接口的数据结构都可以被实现Iterator接口的结构消费。迭代器是按需创建的一次性对象。每个迭代器都会关联一个可迭代对象，而迭代器会暴露迭代其关联可迭代对象的API。迭代器无需了解与其关联的可迭代对象的结构，只需要知道如何取得连续的值。\n\n## 可迭代协议\n\n数据结构必须暴露一个属性作为","createDate":"2021-05-12 14:32:07","updateDate":"2021-06-10 11:06:19","body":"<p>在软件开发领域，迭代的意思是按照顺序反复多次执行一段程序，通常会有明确的终止条件</p>\n<p>任何实现Iterable接口的数据结构都可以被实现Iterator接口的结构消费。迭代器是按需创建的一次性对象。每个迭代器都会关联一个可迭代对象，而迭代器会暴露迭代其关联可迭代对象的API。迭代器无需了解与其关联的可迭代对象的结构，只需要知道如何取得连续的值。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">可迭代协议</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>数据结构必须暴露一个属性作为<strong>默认迭代器</strong>，而且这个属性必须使用特殊的<code>Symbol.iterator</code>作为键，以一个迭代器工厂函数作为值（调用其会返回一个一个新迭代器）</p>\n<p>可迭代对象可使用的语言特性包括：</p>\n<ul>\n<li><code>for-of</code>循环</li>\n<li>数组解构</li>\n<li>扩展操作符</li>\n<li><code>Array.from()</code></li>\n<li>创建集合</li>\n<li>创建映射</li>\n<li><code>Promise.all()</code>接收由<code>Promise</code>组成的可迭代对象</li>\n<li><code>Promise.race()</code>接收由<code>Promise</code>组成的可迭代对象</li>\n<li><code>yield* </code>操作符，在生成器中使用</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">迭代器协议</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>迭代器是一次性使用的对象</li>\n<li>迭代器API使用next()方法在可迭代对象中遍历数据。每次成功调用next()，都会返回一个IteratorResult对象，其中包含迭代器返回的下一个值。</li>\n<li>每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有关系，只会独立地遍历可迭代对象</li>\n<li>迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来标记遍历可迭代对象的历程。如果可迭代对象在遍历期间被修改了，那么迭代器也会反应相应地变化</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> iterable = {\n  [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-title function_\">next</span>(<span class=\"hljs-params\"></span>) {\n        count += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">if</span> (count &lt;= <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">false</span>, <span class=\"hljs-attr\">value</span>: count };\n        <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">undefined</span> };\n      },\n      <span class=\"hljs-keyword\">return</span>() {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;exiting early&#x27;</span>);\n        <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">undefined</span> };\n      },\n    };\n  },\n};\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">提前终止迭代器：</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><code>for-of</code>循环通过<code>break</code>、<code>continue</code>、<code>return</code>、<code>throw</code>提前退出</li>\n<li>解构操作并未消费的值</li>\n</ul>\n<p>并非所有迭代器都是可关闭的，比如数组</p>\n"}},"__N_SSG":true}