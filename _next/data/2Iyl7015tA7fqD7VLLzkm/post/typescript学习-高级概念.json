{"pageProps":{"post":{"title":"typescript学习-高级概念","tags":["分发","逆变","协变"],"categories":"typescript","description":"一些typescript中的概念\n\n## 分发\n\n先上demo\n\n``` ts\ntype GetSomeType<T extends string | number> = T extends string ? 'a' : 'b';\n\nlet one: GetSomeType<string>\n// 'a'\n\nlet two: GetSomeType<number>\n// 'b'\n\nlet thre","createDate":"2022-07-29 20:01:35","updateDate":"2022-07-31 23:01:35","body":"<p>一些typescript中的概念</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">分发</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>先上demo</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">GetSomeType</span>&lt;T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>&gt; = T <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-built_in\">string</span> ? <span class=\"hljs-string\">&#x27;a&#x27;</span> : <span class=\"hljs-string\">&#x27;b&#x27;</span>;\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">one</span>: <span class=\"hljs-title class_\">GetSomeType</span>&lt;<span class=\"hljs-built_in\">string</span>&gt;\n<span class=\"hljs-comment\">// &#x27;a&#x27;</span>\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">two</span>: <span class=\"hljs-title class_\">GetSomeType</span>&lt;<span class=\"hljs-built_in\">number</span>&gt;\n<span class=\"hljs-comment\">// &#x27;b&#x27;</span>\n\n<span class=\"hljs-keyword\">let</span> <span class=\"hljs-attr\">three</span>: <span class=\"hljs-title class_\">GetSomeType</span>&lt;<span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span>&gt;\n<span class=\"hljs-comment\">// ?</span>\n</code></pre>\n<p>对于 <code>three</code> 的类型，感觉会是什么呢？ <code>a</code> or <code>b</code> or <code>&#39;a&#39; | &#39;b&#39;</code> ？</p>\n<p><img src=\"/img/typescript-high-concept-0.png\" alt=\"类型分发\"></p>\n<p>答案是 <code>&#39;a&#39; | &#39;b&#39;</code> !</p>\n<p>有点意思， <code>three</code>的类型竟然被推导成为了 <code>&#39;a&#39; | &#39;b&#39;</code> 组成的联合类型</p>\n<p><strong>其实这就是所谓分发在捣鬼</strong></p>\n<p>抛开晦涩的概念来解读分发，结合上边的 Demo 来说所谓的<strong>分发简单来说就是分别使用 string 和 number 这两个类型进入 GetSomeType 中进行判断，最终返回两次类型结果组成的联合类型</strong></p>\n<p>那么，什么情况下会产生分发呢？满足分发需要一定的条件</p>\n<ol>\n<li><p>毫无疑问分发一定是需要产生在 extends 产生的类型条件判断中，并且是前置类型</p>\n</li>\n<li><p>分发一定是要满足联合类型，只有联合类型才会产生分发</p>\n</li>\n<li><p>分发一定要满足所谓的裸类型中才会产生效果（像 <code>Array&lt;string&gt;</code> 就不属于裸类型）</p>\n</li>\n</ol>\n<p>分发的作用/应用：实现一些工具类型，比如内置的 <code>Exclude</code> 和 <code>Extract</code> 等</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">TypeA</span> = <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span> | <span class=\"hljs-built_in\">boolean</span> | symbol\n\n<span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">MyExclude</span>&lt;T, U&gt; = T <span class=\"hljs-keyword\">extends</span> U ? <span class=\"hljs-built_in\">never</span> : T\n</code></pre>\n<p><img src=\"/img/typescript-high-concept-1.png\" alt=\"分发的应用-Exclude\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">逆变</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">协变</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://juejin.cn/post/7089809919251054628\">如何进阶TypeScript功底？一文带你理解TS中各种高级语法</a></p>\n"}},"__N_SSG":true}