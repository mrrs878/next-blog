{"pageProps":{"post":{"title":"JavaScript复习-继承","tags":["JavaScript"],"categories":"2021复习","description":"使用继承的原因：**复用**\n\n## 基于原型链\n\n每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也可能是一个对象...这样就在实例和原型之间构造了一条原型链\n\n``` js\nfunction SuperType() {\n    this.property","createDate":"2021-05-10 14:17:07","updateDate":"2021-06-10 18:24:51","body":"<p>使用继承的原因：<strong>复用</strong></p>\n<h2 id=\"基于原型链\">基于原型链</h2>\n<p>每个构造函数都有一个原型对象，原型有一个属性指回构造函数，而实例有一个内部指针指向原型。如果原型是另一个类型的实例呢？那就意味着这个原型本身有一个内部指针指向另一个原型，相应地另一个原型也可能是一个对象...这样就在实例和原型之间构造了一条原型链</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span> = <span class=\"hljs-literal\">false</span>;\n}\n<span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();\n    <span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>());\n<span class=\"hljs-keyword\">const</span> instance2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2.<span class=\"hljs-title function_\">getSuperValue</span>());\n<span class=\"hljs-comment\">// false</span>\n<span class=\"hljs-comment\">// false</span>\n</code></pre>\n<p><code>getSuperTypeValue()</code>方法还在<code>SuperType.prototype</code>上，而<code>prototype</code>却在<code>SubType.prototype</code>上。这是因为<code>getSuperType()</code>是一个原型方法，而<code>property</code>是一个实例属性</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/extends_prototype.png\" alt=\"基于原型链模式的继承\"></p>\n<p>问题：</p>\n<ol>\n<li>原型中包含的引用值会在所有实例中共享</li>\n<li>子类在实例化时不能给父类的构造函数传参</li>\n</ol>\n<h2 id=\"盗用构造函数\">盗用构造函数</h2>\n<p>在子类构造函数中调用父类的构造函数</p>\n<p>问题：</p>\n<p>只继承了父类的属性，没有继承父类的方法</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n}\n<span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">property</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) {\n    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-number\">21</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance);\n<span class=\"hljs-keyword\">const</span> instance2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;jerry&#x27;</span>, <span class=\"hljs-number\">22</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2.<span class=\"hljs-property\">getSuperValue</span>);\n<span class=\"hljs-comment\">// SubType { name: &#x27;tom&#x27;, age: 21 }  </span>\n<span class=\"hljs-comment\">// SubType { name: &#x27;jerry&#x27;, age: 22 }</span>\n<span class=\"hljs-comment\">// undefined</span>\n</code></pre>\n<h2 id=\"组合继承\">组合继承</h2>\n<p>使用原型链继承方法，使用构造函数继承属性</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n}\n<span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age</span>) {\n    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;\n}\n<span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperType</span>();\n<span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-number\">21</span>);\n<span class=\"hljs-keyword\">const</span> instance2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;jerry&#x27;</span>, <span class=\"hljs-number\">23</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-title function_\">getSubValue</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2.<span class=\"hljs-property\">name</span>);\n<span class=\"hljs-comment\">// SuperType { name: &#x27;tom&#x27;, age: 21 }</span>\n<span class=\"hljs-comment\">// 21</span>\n<span class=\"hljs-comment\">// tom</span>\n<span class=\"hljs-comment\">// jerry</span>\n</code></pre>\n<h2 id=\"寄生组合式继承\">寄生组合式继承</h2>\n<p>组合式继承的缺点在于调用了两次父类的构造函数，造成了子类构造函数和实例上有一组相同的属性</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/prorotype_constructor_inheritance.png\" alt=\"组合式继承的缺点\"></p>\n<p>寄生组合式继承通过盗用构造函数继承属性，使用混合式原型链继承方法</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">inheritance</span>(<span class=\"hljs-params\">superType, subType</span>) {\n    <span class=\"hljs-keyword\">const</span> pro = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(superType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>);\n    pro.<span class=\"hljs-property\">constructor</span> = subType;\n    subType.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = pro;\n}\n  \n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SuperType</span>(<span class=\"hljs-params\">name, friends</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">friends</span> = friends;\n}\n<span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSuperValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">SubType</span>(<span class=\"hljs-params\">name, age, friends, colors</span>) {\n    <span class=\"hljs-title class_\">SuperType</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name, friends);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span> = age;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">colors</span> = colors;\n}\n<span class=\"hljs-title function_\">inheritance</span>(<span class=\"hljs-title class_\">SuperType</span>, <span class=\"hljs-title class_\">SubType</span>);\n<span class=\"hljs-title class_\">SubType</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getSubValue</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">age</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> instance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-number\">21</span>, [], []);\ninstance.<span class=\"hljs-property\">friends</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;jerry&#x27;</span>);\ninstance.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;pink&#x27;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-title function_\">getSuperValue</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-title function_\">getSubValue</span>());\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-property\">friends</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance.<span class=\"hljs-property\">colors</span>);\n\n<span class=\"hljs-keyword\">const</span> instance2 = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SubType</span>(<span class=\"hljs-string\">&#x27;jerry&#x27;</span>, <span class=\"hljs-number\">21</span>, [], []);\ninstance2.<span class=\"hljs-property\">friends</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\ninstance2.<span class=\"hljs-property\">colors</span>.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">&#x27;black&#x27;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2.<span class=\"hljs-property\">friends</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(instance2.<span class=\"hljs-property\">colors</span>);\n<span class=\"hljs-comment\">// tom</span>\n<span class=\"hljs-comment\">// 21</span>\n<span class=\"hljs-comment\">// [ &#x27;jerry&#x27; ]</span>\n<span class=\"hljs-comment\">// [ &#x27;pink&#x27; ]</span>\n<span class=\"hljs-comment\">// [ &#x27;tom&#x27; ]</span>\n<span class=\"hljs-comment\">// [ &#x27;black&#x27; ]</span>\n</code></pre>\n"}},"__N_SSG":true}