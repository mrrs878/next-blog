{"pageProps":{"post":{"title":"网络复习-WebSocket","tags":["WebSocket"],"categories":"2021复习","description":"## WebSocket是什么\n\nHTML5开始提供的一种浏览器与服务器进行**全双工通讯**的网络技术，属于**应用层协议**、基于**TCP**、**复用HTTP的握手通道**\n\n## 和长轮训的区别\n\n长轮训就是客户端发起一个请求，服务器收到客户端发送的请求后，服务端不会直接进行响应，而是先将这个请求挂起，然后判断请求的数据是否有更新，如果有更新，则进行更新，如果一直没有数据，则等待一定","createDate":"2021-05-10 05:04:10","updateDate":"2021-05-10 18:53:03","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WebSocket是什么</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>HTML5开始提供的一种浏览器与服务器进行<strong>全双工通讯</strong>的网络技术，属于<strong>应用层协议</strong>、基于<strong>TCP</strong>、<strong>复用HTTP的握手通道</strong></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">和长轮训的区别</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>长轮训就是客户端发起一个请求，服务器收到客户端发送的请求后，服务端不会直接进行响应，而是先将这个请求挂起，然后判断请求的数据是否有更新，如果有更新，则进行更新，如果一直没有数据，则等待一定的时间后返回</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何建立连接</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>WebSocket</code>复用了<code>HTTP</code>的握手通道。客户端通过<code>HTTP</code>请求与<code>WebSocket</code>服务器协商<strong>升级协议</strong>，协议升级完成后，后续的数据交换则按照<code>WebSocket</code>的协议。</p>\n<p>首先，客户端发起协议升级请求</p>\n<pre><code class=\"hljs language-http\"><span class=\"hljs-keyword\">GET</span> <span class=\"hljs-string\">ws://localhost:8080/</span> <span class=\"hljs-meta\">HTTP/1.1</span>\n<span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>Upgrade\n<span class=\"hljs-attribute\">Host</span><span class=\"hljs-punctuation\">: </span>localhost:8080\n<span class=\"hljs-attribute\">Origin</span><span class=\"hljs-punctuation\">: </span>http://localhost:3000\n<span class=\"hljs-attribute\">Sec-WebSocket-Extensions</span><span class=\"hljs-punctuation\">: </span>permessage-deflate; client_max_window_bits\n<span class=\"hljs-attribute\">Sec-WebSocket-Key</span><span class=\"hljs-punctuation\">: </span>wXE7gVKUV5flJWEnJLr8pw==\n<span class=\"hljs-attribute\">Sec-WebSocket-Version</span><span class=\"hljs-punctuation\">: </span>13\n<span class=\"hljs-attribute\">Upgrade</span><span class=\"hljs-punctuation\">: </span>websocket\n</code></pre>\n<p>然后服务端响应协议升级</p>\n<pre><code class=\"hljs language-http\"><span class=\"hljs-meta\">HTTP/1.1</span> <span class=\"hljs-number\">101</span> Switching Protocols\n<span class=\"hljs-attribute\">Upgrade</span><span class=\"hljs-punctuation\">: </span>websocket\n<span class=\"hljs-attribute\">Connection</span><span class=\"hljs-punctuation\">: </span>Upgrade\n<span class=\"hljs-attribute\">Sec-WebSocket-Accept</span><span class=\"hljs-punctuation\">: </span>DeY5PvpKJhTquRvvA7TPBcinVBk=\n</code></pre>\n<p>代码演示：</p>\n<p>服务端(使用<code>ws</code>库)：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;express&quot;</span>);\n<span class=\"hljs-keyword\">const</span> ws = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ws&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> wsServer = <span class=\"hljs-keyword\">new</span> ws.<span class=\"hljs-title class_\">Server</span>({ <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span> });\n\nwsServer.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;connection&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">ws</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;server: connected to a client&quot;</span>);\n  ws.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;message&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">msg</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`server: message receive from client--<span class=\"hljs-subst\">${msg}</span>`</span>);\n  });\n  ws.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;hello client&quot;</span>);\n  ws.<span class=\"hljs-title function_\">ping</span>(<span class=\"hljs-string\">&quot;&quot;</span>, <span class=\"hljs-literal\">false</span>, <span class=\"hljs-function\">() =&gt;</span> {});\n});\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">req, res</span>) =&gt;</span> {\n  res.<span class=\"hljs-title function_\">sendFile</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${__dirname}</span>/index.html`</span>);\n})\n\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3000</span>);\n</code></pre>\n<p>客户端：</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">main</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;container&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onclick</span>=<span class=\"hljs-string\">&quot;sendMessage()&quot;</span>&gt;</span>sendMessage<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">main</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n    <span class=\"hljs-keyword\">const</span> wsClient = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebSocket</span>(<span class=\"hljs-string\">&quot;ws://localhost:8080&quot;</span>);\n    wsClient.<span class=\"hljs-property\">onopen</span> = <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;client: connected to server&quot;</span>);\n    }\n    wsClient.<span class=\"hljs-property\">onmessage</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">msg</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`client: receive from server--<span class=\"hljs-subst\">${msg.data}</span>`</span>);\n    }\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendMessage</span>(<span class=\"hljs-params\"></span>) {\n      wsClient.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-string\">&quot;hello server&quot;</span>);\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>运行结果：</p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">客户端</span>\nclient: connected to server\nclient: receive from server--hello client\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">服务端</span>\nserver: connected to a client\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">数据交换</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>一旦<code>WebSocket</code>客户端、服务端建立连接后，后续的操作都是基于<strong>数据帧</strong>的传递</p>\n<p><code>WebSocket</code>根据<code>opcode</code>来区分操作的类型。比如<code>0x8</code>表示断开连接，<code>0x0-0x2</code>表示数据交互</p>\n<p>数据分片：</p>\n<p><code>WebSocket</code>的每条消息可能被切分成多个数据帧。当<code>WebSocket</code>的接收方接收到一个数据帧时，会根据FIN的值进行判断，是否已经收到消息的最后一个数据帧</p>\n<pre><code class=\"hljs language-http\"># 一个完整的消息(FIN=1且opcode != 0x0)\n<span class=\"hljs-attribute\">Client</span><span class=\"hljs-punctuation\">: </span>FIN=1, opcode=0x1, msg=&quot;hello&quot;\n<span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>(process complete message immediately) Hi.\n\n# 文本消息且消息还没发送完成\n<span class=\"hljs-attribute\">Client</span><span class=\"hljs-punctuation\">: </span>FIN=0, opcode=0x1, msg=&quot;and a&quot;\n<span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>(listening, new message containing text started)\n# 延续帧\n<span class=\"hljs-attribute\">Client</span><span class=\"hljs-punctuation\">: </span>FIN=0, opcode=0x0, msg=&quot;happy new&quot;\n<span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>(listening, payload concatenated to previous message)\n# 最终帧\n<span class=\"hljs-attribute\">Client</span><span class=\"hljs-punctuation\">: </span>FIN=1, opcode=0x0, msg=&quot;year!&quot;\n<span class=\"hljs-attribute\">Server</span><span class=\"hljs-punctuation\">: </span>(process complete message) Happy new year to you too!\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">心跳</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在Websocket中定义了<strong>心跳ping(0x9)</strong> 和 <strong>心跳pong(0xA)</strong> 的控制帧</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://juejin.cn/post/6844903544978407431\">WebSocket：5分钟从入门到精通\n</a></p>\n"}},"__N_SSG":true}