{"pageProps":{"post":{"title":"React.js复习-diff","tags":["React.js"],"categories":"2024复习","description":"## Diff\n\n### 什么 diff\n\n简单来讲就是在 `re-render` 时，以上一次的 `fiber` 树作为基础，以这次的 vdom 作为目标，生成一个新的 `fiber` 树，在此过程中尽量复用旧的节点。分别发生在 `reconcile` 阶段中的 `beginWork` 和 `completeWork` 中，在 `beginWork` 阶段，React 会遍历新的 vdom，并","createDate":"2024-03-21 14:08:32","updateDate":"2024-03-24 20:40:43","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Diff</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">什么 diff</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>简单来讲就是在 <code>re-render</code> 时，以上一次的 <code>fiber</code> 树作为基础，以这次的 vdom 作为目标，生成一个新的 <code>fiber</code> 树，在此过程中尽量复用旧的节点。分别发生在 <code>reconcile</code> 阶段中的 <code>beginWork</code> 和 <code>completeWork</code> 中，在 <code>beginWork</code> 阶段，React 会遍历新的 vdom，并尝试复用旧的 <code>fiber</code> 节点。在 <code>completeWork</code> 阶段，React 会根据新的 vdom 和旧的 <code>fiber</code> 节点的比较结果，生成新的 fiber 树</p>\n<p>第一次渲染时不需要 diff，直接由 vdom 生成 <code>fiber</code> 。再次渲染的时候，会产生新的 vdom，这时候就需要运用 diff 算法。</p>\n<p>传统的 diff 算法，对于树的处理，时间复杂度在 O(n^3)，这对于前端框架来说太慢了，开销过于高昂，因此为降低时间复杂度，React 的 diff 算法会预设三个限制</p>\n<ol>\n<li><p>只进行同层比较</p>\n</li>\n<li><p>节点 <code>type</code> 不同时，直接删除节点（及其子孙节点）</p>\n</li>\n<li><p>根据 <code>key</code> 来复用节点</p>\n</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">为什么要有 diff</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>为什么要做 diff 呢？直接使用新的 vdom 替换不可以吗？ 🤔</p>\n<p>可以是可以，但无法实现一些功能，比如保持输入框的聚焦状态，丝滑的动画等等，而且频繁创建 dom 节点对浏览器也是不小的负担。</p>\n<p>诶，那我们就不能自己来决定哪些 dom 更新吗？这样性能不更高效吗？</p>\n<p>可以滴，对于复杂页面，程序员表示这 diff 谁爱做谁做，更新一个节点掉一根头发 👨‍🦲</p>\n<p><strong>SSR 并没有 diff</strong></p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">性能</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ol>\n<li><p>合并大量 dom 操作并进行统一处理，减少重绘重排次数</p>\n</li>\n<li><p>复用 dom 节点，减少创建/删除 dom 节点次数，而非全量重渲</p>\n</li>\n</ol>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">状态</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ol>\n<li><p>保持某些特殊的状态</p>\n</li>\n<li><p>实现更细滑的动画</p>\n</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何实现 diff</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>以下过程发生在 render 阶段</strong></p>\n<p>核心--<strong>复用</strong></p>\n<p>总结：同层比较，使用 <code>key</code> 和 <code>type</code> 决定节点的更新类型（新增、删除、移动）。由于是单链表对比，无法使用双指针优化，需要经过两次遍历对比出结果：</p>\n<ol>\n<li><p>第一轮对比<code>key</code>，直至遇到 <code>key</code> 不一致的节点</p>\n</li>\n<li><p>第二轮，将剩下的 <code>fiber</code> 节点存入 <code>map</code> 中，继续遍历剩下的新的 <code>element</code> ，从 map 中查找是否能复用</p>\n</li>\n</ol>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">节点移动逻辑</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>新增/删除逻辑较为简单，这里着重研究一下节点<strong>移动</strong>逻辑</p>\n<p>以 👇 的数据为例</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- before --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;A&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;A&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;B&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;B&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;C&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;D&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;D&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;E&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;E&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n<span class=\"hljs-comment\">&lt;!-- after --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;A&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;A&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;C&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;C&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;B&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;B1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;D&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;D&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;E1&quot;</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">&quot;E1&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n</code></pre>\n<p>其中，删除了 <code>li#B</code> 和 <code>li#E</code> ，新增了 <code>li#B1</code> 和 <code>li#E1</code> ，将 <code>li#C</code> 向前移动</p>\n<p>第一轮遍历，到达 <code>li#C</code> 时即停止，将 <code>li#B</code> 至 <code>li#E</code> 存至 <code>existingChildren</code> 中，以 <code>key</code> 或 <code>index</code> 作为键，更新 <code>lastPlacedIndex</code> 为 0, 开启第二轮遍历。</p>\n<p>发现 <code>li#C</code> 可以复用，将其从 <code>existingChildren</code> 中删除，并更新 <code>lastPlacedIndex</code> 为 2 （在 <code>existingChildren</code> 中的位置）；继续遍历</p>\n<p>发现 <code>li#B</code> 为新增</p>\n<p>发现 <code>li#D</code> 可复用，并且 <code>li#D</code> 的 <code>index</code> 小于 <code>lastPlacedIndex</code> ， <code>li#D</code> 不用移动，同时更新 <code>existingChildren</code> 为 3</p>\n<p>发现 <code>li#E</code> 为新增</p>\n<p>遍历结束，标记 <code>existingChildren</code> 中其余节点为删除</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">关联</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"\">双指针</a>\n<a href=\"\">深度优先遍历</a></p>\n"}},"__N_SSG":true}