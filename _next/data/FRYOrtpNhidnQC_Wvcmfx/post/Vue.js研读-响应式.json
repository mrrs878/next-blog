{"pageProps":{"post":{"title":"Vue.js研读-响应式","tags":["Vue.js","响应式"],"categories":"Vue.js","description":"## 响应式原理\n\n![响应式管理](https://mrrsblog.oss-cn-shanghai.aliyuncs.com/vue-1.png)\n\nData通过`Observer`转换成了**getter/setter**的形式类追踪变化\n\n当外界通过`Watcher`读取数据（Compile时会根据**{}**、**v-***来创建Watcher）时会触发getter从而将Watche","createDate":"2020-03-03 23:15:13","updateDate":"10/1/2021, 3:34:43 AM","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">响应式原理</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/vue-1.png\" alt=\"响应式管理\"></p>\n<p>Data通过<code>Observer</code>转换成了<strong>getter/setter</strong>的形式类追踪变化</p>\n<p>当外界通过<code>Watcher</code>读取数据（Compile时会根据**{}<strong>、</strong>v-***来创建Watcher）时会触发getter从而将Watcher添加到依赖中</p>\n<p>当数据发生变化时，会触发setter，从而向<code>Dep</code>中的依赖（Watcher）发送通知</p>\n<p>Wacher接收到通知后，会向外界发送通知，变化通知到外界后可能会触发视图更新，也有可能触发用户的某个回调函数</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">简易版响应式（Proxy + Observer/Watcher/Dep）</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> uid = <span class=\"hljs-number\">0</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parsePath</span>(<span class=\"hljs-params\">obj, path</span>) {\n    <span class=\"hljs-keyword\">if</span> (path === <span class=\"hljs-string\">&quot;&quot;</span>) <span class=\"hljs-keyword\">return</span> obj\n    <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data, current</span>) =&gt;</span> data[current], obj)\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">defineReactive</span> (data) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> data !== <span class=\"hljs-string\">&quot;object&quot;</span>) <span class=\"hljs-keyword\">return</span> data\n    <span class=\"hljs-keyword\">let</span> dep = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Dep</span>()\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(data, {\n        <span class=\"hljs-attr\">set</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">target, prop, value, receiver</span>) =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> oldVal = target[prop]\n            <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">set</span>(target, prop, <span class=\"hljs-title function_\">defineReactive</span>(value), receiver)\n            <span class=\"hljs-keyword\">if</span> (oldVal !== value) dep.<span class=\"hljs-title function_\">notify</span>()\n            <span class=\"hljs-keyword\">return</span> res\n        },\n        <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">target, prop, receiver</span>) =&gt;</span> {\n            dep.<span class=\"hljs-title function_\">depend</span>()\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">get</span>(target, prop, receiver)\n        }\n    })\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Observer</span> {\n    <span class=\"hljs-title function_\">constructor</span> (vm) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> vm !== <span class=\"hljs-string\">&quot;object&quot;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&quot;vm must be an object&quot;</span>)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">walk</span>(vm)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">defineReactive</span>(vm)\n    }\n    walk (vm) {\n        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(vm).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> {\n            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> vm[item] === <span class=\"hljs-string\">&quot;object&quot;</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">walk</span>(vm[item])\n            vm[item] = <span class=\"hljs-title function_\">defineReactive</span>(vm[item])\n        })\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Dep</span> {\n    <span class=\"hljs-title function_\">constructor</span> () {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">id</span> = uid++\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span> = []\n    }\n    addSub (sub) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">push</span>(sub)\n    }\n    depend () {\n        <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> &amp;&amp; <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span>.<span class=\"hljs-title function_\">addDep</span>(<span class=\"hljs-variable language_\">this</span>)\n    }\n    notify () {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">slice</span>().<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.<span class=\"hljs-title function_\">update</span>())\n    }\n    removeSub (sub) {\n        <span class=\"hljs-keyword\">const</span> index = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">indexOf</span>(sub)\n        index &gt; -<span class=\"hljs-number\">1</span> &amp;&amp; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">subs</span>.<span class=\"hljs-title function_\">splice</span>(index, <span class=\"hljs-number\">1</span>)\n    }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Watcher</span> {\n    <span class=\"hljs-title function_\">constructor</span> (vm, exp, cb) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span> = vm\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">exp</span> = exp\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span> = cb\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span> = []\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depIds</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>()\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>() \n    }\n    get () {\n        <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> = <span class=\"hljs-variable language_\">this</span>\n        <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-title function_\">parsePath</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">exp</span>)\n        <span class=\"hljs-title class_\">Dep</span>.<span class=\"hljs-property\">target</span> = <span class=\"hljs-literal\">undefined</span>\n        <span class=\"hljs-keyword\">return</span> value\n    }\n    update () {\n        <span class=\"hljs-keyword\">const</span> oldValue = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">get</span>()\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">cb</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">vm</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span>, oldValue)\n    }\n    addDep (dep) {\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depIds</span>.<span class=\"hljs-title function_\">has</span>(dep.<span class=\"hljs-property\">id</span>)) <span class=\"hljs-keyword\">return</span>\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depIds</span>.<span class=\"hljs-title function_\">add</span>(dep.<span class=\"hljs-property\">id</span>)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>.<span class=\"hljs-title function_\">push</span>(dep)\n        dep.<span class=\"hljs-title function_\">addSub</span>(<span class=\"hljs-variable language_\">this</span>)\n    }\n    teardown () {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">deps</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.<span class=\"hljs-title function_\">removeSub</span>(<span class=\"hljs-variable language_\">this</span>))\n    }\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">watch</span>(<span class=\"hljs-params\">vm, exp, cb, options = {}</span>) {\n    <span class=\"hljs-keyword\">const</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(vm, exp, cb)\n    <span class=\"hljs-keyword\">if</span> (options.<span class=\"hljs-property\">immediate</span>) cb.<span class=\"hljs-title function_\">call</span>(vm, watcher.<span class=\"hljs-property\">value</span>)\n    <span class=\"hljs-keyword\">return</span> watcher.<span class=\"hljs-property\">teardown</span>.<span class=\"hljs-title function_\">bind</span>(watcher)\n}\n\n<span class=\"hljs-keyword\">export</span> { <span class=\"hljs-title class_\">Observer</span>, watch }\n</code></pre>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;./mvvm.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Observer</span>({\n        <span class=\"hljs-attr\">student</span>: {\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tom&quot;</span>,\n            <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>\n        },\n        <span class=\"hljs-attr\">address</span>: {\n            <span class=\"hljs-attr\">province</span>: {\n                <span class=\"hljs-attr\">id</span>: <span class=\"hljs-number\">41</span>,\n                <span class=\"hljs-attr\">view</span>: <span class=\"hljs-string\">&quot;河南&quot;</span>\n            }\n        },\n        <span class=\"hljs-attr\">friends</span>: [ <span class=\"hljs-string\">&quot;zhangsan&quot;</span>, <span class=\"hljs-string\">&quot;lisi&quot;</span>, <span class=\"hljs-string\">&quot;wangwu&quot;</span> ],\n    })\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(data, <span class=\"hljs-string\">&quot;student&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;update student&#x27;</span>, val)\n    })\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(data, <span class=\"hljs-string\">&quot;student.name&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;update student.name&#x27;</span>, val)\n    })\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(data, <span class=\"hljs-string\">&quot;student.age&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;update student.age&#x27;</span>, val)\n    })\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(data, <span class=\"hljs-string\">&quot;address.province.id&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;update address.province.id&quot;</span>, val);\n    })\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Watcher</span>(data, <span class=\"hljs-string\">&quot;friends.length&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;update student.friends&#x27;</span>, data.<span class=\"hljs-property\">friends</span>[val - <span class=\"hljs-number\">1</span>]);\n    })\n    <span class=\"hljs-keyword\">const</span> unwatch = <span class=\"hljs-title function_\">watch</span>(data, <span class=\"hljs-string\">&quot;address.province.view&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">val</span> =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;address.province.view&#x27;</span>, val);\n    })\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">$vm.watch(expOrFn, callback, [options])</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>用于观察一个表达式或computed函数在Vue.js实例上的变化。回调函数调用时，会从参数中得到oldValue和newValue</p>\n<p>vm.$watch其实是对Watcher的一种封装，没有缓存性，通过Watcher完全可以实现vm.$watch的功能</p>\n<ol>\n<li>先执行new Watcher来实现vm.$watch的基本功能</li>\n<li>判断用户是否使用immediate参数，如果使用了则立即执行一次cb</li>\n<li>判断用户是否使用deep参数，如果使用除了要触发当前这个被监听数据的依赖收集的逻辑之外，还要把当前监听的这个值在内的所有子值都要触发一遍依赖收集逻辑</li>\n<li>返回一个函数unwatchFn，用于取消观察数据</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">$vm.computed</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>computed</code>是定义在<code>vm</code>上的一个特殊的<code>getter</code>方法。之所以说特殊是因为在vm上定义<code>getter</code>方法时，<code>get</code>并不是由用户提供的函数，而是Vue.js内部的一个代理函数。在代理函数中可以结合<code>Watcher</code>实现缓存与收集依赖等功能。在模板中使用一个数据渲染视图时，如果这个数据恰好是计算属性，那么读取数据这个操作其实会触发计算属性的<code>getter</code>方法。</p>\n<p>当这个getter方法被触发时会做两件事：</p>\n<ol>\n<li>计算当前属性的值，此时会使用Watcher去观察计算属性中用到的所有其他数据的变化。同时将计算属性的Watcher的dirty属性设置为false，这样再次读取计算属性时将不再重新计算，除非计算属性所依赖的值发生了变化</li>\n<li>当计算属性中用到的树发生变化时，将得到通知从而进行重新渲染操作</li>\n</ol>\n<p>我们知道计算属性的结果会被缓存，且只有在计算属性所依赖的响应式属性或者计算属性的返回值发生变化时才会重新计算。这是结合<code>Watcher</code>的<code>dirty</code>属性来分辨的：当<code>dirty===true</code>时，说明需要重新计算“计算属性”的返回值；当计算属性中的内容发生变化后，计算属性的<code>Watcher</code>与组件的<code>Watcher</code>都会得到通知。计算属性的<code>Watcher</code>会将自己的<code>dirty</code>属性设置为true，当下一次读取计算属性时就会重新计算一次值。与此同时组件的<code>Watcher</code>也会得到通知，从而执行render函数进行重新渲染的操作。由于要重新执行<code>render</code>函数，所以会重新读取计算属性的值，这时候计算属性的Watcher已经把自己的<code>dirty</code>置为<code>true</code>，所以会重新计算一次计算属性的值用于本次渲染</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/computed-0.png\" alt=\"computed原理0\"></p>\n<p>这种方式实现的computed有一个弊端：只是观察它所用到的数据是否发生了变化，并<strong>没有真正去校验它自身的返回值是否有变化</strong>，所以当它所使用的数据发生变化后，组件<strong>总会重新走一遍渲染流程</strong>。</p>\n<p>为解决这个问题，新版计算属性做了一些改动：组件的Watcher不再观察计算属性用到的数据的变化，而是让计算属性的Watcher得到通知后计算一次计算属性的值，如果发现这一次计算属性的值与上一次计算出来的值不一样，再去主动通知组件的Watcher进行重新渲染操作。</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/computed-1.png\" alt=\"computed原理1\"></p>\n"}},"__N_SSG":true}