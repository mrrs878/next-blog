{"pageProps":{"post":{"title":"webpack学习-1","tags":["webpack"],"categories":"webpack","description":"# 模块解析\n\n## 解析规则\n\n- 解析相对路径\n  1. 查找相对当前模块的路径下是否有对应文件或文件夹\n  2. 是文件则直接加载\n  3. 是文件夹则继续查找文件夹下的 `package.json` 文件\n  4. 有 package.json 文件则按照文件中 `main` 字段的文件名来查找文件\n  5. 无 package.json 或者无 `main` 字段则查找 `index","createDate":"2020-04-13 23:19:33","updateDate":"10/1/2021, 3:34:43 AM","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">模块解析</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">解析规则</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>解析相对路径<ol>\n<li>查找相对当前模块的路径下是否有对应文件或文件夹</li>\n<li>是文件则直接加载</li>\n<li>是文件夹则继续查找文件夹下的 <code>package.json</code> 文件</li>\n<li>有 package.json 文件则按照文件中 <code>main</code> 字段的文件名来查找文件</li>\n<li>无 package.json 或者无 <code>main</code> 字段则查找 <code>index.js</code> 文件</li>\n</ol>\n</li>\n<li>解析模块名\n查找当前文件目录下，父级目录及以上目录下的 <code>node_modules</code> 文件夹，看是否有对应名称的模块</li>\n<li>解析绝对路径（不建议使用）\n直接查找对应路径的文件</li>\n</ul>\n<p>在 webpack 配置中，和模块路径解析相关的配置都在 <code>resolve</code> 字段下：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">resolve</span>: {\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">常用配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p><code>resolve.alias</code>， 配置别名</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">resolve</span>: {\n        <span class=\"hljs-attr\">alias</span>: {\n            <span class=\"hljs-attr\">utils$</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;src/utils&#x27;</span>) <span class=\"hljs-comment\">// 只会匹配 import &#x27;utils&#x27;</span>\n        }\n    }\n}\n</code></pre>\n</li>\n<li><p><code>resolve.extensions</code>，文件扩展名简写</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">resolve</span>: {\n        <span class=\"hljs-attr\">extensions</span>: {\n            <span class=\"hljs-attr\">extensions</span>: [<span class=\"hljs-string\">&#x27;.wasm&#x27;</span>, <span class=\"hljs-string\">&#x27;.mjs&#x27;</span>, <span class=\"hljs-string\">&#x27;.js&#x27;</span>, <span class=\"hljs-string\">&#x27;.json&#x27;</span>, <span class=\"hljs-string\">&#x27;.jsx&#x27;</span>],\n        }\n    }\n}\n</code></pre>\n</li>\n<li><p><code>resolve.modules</code>，配置直接声明依赖名的模块的解析路径</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">resolve</span>: {\n      <span class=\"hljs-attr\">modules</span>: [\n        path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;node_modules&#x27;</span>), <span class=\"hljs-comment\">// 指定当前目录下的 node_modules 优先查找</span>\n        <span class=\"hljs-string\">&#x27;node_modules&#x27;</span>, <span class=\"hljs-comment\">// 如果有一些类库是放在一些奇怪的地方的，你可以添加自定义的路径或者目录</span>\n      ],\n    }\n}\n</code></pre>\n</li>\n<li><p><code>resolve.mainFields</code>，有<code>package.json</code>文件入口文件的配置</p>\n</li>\n<li><p><code>resolve.mainFiles</code>，没有<code>package.json</code>文件时入口文件的配置</p>\n</li>\n</ul>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">loader</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>webpack 的 <code>loader</code> 相关配置都在 <code>module.rules</code> 字段下，我们需要通过 <code>test</code>、<code>include</code>、<code>exclude</code> 等配置好应用 <code>loader</code> 的条件规则，然后使用 <code>use</code> 来指定需要用到的 <code>loader</code>，配置应用的 <code>loader</code> 时还需要注意一下 <code>loader</code> 的执行顺序。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">modules</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-comment\">//,</span>\n                <span class=\"hljs-attr\">include</span>: [],\n                <span class=\"hljs-attr\">use</span>: xxx\n            }\n        ]\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">规则条件配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><code>{ test: ... }</code> 匹配特定条件</li>\n<li><code>{ include: ... }</code> 匹配特定路径</li>\n<li><code>{ exclude: ... }</code> 排除特定路径</li>\n<li><code>{ and: [...] }</code>必须匹配数组中所有条件</li>\n<li><code>{ or: [...] }</code> 匹配数组中任意一个条件</li>\n<li><code>{ not: [...] }</code> 排除匹配数组中所有条件</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">module type</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js?$/</span>,\n  <span class=\"hljs-attr\">include</span>: [\n    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;src&quot;</span>)\n  ],\n  <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;javascript/esm&quot;</span>\n}\n</code></pre>\n<p>现阶段webpack支持以下几种模块类型：</p>\n<ul>\n<li><code>javascript/auto</code>，默认类型，支持所有JS代码模块类型：CommonJS、AMD、ESM</li>\n<li><code>javascript/esm</code>，ECMAScript Modules</li>\n<li><code>javascript/dynamic</code>，CommonJS和AMD</li>\n<li><code>javascript/json</code>，JSON格式数据，<code>require</code>和<code>import</code>都可以引入，是<code>.json</code>文件的默认类型</li>\n<li><code>javascript/experimental</code>，WebAeesmbly Modules，是<code>.wasm</code>文件的默认类型</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">loader应用顺序</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p>同一个rule下，<strong>从右往左执行</strong></p>\n</li>\n<li><p>多个rule匹配同一个模块文件：</p>\n<p>webpack 在 <code>rules</code> 中提供了一个 <code>enforce</code> 的字段来配置当前 rule 的 loader 类型，没配置的话是普通类型，可以配置 <code>pre</code> 或 <code>post</code>，分别对应前置类型或后置类型的 loader。</p>\n<p>执行顺序：<strong>前置 -&gt; 行内 -&gt; 普通 -&gt; 后置</strong></p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用noParse</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>除了<code>module.rules</code>字段用于配置loader之外，还有一个<code>module.noParse</code>字段可以用于配置哪些模块文件的内容不需要进行解析。对于一些不需要解析依赖（即无依赖，没有使用<code>import</code>、<code>require</code>、<code>define</code>等导入机制）的第三方大型类库可以通过这个字段配置以提高整体的构建速度</p>\n"}},"__N_SSG":true}