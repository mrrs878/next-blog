{"pageProps":{"post":{"title":"React.js学习-StreamingSSR","tags":["React.js","学习","StreamingSSR","SSR"],"categories":"React.js","description":"流式服务端渲染\n\n## 流式渲染（Streaming HTML）\n\nHTTP 支持以 `stream` 格式进行数据传输。当 HTTP 的 Response header 设置 `Transfer-Encoding: chunked` 时，服务器端就可以将 Response 分段返回\n\n如下示例\n\n```js\napp.get(\"/\", async (req, res) => {\n  res.se","createDate":"2023-02-07 20:41:44","updateDate":"2023-02-14 22:39:00","body":"<p>流式服务端渲染</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">流式渲染（Streaming HTML）</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>HTTP 支持以 <code>stream</code> 格式进行数据传输。当 HTTP 的 Response header 设置 <code>Transfer-Encoding: chunked</code> 时，服务器端就可以将 Response 分段返回</p>\n<p>如下示例</p>\n<pre><code class=\"hljs language-js\">app.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&quot;/&quot;</span>, <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\n  res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&quot;Content-Type&quot;</span>, <span class=\"hljs-string\">&quot;text/html&quot;</span>);\n  res.<span class=\"hljs-title function_\">setHeader</span>(<span class=\"hljs-string\">&quot;Transfer-Encoding&quot;</span>, <span class=\"hljs-string\">&quot;chunked&quot;</span>);\n\n  res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;&lt;html&gt;&lt;body&gt;&lt;div&gt;First segment&lt;/div&gt;&quot;</span>);\n\n  <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">sleep</span>(<span class=\"hljs-number\">3000</span>);\n\n  res.<span class=\"hljs-title function_\">write</span>(<span class=\"hljs-string\">&quot;&lt;div&gt;Second segment&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>);\n  res.<span class=\"hljs-title function_\">end</span>();\n});\n</code></pre>\n<p>完整版demo<a href=\"https://github.com/mrrs878/snippets/tree/main/demos/node-streaming\">看这里</a></p>\n<p>在使用 telnet 测试时，可以清楚地看到响应报文中的 <code>chunked</code> 数据格式: 先是一行16进制数据（表示接下来数据的长度），然后是数据；然后再是16进制长度和数据，如此重复，最后是0长度分块结束</p>\n<p><img src=\"/img/streaming-ssr-4.png\" alt=\"renderString timing\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">服务端渲染（SSR）</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">renderToNodeStream</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><img src=\"/img/streaming-ssr-1.png\" alt=\"renderString timing\"></p>\n<p><img src=\"/img/streaming-ssr-0.png\" alt=\"renderToNodeStream timing\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">renderToPipeableStream</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Ref</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ul>\n<li><p><a href=\"https://juejin.cn/post/7064759195710521381\">浅析 React 18 Streaming SSR（流式服务端渲染）</a></p>\n</li>\n<li><p><a href=\"https://mp.weixin.qq.com/s?__biz=Mzg2ODQ1OTExOA==&amp;mid=2247501565&amp;idx=1&amp;sn=b9488bb90455e33eb94ec379c46ce42b&amp;chksm=cea971fcf9def8ea0f176bb06ab65ab4bcf20bfc605f8d728ca382a9de8e72cdfd7c1d1b0930&amp;token=805012839&amp;lang=zh_CN#rd\">React Streaming SSR 原理解析</a></p>\n</li>\n</ul>\n"}},"__N_SSG":true}