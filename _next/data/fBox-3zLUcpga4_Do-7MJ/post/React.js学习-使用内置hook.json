{"pageProps":{"post":{"title":"React.js学习-使用内置hook","tags":["React.js学习","hook"],"categories":"React.js","description":"# 什么是 hook\n\n组件自身能够通过某种机制再触发状态的变更并且引起**re-render**，而这种“机制”就是 Hooks！\n\n# useEffect\n\n- 默认情况下，它在第一次渲染之后和每次更新之后都会执行。React 确保了每次运行`effect`的同时，DOM 都已经更新完毕\n\n- 每次重新渲染，都会生成新的`effect`，替换掉之前的。某种意义上讲，`effect`更像是渲染","createDate":"2020-09-07 10:48:54","updateDate":"2022-05-11 22:19:50","body":"<h1 id=\"什么是-hook\">什么是 hook</h1>\n<p>组件自身能够通过某种机制再触发状态的变更并且引起<strong>re-render</strong>，而这种“机制”就是 Hooks！</p>\n<h1 id=\"useeffect\">useEffect</h1>\n<ul>\n<li><p>默认情况下，它在第一次渲染之后和每次更新之后都会执行。React 确保了每次运行<code>effect</code>的同时，DOM 都已经更新完毕</p>\n</li>\n<li><p>每次重新渲染，都会生成新的<code>effect</code>，替换掉之前的。某种意义上讲，<code>effect</code>更像是渲染结果的一部分 —— 每个<code>effect</code> “属于”一次特定的渲染。</p>\n</li>\n<li><p>每个<code>effect</code>都可以返回一个清除函数。如此可以将添加和移除订阅的逻辑放在一起。他们都属于<code>effect</code>的一部分</p>\n</li>\n</ul>\n<h1 id=\"自定义-hook-的-state-是否共享\">自定义 hook 的 state 是否共享</h1>\n<p>在两个组件中使用相同的<code>hook</code>不会共享<code>state</code>，自定义<code>hook</code>是一种重用状态逻辑的机制，所以每次使用自定义<code>hook</code>时其中的所有<code>state</code>和副作用是完全隔离的</p>\n<h1 id=\"hook-原理\">hook 原理</h1>\n<p>初次渲染的时候，按照 useState，useEffect 等 hook 的顺序，把 state，deps 等按顺序塞到 memoizedState 数组中。</p>\n<p>更新的时候，按照顺序，从 memoizedState 中把上次记录的值拿出来。</p>\n<h1 id=\"state-和-usestate-的对应关系\">state 和 useState 的对应关系</h1>\n<p><code>React</code>靠<code>hook</code>的调用顺序来知道<code>state</code>和<code>useState</code>的对应关系，所以不能在条件/循环中调用<code>hook</code></p>\n<h1 id=\"useeffect-的执行时机\">useEffect 的执行时机</h1>\n<p><code>useEffect</code>会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行</p>\n<h1 id=\"usecallback-和-usememo\">useCallback 和 useMemo</h1>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useCallback</span>(fn, deps) == <span class=\"hljs-title function_\">useMemo</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">fn</span>(), deps);\n</code></pre>\n<h1 id=\"使用过多-hook-后性能问题\">使用过多 hook 后性能问题</h1>\n<p>hook 不会因为在渲染时创建函数而变慢，在现代浏览器中闭包和类的原始性能只有在极端场景下才会有明显的差别</p>\n<h1 id=\"usestate-惰性求值\">useState 惰性求值</h1>\n<p>如果初始化<code>state</code>需要通过复杂计算获得，那么可以传入一个函数，在函数中计算并返回初始的<code>state</code>，此函数只在初始渲染时被调用</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">calState</span>());\n</code></pre>\n<h1 id=\"hook-使用必须要遵循的规则\">hook 使用必须要遵循的规则</h1>\n<p>在函数值组件主体内（指 React 渲染阶段）改变<code>DOM</code>、添加订阅、设置定时器、记录日志以及执行其他包含副作用的操作都是不被允许的，因为这可能会产生莫名其妙的 bug 并破坏 UI 的一致性。使用<code>useEffect</code>完成副作用操作赋值给<code>useEffect</code>的函数会在组件渲染到屏幕后执行。</p>\n<h1 id=\"useref\">useRef</h1>\n<p>通过<code>useRef</code>来拥有一个在<strong>所有帧</strong>中<strong>共享</strong>的变量</p>\n<h1 id=\"usereducer\">useReducer</h1>\n<ul>\n<li><p>state 逻辑较复杂且包含多个子值</p>\n</li>\n<li><p>下一个 state 依赖于之前的 state</p>\n</li>\n</ul>\n<h1 id=\"useimperativehandle\">useImperativeHandle</h1>\n<p>简单来讲: useImperativeHandle 赋予函数式组件使用 ref 的特权, 通常和 forwardRef 成对出现,</p>\n<p>使用方式:</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> { useImperativeHandle, forwardRef, useRef } = <span class=\"hljs-title class_\">React</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Modal</span> = <span class=\"hljs-title function_\">forwardRef</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">props, ref</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">open</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;open&quot;</span>);\n  };\n  <span class=\"hljs-title function_\">useImperativeHandle</span>(ref, <span class=\"hljs-function\">() =&gt;</span> ({\n    open,\n  }));\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>modal<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n});\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> modalRef = <span class=\"hljs-title function_\">useRef</span>(<span class=\"hljs-literal\">null</span>);\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Modal</span> <span class=\"hljs-attr\">ref</span>=<span class=\"hljs-string\">{modalRef}</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> modalRef.current.open()}&gt;click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>));\nroot.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n</code></pre>\n"}},"__N_SSG":true}