{"pageProps":{"post":{"title":"JavaScript复习-异步","tags":["JavaScript","Promise","Generator","Promise"],"categories":"2021复习","description":"JavaScript为异步非阻塞，ES6之前主要靠回调函数来实现异步，但由于回调函数容易出现回调地狱等问题，于是ES6+提供了了`Generator`、`Promise`、`async/await`这些API来降低异步编程的难度与复杂度。\n\n## 回调函数\n\n回调函数容易出现回调地狱，可读性差\n\n``` js\nfunction ajax(url, options, onSuccess) {","createDate":"2021-05-12 10:36:56","updateDate":"2021-06-24 18:47:28","body":"<p>JavaScript为异步非阻塞，ES6之前主要靠回调函数来实现异步，但由于回调函数容易出现回调地狱等问题，于是ES6+提供了了<code>Generator</code>、<code>Promise</code>、<code>async/await</code>这些API来降低异步编程的难度与复杂度。</p>\n<h2 id=\"回调函数\">回调函数</h2>\n<p>回调函数容易出现回调地狱，可读性差</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-params\">url, options, onSuccess</span>) {\n    <span class=\"hljs-comment\">// ...</span>\n}\n\n<span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/xxx&#x27;</span>, {}, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/yyy&#x27;</span>, {}, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-title function_\">ajax</span>(<span class=\"hljs-string\">&#x27;/api/zzz&#x27;</span>, (), <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n        })\n    })\n})\n</code></pre>\n<h3 id=\"generator\">Generator</h3>\n<p>形式上，<code>generator</code>函数是一个状态机，封装了多个内部状态。执行<code>generator</code>函数会返回一个<strong>遍历器对象</strong></p>\n<p>语法上，<code>generator</code>函数是一个普通函数。<code>function</code>关键字与函数名之间有一个<code>*</code>；函数体内使用<code>yield</code>表达式定义不同的内部状态</p>\n<p>与普通函数不同，<code>generator</code>函数被调用后<strong>并不执行</strong>，返回的是一个指向内部状态的指针对象，也就是<strong>遍历器对象</strong>。下一步，<strong>必须调用遍历器对象的<code>next</code>方法</strong>使得指针移向下一个状态，也就是说每次调用<code>next</code>方法，内部指针就从函数头部或上一次停下来的地方开始执行，直到遇到下一个<code>yield</code>或<code>return</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">gen</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> str1 = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&quot;hello&quot;</span>\n  <span class=\"hljs-comment\">// str1 = 222</span>\n  <span class=\"hljs-keyword\">const</span> str2 = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-string\">&quot;world&quot;</span>\n  <span class=\"hljs-comment\">// str2 = 333</span>\n  <span class=\"hljs-keyword\">return</span> str2\n}\n\n<span class=\"hljs-keyword\">const</span> iter = <span class=\"hljs-title function_\">gen</span>()\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iter.<span class=\"hljs-title function_\">next</span>())\n<span class=\"hljs-comment\">// { value: &quot;hello&quot;, done: false }</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iter.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">222</span>))\n<span class=\"hljs-comment\">// { value: &quot;world&quot;, done: false }</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(iter.<span class=\"hljs-title function_\">next</span>(<span class=\"hljs-number\">333</span>))\n<span class=\"hljs-comment\">// { value: 333, done: false }</span>\n</code></pre>\n<p>第一次调用，<code>generator</code>函数开始执行，直到遇到第一个<code>yield</code>表达式为止。<code>next</code>方法返回一个对象，它的<code>value</code>值就是当前<code>yield</code>表达式的值，<code>done</code>的值为<code>false</code></p>\n<p>第二次调用，<code>generator</code>从上次<code>yield</code>表达式停下来的地方一直执行到下一个<code>yield</code>表达式 👆 ……</p>\n<p>第三次调用，<code>generator</code>函数从上次<code>yield</code>表达式停下来的地方一直执行到<code>return</code>语句，<code>next</code>返回的<code>value</code>值就是<code>return</code>后面表达式的值，<code>done</code>为<code>true</code></p>\n<p><code>yield</code>表达式本身没有返回值（或者说总是返回<code>undefined</code>）。<code>next</code>方法可以带一个参数，该参数会被当作<strong>上一个</strong><code>yield</code>表达式的返回值</p>\n<h2 id=\"promise\">Promise</h2>\n<p>ES6提供的一种异步编程方案</p>\n<p>一个<code>Promise</code>对象必然处于以下三种状态：</p>\n<ul>\n<li>pending，初始状态</li>\n<li>fulfilled，成功</li>\n<li>rejected，失败</li>\n</ul>\n<p><code>pending</code>状态的<code>Promise</code>对象可以转换为<code>fulfilled</code>或<code>rejected</code>状态，而且此过程是不可逆的。当状态变更时，<code>then()</code>方法注册的回调就会被调用</p>\n<p><code>then()</code> 或者 <code>catch()</code> 的参数期望是函数，传⼊⾮函数则会发⽣值透传<code>(value =&gt; value)</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">1</span>)\n .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-number\">2</span>) <span class=\"hljs-comment\">// .then(1 =&gt; 1)</span>\n .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">3</span>)) <span class=\"hljs-comment\">// .then(1 =&gt; 1)</span>\n .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span>)\n<span class=\"hljs-comment\">// 1</span>\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-params\">url, options = {}</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();\n    xhr.<span class=\"hljs-title function_\">open</span>(options.<span class=\"hljs-property\">method</span> || <span class=\"hljs-string\">&#x27;GET&#x27;</span>, url);\n    <span class=\"hljs-keyword\">const</span> headers = { <span class=\"hljs-string\">&#x27;Content-Type&#x27;</span>: <span class=\"hljs-string\">&#x27;application/json&#x27;</span>, ...options.<span class=\"hljs-property\">headers</span> || {} };\n    <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(headers)\n      .<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">header</span>) =&gt;</span> xhr.<span class=\"hljs-title function_\">setRequestHeader</span>(header, headers[header]));\n    xhr.<span class=\"hljs-title function_\">send</span>(options.<span class=\"hljs-property\">method</span> === <span class=\"hljs-string\">&#x27;POST&#x27;</span> ? <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(options.<span class=\"hljs-property\">data</span> || {}) : <span class=\"hljs-literal\">null</span>);\n    xhr.<span class=\"hljs-property\">onerror</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> <span class=\"hljs-title function_\">reject</span>(e);\n    xhr.<span class=\"hljs-property\">onreadystatechange</span> = <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (xhr.<span class=\"hljs-property\">readyState</span> === <span class=\"hljs-title class_\">XMLHttpRequest</span>.<span class=\"hljs-property\">DONE</span>\n        &amp;&amp; [<span class=\"hljs-number\">200</span>, <span class=\"hljs-number\">201</span>, <span class=\"hljs-number\">301</span>, <span class=\"hljs-number\">302</span>, <span class=\"hljs-number\">304</span>].<span class=\"hljs-title function_\">includes</span>(xhr.<span class=\"hljs-property\">status</span>)) {\n        <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(xhr.<span class=\"hljs-property\">responseText</span>));\n      }\n    };\n  });\n}\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;http://localhost:3004/get&#x27;</span>).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res);\n}).<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);\n})\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>{\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;1&quot;</span>)\n    <span class=\"hljs-title function_\">resolve</span>();\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">()=&gt;</span>{\n    <span class=\"hljs-comment\">// 外部第1个then</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;2&quot;</span>)\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve,reject</span>)=&gt;</span>{\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;3&quot;</span>)\n        <span class=\"hljs-title function_\">resolve</span>();\n    }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">()=&gt;</span>{\n        <span class=\"hljs-comment\">// 内部第1个then</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;4&quot;</span>)\n    }).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-comment\">// 内部第2个then</span>\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;5&quot;</span>)\n    })\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>)=&gt;</span>{\n    <span class=\"hljs-comment\">// 外部第2个then</span>\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;6&quot;</span>)\n})\n</code></pre>\n<p>简单来讲就是then回调的注册需要上一个then里面的同步代码执行完毕</p>\n<p>拿上面的代码来讲，当外部第1个then里的resovle()执行完毕后，该Promise的状态已经更改，会将内部第1个then回调添加（注册）到微任务队列中；内部第2个then由于上一个then回调没有执行完毕，因此不会注册。此时外部第1个then里的同步代码执行完毕，会注册外部第2个then回调</p>\n<p>整理一下：then回调注册的顺序是：外部第1个then --&gt; 内部第1个then --&gt; 外部第2个then --&gt; 内部第2个then</p>\n<p>ps: 如果将外部第1个then里的new Promise(xxx)改为return new Promise(xxx)的话内部第2个then的注册将早于* 外部第2个then*</p>\n<h2 id=\"asyncawait\">async/await</h2>\n<p>目前来讲，最为优秀的一种异步编程方案，与ES2017提出</p>\n<p>实现上是<code>Generator</code>+<code>Promise</code>的语法糖</p>\n<p>通过在<code>onFulFilled()</code>里调用<code>next()</code>、在<code>next()</code>里调用<code>onFulfilled()</code>形成一个自执行器，只有当全部代码执行完毕后才会终止</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">try</span> {\n        <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;http://localhost:3004/get&#x27;</span>);\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">error</span>(e);\n    }\n}\n</code></pre>\n<p><code>async/await</code>原理: <strong>自动执行generator函数</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">getData</span> = (<span class=\"hljs-params\"></span>) =&gt;\n  <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;data&quot;</span>), <span class=\"hljs-number\">1000</span>));\n\n<span class=\"hljs-keyword\">function</span>* <span class=\"hljs-title function_\">testG</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-comment\">// await被编译成了yield</span>\n  <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getData</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;data: &quot;</span>, data);\n  <span class=\"hljs-keyword\">const</span> data2 = <span class=\"hljs-keyword\">yield</span> <span class=\"hljs-title function_\">getData</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;data2: &quot;</span>, data2);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&quot;success&quot;</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">asyncToGenerator</span>(<span class=\"hljs-params\">generatorFunc</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...args</span>) {\n    <span class=\"hljs-keyword\">const</span> gen = generatorFunc.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args);\n\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-params\">key, arg</span>) {\n        <span class=\"hljs-keyword\">let</span> generatorResult;\n        <span class=\"hljs-keyword\">try</span> {\n          generatorResult = gen[key](arg);\n        } <span class=\"hljs-keyword\">catch</span> (error) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">reject</span>(error);\n        }\n\n        <span class=\"hljs-keyword\">const</span> { value, done } = generatorResult;\n\n        <span class=\"hljs-keyword\">if</span> (done) {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">resolve</span>(value);\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(value).<span class=\"hljs-title function_\">then</span>(\n            <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onResolve</span>(<span class=\"hljs-params\">val</span>) {\n              <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-string\">&quot;next&quot;</span>, val);\n            },\n            <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onReject</span>(<span class=\"hljs-params\">err</span>) {\n              <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-string\">&quot;throw&quot;</span>, err);\n            }\n          );\n        }\n      }\n      <span class=\"hljs-title function_\">step</span>(<span class=\"hljs-string\">&quot;next&quot;</span>);\n    });\n  };\n}\n\n<span class=\"hljs-keyword\">const</span> testGAsync = <span class=\"hljs-title function_\">asyncToGenerator</span>(testG);\n<span class=\"hljs-title function_\">testGAsync</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">result</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(result);\n});\n</code></pre>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN-Promise</a></p>\n<p><a href=\"https://github.com/imtaotao/co-share\">co-share</a></p>\n"}},"__N_SSG":true}