{"pageProps":{"post":{"title":"React.js复习-v17新特性","tags":["React.js","React17"],"categories":"2021复习","description":"## 全新的jsx转换\n\nv17之前使用`jsx`需要导入`React`。这是因为v17之前需要使用`React.createElement`来编译`jsx`。\nv17之后自动从`React`的`package`中引入新的入口函数并调用\n\n## 事件委托的变更\n\nv17不再将事件添加到`document`上，而是添加到渲染`React`的根容器中\n\n当开发者需要在`document`上添加自定","createDate":"2021-05-29 14:47:45","updateDate":"2021-07-01 13:43:20","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">全新的jsx转换</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>v17之前使用<code>jsx</code>需要导入<code>React</code>。这是因为v17之前需要使用<code>React.createElement</code>来编译<code>jsx</code>。\nv17之后自动从<code>React</code>的<code>package</code>中引入新的入口函数并调用</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">事件委托的变更</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>v17不再将事件添加到<code>document</code>上，而是添加到渲染<code>React</code>的根容器中</p>\n<p>当开发者需要在<code>document</code>上添加自定义事件时会发生意想不到的bug</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [showModal, setShowModal] = <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-literal\">false</span>);\n  <span class=\"hljs-title class_\">React</span>.<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">closeModal</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-title function_\">setShowModal</span>(<span class=\"hljs-literal\">false</span>);\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, closeModal);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, closeModal);\n    }\n  })\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;parent&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{(e)</span> =&gt;</span> {\n        setShowModal(true);\n        // e.stopPropagation();\n        e.nativeEvent.stopImmediatePropagation();\n      }}&gt;showModal<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      {\n        showModal &amp;&amp; (\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;modal&quot;</span>&gt;</span>i am a modal<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n        )\n      }\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};\n\n<span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#app&#x27;</span>));\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">去除事件池</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>v17之前，如果想要用异步的方式使用事件对象<code>e</code>，则必须先调用<code>e.persist()</code>才可以，这是因为<code>React</code>在旧浏览器中重用了不同事件的事件对象以提高性能，并将所有事件字段在它们之前设置为<code>null</code></p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Name</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n    \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onChange</span> = (<span class=\"hljs-params\">e</span>) =&gt; {\n        e.<span class=\"hljs-title function_\">persist</span>();\n        <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">() =&gt;</span> e.<span class=\"hljs-property\">target</span>.<span class=\"hljs-property\">value</span>);\n    }\n    \n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{name}</span> <span class=\"hljs-attr\">onInput</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span></span>\n    )\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">副作用清理时间</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>v17之前，<code>useEffect</code>、<code>useLayoutEffect</code>的清理函数都是同步运行的，对于大型程序来讲，这并不是理想选择，因为同步操作会影响页面的显示。v17之后，<code>useEffect</code>的清理函数将变为异步运行，<code>useLayoutEffect</code>的清理函数仍保持同步运行</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> instance = someRef.<span class=\"hljs-property\">current</span>;\n    instance.<span class=\"hljs-title function_\">someSetupMethod</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n        instance.<span class=\"hljs-title function_\">someCleanupMethod</span>();\n    }\n})\n</code></pre>\n"}},"__N_SSG":true}