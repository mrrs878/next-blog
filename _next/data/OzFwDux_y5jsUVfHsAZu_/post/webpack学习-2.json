{"pageProps":{"post":{"title":"webpack学习-2","tags":["webpack优化"],"categories":"webpack","description":"# 优化\n\n## 提取公共的js文件-splitChunks.cacheGroups.commons\n\n```js\nconst path = require(\"path\")\n\nmodule.exports = {\n    entry: \"./src/app.js\",\n    output: {\n        path: path.resolve(__dirname, \"dist\"),","createDate":"2020-04-14 23:04:37","updateDate":"2021-01-19 09:48:05","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">优化</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">提取公共的js文件-splitChunks.cacheGroups.commons</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n    <span class=\"hljs-attr\">output</span>: {\n        <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">filname</span>: <span class=\"hljs-string\">&quot;bundle.[hash:6].js&quot;</span>\n    },\n    <span class=\"hljs-attr\">optimization</span>: {\n        <span class=\"hljs-attr\">splitChunks</span>: {\n            <span class=\"hljs-attr\">cacheGroups</span>: {\n                <span class=\"hljs-attr\">commons</span>: {\n                    <span class=\"hljs-attr\">chunks</span>: <span class=\"hljs-string\">&quot;initial&quot;</span>,\n                    <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-number\">2</span>,\n                    <span class=\"hljs-attr\">maxInitialRequests</span>: <span class=\"hljs-number\">5</span>,\n                    <span class=\"hljs-attr\">minSize</span>: <span class=\"hljs-number\">2</span>,\n                    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;common.[hash:6]&quot;</span>\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">压缩图片-image-webpack-loader</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://www.webpackjs.com/loaders/url-loader/\">url-loader</a>来处理图片文件解析，可以再使用 <a href=\"https://github.com/tcoopman/image-webpack-loader\">image-webpack-loader</a>来压缩图片</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">enter</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n    <span class=\"hljs-attr\">output</span>: {\n        <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle.[hash:6].js&quot;</span>\n    },\n    <span class=\"hljs-attr\">modules</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.*\\.(gif|png|jpe?g|svg|webp)$/i</span>,\n                <span class=\"hljs-attr\">use</span>: [\n                    {\n                        <span class=\"hljs-attr\">laoder</span>: <span class=\"hljs-string\">&quot;url-loader&quot;</span>,\n                        <span class=\"hljs-attr\">options</span>: {\n                            <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">8192</span>\n                        }\n                    }\n                    {\n                        <span class=\"hljs-attr\">laoder</span>: <span class=\"hljs-string\">&quot;image-webpack-loader&quot;</span>,\n                        <span class=\"hljs-attr\">options</span>: {\n                            <span class=\"hljs-attr\">mozjpeg</span>: {\n                                <span class=\"hljs-attr\">progress</span>: <span class=\"hljs-literal\">true</span>,\n                                <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">65</span>\n                            },\n                            <span class=\"hljs-attr\">optipng</span>: {\n                                <span class=\"hljs-attr\">enable</span>: <span class=\"hljs-literal\">false</span>\n                            },\n                            <span class=\"hljs-attr\">pngquant</span>: {\n                                <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-string\">&#x27;65-90&#x27;</span>,\n                                <span class=\"hljs-attr\">speed</span>: <span class=\"hljs-number\">4</span>\n                            },\n                            <span class=\"hljs-attr\">gifsicle</span>: {\n                                <span class=\"hljs-attr\">interlaced</span>: <span class=\"hljs-literal\">false</span>\n                            },\n                            <span class=\"hljs-attr\">webp</span>: { <span class=\"hljs-comment\">// 开启webp会把jpg、png压缩为webp格式</span>\n                                <span class=\"hljs-attr\">quality</span>: <span class=\"hljs-number\">65</span>\n                            }\n                        }\n                    }\n                ]\n            }\n        ]\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">多线程打包-happypack</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在webpack运行在node中打包时是单线程去一件一件事情做，<a href=\"https://github.com/amireh/happypack#readme\">happypack</a>可以开启多个子进程去并发执行，子进程处理完成之后把结果交给主进程</p>\n<pre><code class=\"hljs language-js\">yarn add happypack -D\n\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HappyPack</span> = <span class=\"hljs-title function_\">reruire</span>(<span class=\"hljs-string\">&quot;happypack&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n    <span class=\"hljs-attr\">output</span>: {\n        <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">reaolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle_[hash:6].js&quot;</span>\n    },\n    <span class=\"hljs-attr\">module</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">text</span>: <span class=\"hljs-regexp\">/\\.jsx?$/</span>,\n                <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n                <span class=\"hljs-attr\">use</span>: <span class=\"hljs-string\">&quot;happypack/loader?id=babel&quot;</span>\n            }\n        ]\n    },\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HappyPack</span>({\n            <span class=\"hljs-attr\">id</span>: <span class=\"hljs-string\">&quot;babel&quot;</span>,\n            <span class=\"hljs-attr\">threads</span>: <span class=\"hljs-number\">4</span>,\n            <span class=\"hljs-attr\">loaders</span>: [<span class=\"hljs-string\">&quot;babel-loader&quot;</span>]\n        })\n    ]\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">作用域提升-ModuleConcatenationPlugin</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>如果项目里使用的是ES6的语法，并且webpack3+，那么建议启用这一插件，把所有的模块放到一个函数里：</p>\n<ul>\n<li>减少了函数声明</li>\n<li>文件体积变小</li>\n<li>函数作用域变少</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n    <span class=\"hljs-attr\">output</span>: {\n        <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;bundle_[hash:6].js&quot;</span>\n    },\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-property\">optimize</span>.<span class=\"hljs-title class_\">ModuleConcatenationPlugin</span>()\n    ]\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">提取第三方库-enter.vendor</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>方便长期缓存第三方的库，新建一个入口，将第三方库作为一个<code>chunk</code>，生成<code>vendor.js</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">entry</span>: {\n        <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n        <span class=\"hljs-attr\">vendor</span>: [<span class=\"hljs-string\">&#x27;react&#x27;</span>, <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>]\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">DLL动态链接-webpack.DllPlugin</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>如果第三方库不是经常更新，打包的时候希望分开打包来提升打包速度。打包dll需要新建一个webpack配置文件，在打包dll的时候，webpack做一个索引，现在manifest文件中。然后打包项目的时候只需要读取manifest文件</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack.vendor.js</span>\n\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>)\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">entry</span>: {\n        <span class=\"hljs-attr\">vendor</span>: [<span class=\"hljs-string\">&quot;react&quot;</span>, <span class=\"hljs-string\">&quot;react-dom&quot;</span>]\n    },\n    <span class=\"hljs-attr\">output</span>: {\n        <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">reaolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;dll/[name]_dll.js&quot;</span>,\n        <span class=\"hljs-attr\">library</span>: <span class=\"hljs-string\">&quot;_dll_[name]&quot;</span>\n    },\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">DllPlugin</span>({\n            <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist/sll&quot;</span>, <span class=\"hljs-string\">&quot;manifest.json&quot;</span>),\n            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;_dll_[name]&quot;</span>\n        })\n    ]\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack.config.js</span>\n\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">enter</span>: {\n        <span class=\"hljs-attr\">main</span>: <span class=\"hljs-string\">&quot;./src/app.js&quot;</span>,\n        <span class=\"hljs-attr\">vendor</span>: [<span class=\"hljs-string\">&quot;react&quot;</span>, <span class=\"hljs-string\">&quot;react-dom&quot;</span>]\n    },\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">DllReferencePlugin</span>({\n            <span class=\"hljs-attr\">manifest</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist/dll&quot;</span>, <span class=\"hljs-string\">&quot;manifest.json&quot;</span>)\n        })\n    ]\n}\n</code></pre>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">多环境配置</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>创建多个配置文件：</p>\n<ul>\n<li><code>webpack.base.js</code>，共同的个配置</li>\n<li><code>webpack.dev.js</code>，在开发环境下的配置</li>\n<li><code>webpack.prod.js</code>，在生产环境下的配置</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">开发环境</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>配置测试服务器相关、HMR</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack.dev.js</span>\n\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n<span class=\"hljs-keyword\">const</span> webpack = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>)\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-merge&quot;</span>)\n<span class=\"hljs-keyword\">const</span> abse = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./webpack.base.js&quot;</span>)\n\n<span class=\"hljs-keyword\">const</span> dev = {\n    <span class=\"hljs-attr\">devServer</span>: {\n        <span class=\"hljs-attr\">contentNase</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n        <span class=\"hljs-attr\">port</span>: <span class=\"hljs-number\">8080</span>,\n        <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;localhost&quot;</span>,\n        <span class=\"hljs-attr\">overlay</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">open</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">inline</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">progress</span>: <span class=\"hljs-literal\">true</span>\n    },\n    <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;inline-source-map&quot;</span>,\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">HotModuleReplacementPlugin</span>(),\n        <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">NamedModulesPlugin</span>()\n    ]\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">merge</span>(base, dev)\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">生产环境</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>生产环境最重要的是开启代码压缩、混淆</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//webpack.prod.js</span>\n\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>)\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-merge&quot;</span>)\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">WebpackParallUglifyPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack-parallel-uglify-plugin&quot;</span>)\n<span class=\"hljs-keyword\">const</span> base = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./webpack.base.js&quot;</span>)\n\n<span class=\"hljs-keyword\">const</span> prod = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">WebpackParallUglifyPlugin</span>({\n            <span class=\"hljs-attr\">uglifyJS</span>: {\n                <span class=\"hljs-attr\">mangle</span>: <span class=\"hljs-literal\">true</span>,\n                <span class=\"hljs-attr\">output</span>: {\n                    <span class=\"hljs-attr\">beautify</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-attr\">comments</span>: <span class=\"hljs-literal\">false</span>\n                },\n                <span class=\"hljs-attr\">compress</span>: {\n                    <span class=\"hljs-attr\">warnings</span>: <span class=\"hljs-literal\">false</span>,\n                    <span class=\"hljs-attr\">drop_console</span>: <span class=\"hljs-literal\">true</span>,\n                    <span class=\"hljs-attr\">collpase_vars</span>: <span class=\"hljs-literal\">true</span>,\n                    <span class=\"hljs-attr\">reduce_vars</span>: <span class=\"hljs-literal\">true</span>\n                }\n            }\n        })\n    ]\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">marge</span>(base, prod)\n</code></pre>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用环境变量</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ul>\n<li><p>安装依赖: <code>yarn add dotenv-cli -D</code></p>\n</li>\n<li><p><code>webpack.config.js</code>添加配置：</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">DefinePlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable constant_\">MODE</span> } = process.<span class=\"hljs-property\">env</span>;\n\n<span class=\"hljs-attr\">plugins</span>: [\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefinePlugin</span>({\n        <span class=\"hljs-string\">&#x27;process.env&#x27;</span>: {\n            <span class=\"hljs-attr\">MODE</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">strinfy</span>(<span class=\"hljs-variable constant_\">MODE</span>)\n        }\n    })\n]\n</code></pre>\n<ul>\n<li>根目录创建<code>.env.development</code></li>\n</ul>\n<pre><code class=\"hljs language-shell\">MODE=&#x27;development&#x27;\n</code></pre>\n<ul>\n<li>修改<code>package.json</code></li>\n</ul>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;start:dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;dotenv -e .env.development webpack-dev-server&quot;</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n"}},"__N_SSG":true}