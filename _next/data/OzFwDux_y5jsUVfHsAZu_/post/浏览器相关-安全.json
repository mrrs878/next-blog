{"pageProps":{"post":{"title":"浏览器相关-安全","tags":["安全"],"categories":"浏览器","description":"## XSS\n\nXSS(cross-site scripting)，跨站脚本攻击（缩写和CSS重叠，所以称之为XSS）。XSS指的是通过存在安全漏洞的web网站注册用户的**浏览器**内**自动运行非法的HTML标签或JavaScript**进行的一种攻击\n\n如果 Web 应用程序没有部署足够的安全验证，那么，这些攻击很容易成功。浏览器无法探测到这些恶意脚本是不可信的，所以，这些脚本可以任意读","createDate":"2020-04-08 23:15:51","updateDate":"2021-05-16 22:46:58","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">XSS</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>XSS(cross-site scripting)，跨站脚本攻击（缩写和CSS重叠，所以称之为XSS）。XSS指的是通过存在安全漏洞的web网站注册用户的<strong>浏览器</strong>内<strong>自动运行非法的HTML标签或JavaScript</strong>进行的一种攻击</p>\n<p>如果 Web 应用程序没有部署足够的安全验证，那么，这些攻击很容易成功。浏览器无法探测到这些恶意脚本是不可信的，所以，这些脚本可以任意读取 cookie，session tokens，或者其它敏感的网站信息，或者让恶意脚本重写<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/HTML\">HTML</a>内容。</p>\n<p>XSS可能会造成以下影响：</p>\n<ul>\n<li>利用虚假表单骗取用户个人信息</li>\n<li>利用脚本窃取用户的cookie值，被害者在不知情的情况下帮助攻击者发送恶意请求</li>\n<li>显示伪造的文章或图片</li>\n</ul>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">存储型XSS</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>注入型脚本永久<strong>存储在目标服务器上</strong>。当浏览器请求数据时，脚本从服务器上传回并执行。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">反射性XSS</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>当<strong>用户点击</strong>一个恶意链接，或者提交一个表单，或者进入一个恶意网站时，注入脚本进入被攻击者的网站。Web服务器将注入脚本，比如一个错误信息，搜索结果等 返回到用户的浏览器上。由于浏览器认为这个响应来自&quot;可信任&quot;的服务器，所以会执行这段脚本。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何防御</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li><p>CSP</p>\n<p>建立白名单，明确告诉浏览器那些外部资源可以进行加载和执行。</p>\n<ol>\n<li><p>设置<code>HTTP Header</code>中的<code>Content-Security-Policy</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- 只允许加载本站资源 --&gt;</span>\nContent-Security-Policy: default-src &#x27;self&#x27;\n\n<span class=\"hljs-comment\">&lt;!-- 只允许加载HTTPS图片 --&gt;</span>\nContent-Security-Policy: img-src https://*\n</code></pre>\n</li>\n<li><p>设置<code>meta</code>标签</p>\n</li>\n</ol>\n</li>\n<li><p>转义字符</p>\n<p>对引号、尖括号、斜杠进行转义</p>\n</li>\n<li><p>httponly cookie</p>\n<p>这是预防XSS攻击窃取用户cookie最有效的防御手段。Web应用程序在设置cookie时，将其属性设为HttpOnly，就可以避免该网页的cookie被客户端恶意JavaScript窃取，保护用户cookie信息</p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">CSRF</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>CSRF(Cross Site Request Forgery)，即跨站请求伪造，是一种常见的Web攻击，它利用用户已登录的身份，在用户毫不知情的情况下，以用户的名义完成非法操作。</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/csrf.png\" alt=\"CSRF原理\"></p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何防御</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>防范 CSRF 攻击可以遵循以下几种规则：</p>\n<ul>\n<li>Get 请求不对数据进行修改</li>\n<li>不让第三方网站访问到用户 Cookie</li>\n<li>阻止第三方网站请求接口</li>\n<li>请求时附带验证信息，比如验证码或者 Token</li>\n</ul>\n<ol>\n<li><p>samesite</p>\n<p>可以对 Cookie 设置 SameSite 属性。该属性表示 <strong>Cookie 不随着跨域请求发送</strong>，可以很大程度减少 CSRF 的攻击，但是该属性目前并不是所有浏览器都兼容。</p>\n</li>\n<li><p>referer check</p>\n<p>HTTP Referer是header的一部分，当浏览器向web服务器发送请求时，一般会带上Referer信息告诉服务器是从哪个页面链接过来的，服务器籍此可以获得一些信息用于处理。可以通过检查请求的来源来防御CSRF攻击。正常请求的referer具有一定规律，如在提交表单的referer必定是在该页面发起的请求。所以<strong>通过检查http包头referer的值是不是这个页面，来判断是不是CSRF攻击</strong>。</p>\n<p>但在某些情况下如从https跳转到http，浏览器处于安全考虑，不会发送referer，服务器就无法进行check了。若与该网站同域的其他网站有XSS漏洞，那么攻击者可以在其他网站注入恶意脚本，受害者进入了此类同域的网址，也会遭受攻击。出于以上原因，无法完全依赖Referer Check作为防御CSRF的主要手段。但是可以通过Referer Check来监控CSRF攻击的发生。</p>\n</li>\n<li><p>anti CSRF token</p>\n<p>目前比较完善的解决方案是加入Anti-CSRF-Token。即发送请求时在HTTP 请求中以参数的形式加入一个随机产生的token，并在服务器建立一个拦截器来验证这个token。服务器读取浏览器当前域cookie中这个token值，会进行校验该请求当中的token和cookie当中的token值是否都存在且相等，才认为这是合法的请求。否则认为这次请求是违法的，拒绝该次服务。</p>\n<p><strong>这种方法相比Referer检查要安全很多</strong>，token可以在用户登陆后产生并放于session或cookie中，然后在每次请求时服务器把token从session或cookie中拿出，与本次请求中的token 进行比对。由于token的存在，攻击者无法再构造出一个完整的URL实施CSRF攻击。但在处理多个页面共存问题时，当某个页面消耗掉token后，其他页面的表单保存的还是被消耗掉的那个token，其他页面的表单提交时会出现token错误。</p>\n</li>\n<li><p>验证码</p>\n<p>在关键业务点设置验证码</p>\n</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">点击劫持</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 <strong>iframe</strong> 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面中透出一个按钮诱导用户点击。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何防御</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li><p>X-FRAME-OPTIONS</p>\n<p><code>X-FRAME-OPTIONS</code>是一个 HTTP 响应头，三个值可选，分别是</p>\n<ul>\n<li>DENY，表示页面不允许通过 iframe 的方式展示</li>\n<li>SAMEORIGIN，表示页面可以在相同域名下通过 iframe 的方式展示</li>\n<li>ALLOW-FROM，表示页面可以在指定来源的 iframe 中展示</li>\n</ul>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">URL跳转漏洞</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">SQL注入</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>SQL注入攻击指的是通过构建特殊的输入作为参数传入Web应用程序，而这些输入大都是SQL语法里的一些组合，通过执行SQL语句进而执行攻击者所要的操作，其主要原因是程序没有细致地过滤用户输入的数据，致使非法数据侵入系统。</p>\n<p>SQL注入必备条件：</p>\n<ol>\n<li>可以控制输入的数据</li>\n<li>服务器要执行的代码拼接了控制的数据</li>\n</ol>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何防御</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li><p><strong>严格限制Web应用的数据库的操作权限</strong>，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</p>\n</li>\n<li><p><strong>后端代码检查输入的数据是否符合预期</strong>，严格限制变量的类型，例如使用正则表达式进行一些匹配处理。</p>\n</li>\n<li><p><strong>对进入数据库的特殊字符（&#39;，&quot;，\\，&lt;，&gt;，&amp;，*，; 等）进行转义处理，或编码转换</strong>。基本上所有的后端语言都有对字符串进行转义处理的方法，比如 lodash 的 lodash._escapehtmlchar 库。</p>\n</li>\n<li><p><strong>所有的查询语句建议使用数据库提供的参数化查询接口</strong>，参数化的语句使用参数而不是将用户输入变量嵌入到 SQL 语句中，即不要直接拼接 SQL 语句。例如 Node.js 中的 mysqljs 库的 query 方法中的 ? 占位参数。</p>\n</li>\n</ul>\n"}},"__N_SSG":true}