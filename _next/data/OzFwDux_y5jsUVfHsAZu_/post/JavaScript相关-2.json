{"pageProps":{"post":{"title":"JavaScript相关-2","tags":["Javascript","基础"],"categories":"JavaScript","description":"## Promise\n\n**WHAT**\n\n**Promise** 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.\n\n异步编程的一种解决方案\n\n`Promise`可能处于以下三个状态之一：`fulfilled`、`rejected`、`pending`。用户可以对`Promise`添加回调函数来处理操作成功的结果或失败的原因\n\n**WHY**\n\n传统的异步编程缺点难以忍受:","createDate":"2020-02-12 22:53:13","updateDate":"2021-05-13 17:47:54","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Promise</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>WHAT</strong></p>\n<p><strong>Promise</strong> 对象用于表示一个异步操作的最终完成 (或失败), 及其结果值.</p>\n<p>异步编程的一种解决方案</p>\n<p><code>Promise</code>可能处于以下三个状态之一：<code>fulfilled</code>、<code>rejected</code>、<code>pending</code>。用户可以对<code>Promise</code>添加回调函数来处理操作成功的结果或失败的原因</p>\n<p><strong>WHY</strong></p>\n<p>传统的异步编程缺点难以忍受:</p>\n<ul>\n<li>代码臃肿</li>\n<li>可读性差</li>\n<li>耦合度过高，可维护性差</li>\n<li>代码复用性差</li>\n<li>只能在回调里处理异常</li>\n</ul>\n<pre><code class=\"hljs language-javascript\">请求<span class=\"hljs-number\">1</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">1</span></span>){\n    请求<span class=\"hljs-number\">2</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">2</span></span>){\n        请求<span class=\"hljs-number\">3</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">3</span></span>){\n            请求<span class=\"hljs-number\">4</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">4</span></span>){\n                请求<span class=\"hljs-number\">5</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">5</span></span>){\n                    请求<span class=\"hljs-number\">6</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">请求结果<span class=\"hljs-number\">6</span></span>){\n                        ...\n                    })\n                })\n            })\n        })\n    })\n})\n\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(请求<span class=\"hljs-number\">1</span>)\n    .<span class=\"hljs-title function_\">then</span>(请求<span class=\"hljs-number\">2</span>(请求结果<span class=\"hljs-number\">1</span>))\n    .<span class=\"hljs-title function_\">then</span>(请求<span class=\"hljs-number\">3</span>(请求结果<span class=\"hljs-number\">2</span>))\n    .<span class=\"hljs-title function_\">then</span>(请求<span class=\"hljs-number\">4</span>(请求结果<span class=\"hljs-number\">3</span>))\n    .<span class=\"hljs-title function_\">then</span>(请求<span class=\"hljs-number\">5</span>(请求结果<span class=\"hljs-number\">4</span>))\n    .<span class=\"hljs-title function_\">catch</span>(处理异常(异常信息))\n</code></pre>\n<p><strong>HOW</strong></p>\n<p>常用API：</p>\n<ul>\n<li><p><code>Promise.resolve(value)</code></p>\n<p>返回一个状态由给定的<code>value</code>决定的<code>Promise</code>对象。如果该值时<code>theable</code>（即带有then方法的对象），返回的<code>Promise</code>对象的最终状态是由<code>then</code>方法决定；否则（该<code>value</code>为空、基本类型或不带<code>then</code>方法的对象）返回的<code>Promise</code>对象状态为<code>fulfilled</code>，并且将该<code>value    </code>传递给对应的<code>then</code>方法。通常，如果不知道一个值是否是<code>Promise</code>对象，可以使用<code>Promsie.resolve(value)</code>来返回一个<code>Promise</code>对象，这样就能将该<code>value</code>以<code>Promise</code>对象形式使用</p>\n</li>\n<li><p><code>Promise.reject(value)</code></p>\n<p>返回一个状态为失败的<code>Promise</code>对象，并将给定的失败信息传递给对应的出处理方法</p>\n</li>\n<li><p><code>Promise.race(interable)</code></p>\n<p>当<code>interable</code>参数里的任意一个子<code>promise</code>被执行失败或成功后，父<code>promise</code>马上也会用子<code>promise</code>的成功返回值或失败详情作为参数调用父<code>promsie</code>绑定的相应句柄并返回该<code>promsie</code>对象</p>\n</li>\n<li><p><code>Promise.all(interable)</code></p>\n<p>这个方法返回的是一个新的<code>promise</code>对象，该<code>promise</code>对象在<code>interable</code>参数对象里所有的<code>promise</code>对象都成功的时候才会触发成功，一旦有任何一个<code>interable</code>里的<code>promise</code>对象失败则立即触发该<code>promise</code>对象的失败。这个新的<code>promise</code>对象在触发成功状态以后，会把一个包含<code>interable</code>里所有<code>promise</code>返回值的数组作为成功回调的返回值，顺序跟<code>interable</code>的顺序保持一致；如果这个新的<code>promise</code>对象出发了失败状态，它会把<code>interable</code>里第一个触发失败的<code>promise</code>对象的错误信息作为它的失败错误信息。<code>Promise.all</code>方法常用于处理多个<code>promise</code>对象的状态集合</p>\n</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;fs&quot;</span>)\n\nfs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&quot;./index.html&quot;</span>, { <span class=\"hljs-attr\">encoding</span>: <span class=\"hljs-string\">&quot;utf8&quot;</span> }, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(err, data);\n})\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_readFile</span>(<span class=\"hljs-params\">path, options</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    fs.<span class=\"hljs-title function_\">readFile</span>(<span class=\"hljs-string\">&quot;./index.html&quot;</span>, options, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, data</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span>(err)\n        <span class=\"hljs-title function_\">reject</span>(err)\n      <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-title function_\">resolve</span>(data)\n    })\n  })\n}\n\n(<span class=\"hljs-keyword\">async</span> () =&gt; {\n  <span class=\"hljs-keyword\">try</span> {\n    <span class=\"hljs-keyword\">const</span> data = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">_readFile</span>(<span class=\"hljs-string\">&quot;./index.html&quot;</span>, <span class=\"hljs-string\">&quot;utf8&quot;</span>)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n  } <span class=\"hljs-keyword\">catch</span> (error) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(error);\n  }\n})()\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">遍历对象的属性和数组元素的方法</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>对象：</p>\n<ul>\n<li><p><code>for</code>循环 👎</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> property <span class=\"hljs-keyword\">in</span> obj)\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(property)\n</code></pre>\n<p>缺点：会遍历到它的继承属性，在使用之前需要加入<code>obj.hasOwnProperty(property)</code></p>\n</li>\n<li><p><code>Object.keys(obj).forEach()</code> 👍</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(obj).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">property</span> =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(property)\n})\n</code></pre>\n<p><code>Object.keys</code>返回一个有给定对象的自身可枚举属性组成的数组</p>\n</li>\n<li><p><code>Object.getOwnPropertyNames(obj).forEach</code> 👍</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">getOwnPropertyNames</span>(obj).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">property</span> =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(property)\n})\n</code></pre>\n<p><code>Object.getOwnPropertyNames</code>返回一个由指定对象的所有自身属性的属性名（包括不可枚举属性但不包括<code>Symbol</code>值作为名称的属性）组成的数组</p>\n</li>\n<li><p><code>Reflect.ownKeys(target)</code> 👍</p>\n<p>基本等同于<code>Object.getOwnPeopertyNames</code> + <code>Object.getOwnPropertySymbols</code></p>\n</li>\n</ul>\n<p>数组：<strong>各取所需</strong></p>\n<ul>\n<li><p><code>for</code>循环</p>\n<p>普通遍历方法，较常用</p>\n</li>\n<li><p><code>arr.forEach</code></p>\n<p>相较于<code>for</code>，<code>forEach</code>不可提前结束循环</p>\n</li>\n<li><p><code>arr.map/reduce</code></p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">可变对象和不可变对象</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>可变对象</strong>在创建之后是可以被改变的</p>\n<p><strong>不可变对象</strong>在创建之后是不可以被改变的</p>\n<ol>\n<li>在<code>JavaScript</code>中，<code>string</code>和<code>number</code>从设计之初就是不可变的（immediate）</li>\n<li>不可变对象是保持一个对象状态不变，这样的好处是是的开发更加简单、可回溯、测试友好，减少了任何可能的副作用。但是，每当想添加点东西到一个不可变对象里时，它一定是先拷贝已存在的值到新实例里，然后再给新实例添加内容，最后返回新实例。相比可变对象，这势必会有更多内存、计算量消耗</li>\n</ol>\n<p>创建一个纯函数（pure function）</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> student = {\n    <span class=\"hljs-attr\">school</span>: <span class=\"hljs-string\">&quot;baidu&quot;</span>,\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tom&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span>\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">updateStudent</span>(<span class=\"hljs-params\">student, name, age</span>) {\n    <span class=\"hljs-keyword\">return</span> {\n        ...student,\n        name,\n        age\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">同步函数和异步函数</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>同步函数阻塞，异步函数不阻塞。在同步函数中，语句完成后下一句才执行，在这种情况下，程序可以按照语句的顺序进行精确评估，如果其中一个语句需要很长时间，那么程序的执行会停滞很长时间</p>\n<p>异步函数通常接受回调作为参数，在调用异步函数后立即继续执行下一行。回调函数仅在异步操作完成且调用堆栈为空时调用，诸如从web服务器加载数据或查询数据库等重负载操作应该异步完成，以便主线程可以继续执行其他操作而不会出现一直阻塞</p>\n<p>在JavaScript中异步函数的解决方案通常有callback、Promise、async/await</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">JavaScript执行机制</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p><strong>JavaScript的执行与运行</strong></p>\n<p>执行和与运行不太相同，在不同环境下，比如Node、浏览器下，JavaScript的执行结果是不一样的；而运行大多是指基于JavaScript引擎，如V8，结果是一致的 </p>\n</li>\n<li><p><strong>关于JavaScript</strong></p>\n<p>众所周知，JavaScript是一门<strong>单线程</strong>、<strong>异步执行</strong>的语言，虽然在HTML5中提出了<strong>web workers</strong>（可以理解为<strong>浏览器</strong>为JavaScript开的“外挂”），但JavaScript是单线程运行的这一核心仍未改变，所有多线程都是通过单线程<strong>模拟</strong>出来的</p>\n</li>\n<li><p><strong>JavaScript中的异步</strong> <strong>event-loop</strong></p>\n<p>JavaScript中的异步主要通过<strong>event loop</strong>进行模拟当我们执行JavaScript代码的时候其实就是往执行栈中放入函数，那么遇到异步代码怎么办？其实当遇到异步代码时，会被挂起并在需要执行的时候加入到<strong>Task</strong>（有多种Task）队列中。一旦执行栈为空，<strong>event loop</strong>就会从<strong>Task</strong>中拿出需要执行的代码并放入执行栈中执行，所以本质上说JavaScript中的异步还是同步行为</p>\n</li>\n<li><p><strong>浏览器中的event loop</strong></p>\n<p>来自不同的<strong>任务源</strong>的任务会被分配到不同的Task队列中，任务源可以分为<strong>微任务（micro task）</strong>和<strong>宏任务（macro task）</strong>。在ES6规范中，微任务被称为jobs，宏任务被称为task</p>\n<p>微任务包括：<code>precess.nextTick</code>、<code>promise</code>、<code>Mutation Observer</code></p>\n<p>宏任务包括：<code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>setImmediate</code>、<code>I/O</code>、UI Rendering</p>\n<p><strong>宏任务中包含了<code>script</code>，因此浏览器会先执行一个宏任务，接下来由异步代码的话才会先执行微任务</strong></p>\n<p><strong>event loop执行顺序</strong>：</p>\n<ol>\n<li>先执行同步代码，这属于宏任务</li>\n<li>当<strong>执行完所有同步代码</strong>后执行栈为空，查询是否有异步代码需要执行</li>\n<li><strong>执行所有微任务</strong></li>\n<li>当执行完所有微任务，如有必要会渲染页面</li>\n<li>然后开始下一轮<code>event loop</code>，执行宏任务中的异步代码也就是<code>setTimeout</code>（宏任务）中的回调函数</li>\n</ol>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/browser_event_loop.png\" alt=\"浏览器中的event loop\"></p>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/browser_event_loop2.png\" alt=\"浏览器中的event loop\"></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">3</span>);\n  });\n});\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">4</span>);\n  <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">5</span>);\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n});\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">6</span>);\n});\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">7</span>);\n\n<span class=\"hljs-comment\">// 1 4 7 5 2 3 6</span>\n</code></pre>\n</li>\n<li><p><strong>Node.js中的event loop</strong></p>\n<p>Node.js中的<code>event loop</code>分为6个阶段，他们会按照顺序反复运行。每当进入某一个阶段的时候都会从对应的回调队列中取出函数去执行。当<strong>队列为空</strong>或者<strong>执行的回调函数数量到达系统设定的阈值</strong>，就会进入下一阶段</p>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/node_event_loop.png\" alt=\"Node.js中的event loop\"></p>\n<ol>\n<li><p><strong>timers</strong></p>\n<p><strong>timers</strong>阶段会执行<code>setTimeout</code>和<code>setinterval</code>回调，并且是由<strong>poll</strong>阶段控制的。同样在<code>Node.js</code>中定时器指定的事件也不是准确时间，只是尽快执行</p>\n</li>\n<li><p><strong>I/O</strong></p>\n<p><strong>I/O</strong>阶段会处理一些上一轮循环中少许未执行的<strong>I/O</strong>回调</p>\n</li>\n<li><p><strong>idle,prepare</strong></p>\n</li>\n<li><p><strong>poll</strong></p>\n<p><strong>poll</strong>是一个至关重要的阶段，在这一阶段中，系统会做两件事情</p>\n<ol>\n<li><p>回到<strong>timer</strong>阶段执行回调</p>\n</li>\n<li><p>执行<strong>I/O</strong>回调，并且在进入该阶段时如果没有设定了<strong>timer</strong>的话，会发生以下两件事情</p>\n</li>\n</ol>\n<ul>\n<li>如果<strong>poll</strong>队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li>\n<li>如果<strong>poll</strong>队列为空<ul>\n<li>如果有<code>setImmediate</code>回调需要执行，<strong>poll</strong>阶段会停止并且<strong>进入到check阶段</strong>执行回调</li>\n<li>如果没有，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间防止一直等待下去</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>check</strong></p>\n<p>执行<code>setImmediate</code></p>\n</li>\n<li><p><strong>close callbacks</strong></p>\n<p>执行close事件</p>\n</li>\n</ol>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/node_event_loop2.png\" alt=\"Node.js中的event loop\"></p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">ES6的类和ES6的构造函数的区别</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在普通使用中没有区别：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Person</span>(<span class=\"hljs-params\">name</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Person</span> {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">name</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span> = name\n    }\n}\n</code></pre>\n<p>主要区别在于类继承上：</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Student</span>(<span class=\"hljs-params\">name, id</span>) {\n    <span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">this</span>, name)\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">id</span> = id\n}\n<span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">create</span>(<span class=\"hljs-title class_\">Person</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>)\n<span class=\"hljs-title class_\">Student</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">constructor</span> = <span class=\"hljs-title class_\">Student</span>\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Student</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Person</span> {\n    <span class=\"hljs-title function_\">consreuctor</span>(<span class=\"hljs-params\">name, id</span>) {\n        <span class=\"hljs-variable language_\">super</span>(name)\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">id</span> = id\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">扩展运算符和剩余参数语句的区别</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在函数泛型编码时，ES6的扩展运算符非常有用吗，因为我们可以轻松创建数组和对象的拷贝，而无需使用<code>Object.create</code>、<code>slice</code>或其他函数库。</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">arr</span>) {\n    <span class=\"hljs-keyword\">return</span> [ ...arr, <span class=\"hljs-string\">&quot;test&quot;</span> ]\n}\n\n<span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-title function_\">test</span>([<span class=\"hljs-string\">&quot;hello&quot;</span>, <span class=\"hljs-string\">&quot;world&quot;</span>])\n<span class=\"hljs-comment\">// [&quot;hello&quot;, &quot;world&quot;, &quot;test&quot;]</span>\n\n<span class=\"hljs-keyword\">const</span> person = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tom&quot;</span>,\n    <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">21</span>\n}\n<span class=\"hljs-keyword\">const</span> copyPerson = { ...person }\n</code></pre>\n<p>ES6的剩余参数语句提供了一个简写，允许我们将不定数量的参数表示为一个<strong>数组</strong>，它就像扩展运算符语法的反面，将数据收集到数组中而不是解构数组。剩余参数语句在函数参数、数组和对象的解构赋值中有很大作用</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-params\">...numbers</span>) {\n    <span class=\"hljs-keyword\">return</span> numbers.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x + <span class=\"hljs-number\">5</span>)\n}\n\n<span class=\"hljs-keyword\">const</span> result1 = <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>)\n<span class=\"hljs-comment\">// [6, 7, 8, 9]</span>\n<span class=\"hljs-keyword\">const</span> result2 = <span class=\"hljs-title function_\">test</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">8</span>, <span class=\"hljs-number\">9</span>)\n<span class=\"hljs-comment\">// [10, 11, 12, 13, 14]</span>\n\n<span class=\"hljs-keyword\">const</span> [ a, b, ...rest ] = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>]\n<span class=\"hljs-comment\">// 1 2 [ 3, 4 ]</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">内置类型</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>JavaScript中分为<strong>七种</strong>内置类型，其中内置类型又分为两大类型：<strong>基本类型</strong>和<strong>引用类型</strong>（对象 Object）</p>\n<p>基本类型：<code>null</code>、<code>undefined</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>symbol</code></p>\n<p>其中JavaScript的数字类型是浮点类型的，没有整形。并且浮点类型基于 IEEE 754 标准实现，在使用中会遇到某些 <a href=\"#2\">Bug </a><code>NaN</code>也属于<code>number</code>类型并且<code>NaN</code>并不等于自身</p>\n<p>对于基本类型来说，如果使用字面量的方式，那个这个变量只是个字面量，只有在必要的时候才会转换成对应的类型</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">111</span> <span class=\"hljs-comment\">// 这只是字面量，不是number类型</span>\na.<span class=\"hljs-title function_\">toString</span>() <span class=\"hljs-comment\">// 使用的时候才会转换为对象类型</span>\n</code></pre>\n<p>引用类型在使用过程中会遇到深拷贝和浅拷贝问题</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Typeof</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>typeof</code>对于基本类型，除了<code>null</code>都可以显示正确的类型</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-number\">1</span> <span class=\"hljs-comment\">// number</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-string\">&#x27;1&#x27;</span> <span class=\"hljs-comment\">// string</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">undefined</span> <span class=\"hljs-comment\">// undefined</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">true</span> <span class=\"hljs-comment\">// boolean</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Symbol</span>() <span class=\"hljs-comment\">// symbol</span>\n</code></pre>\n<p><code>typeof</code>对于对象，除了函数都会显示<code>object</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">typeof</span> [] <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-keyword\">typeof</span> {} <span class=\"hljs-comment\">// object</span>\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-property\">log</span> <span class=\"hljs-comment\">// function</span>\n\n<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-literal\">null</span> <span class=\"hljs-comment\">// object</span>\n</code></pre>\n<p>关于为什么<code>typeof null == object</code>：在JavaScript的最初版本中，使用的是32为系统，为了性能考虑使用低位存储了变量的类型信息。<code>000</code>开头的代表是对象，然而<code>null</code>表示为全零，所以将它错误的判断为<code>object</code></p>\n<p>如果想得到一个正确的数据类型，使用<code>Object.prototype.toString.call(xxx)</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">toString</span>.<span class=\"hljs-title function_\">call</span>([<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>])\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">instanceof</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>instance</code>可以正确的判断对象的类型，因为内部机制是通过判断对象的原型链中是不是能正确的找到类型的<code>prototype</code></p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">instanceof</span>(<span class=\"hljs-params\">left, right</span>) {\n    <span class=\"hljs-keyword\">let</span> prototype = right.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>\n    left = left.<span class=\"hljs-property\">__proto__</span>\n    <span class=\"hljs-keyword\">while</span>(<span class=\"hljs-literal\">true</span>) {\n        <span class=\"hljs-keyword\">if</span> (left === <span class=\"hljs-literal\">null</span>)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>\n        <span class=\"hljs-keyword\">if</span> (prototypr === left)\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>\n        left = left.<span class=\"hljs-property\">__proto__</span>\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">new</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在调用<code>new</code>的过程中会发生以下四件事情</p>\n<ol>\n<li>新生成了一个对象</li>\n<li>绑定到原型</li>\n<li>绑定<code>this</code></li>\n<li>返回新对象</li>\n</ol>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">create</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> obj = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Object</span>()\n    <span class=\"hljs-keyword\">let</span> <span class=\"hljs-title class_\">Con</span> = [].<span class=\"hljs-property\">shift</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>)\n    obj.<span class=\"hljs-property\">__proto__</span> = <span class=\"hljs-title class_\">Con</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>\n    <span class=\"hljs-keyword\">let</span> result = <span class=\"hljs-title class_\">Con</span>.<span class=\"hljs-title function_\">apply</span>(obj, <span class=\"hljs-variable language_\">arguments</span>)\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">typeof</span> result === <span class=\"hljs-string\">&#x27;object&#x27;</span> ? result : obj\n}\n</code></pre>\n"}},"__N_SSG":true}