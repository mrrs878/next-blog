{"pageProps":{"post":{"title":"React.js学习-useEffect vs useLayoutEffect","tags":["React.js学习","useEffect","useLayoutEffect"],"categories":"React.js","description":"大部分情况下不需要明确区分 `useEffect` 和 `useLayoutEffect`\n\n（至少我还没遇到过 😂，不过有必要了解一下，没准哪天就遇到了）\n\n两者唯一的区别在于执行时机的不同\n\n## useEffect\n\n一般看来，对于 `useEffect` ，为了防止浏览器渲染卡顿，其回调函数会在浏览器 `paint` 之后执行，这看起来很正常，下面是一个正常的组件渲染流程：\n\n1. 做","createDate":"2022-05-10 21:49:31","updateDate":"2022-05-16 22:23:14","body":"<p>大部分情况下不需要明确区分 <code>useEffect</code> 和 <code>useLayoutEffect</code></p>\n<p>（至少我还没遇到过 😂，不过有必要了解一下，没准哪天就遇到了）</p>\n<p>两者唯一的区别在于执行时机的不同</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">useEffect</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>一般看来，对于 <code>useEffect</code> ，为了防止浏览器渲染卡顿，其回调函数会在浏览器 <code>paint</code> 之后执行，这看起来很正常，下面是一个正常的组件渲染流程：</p>\n<ol>\n<li><p>做一些准备工作（渲染 <code>VDOM</code> 、调度 <code>effects</code> 等）</p>\n</li>\n<li><p>React 将控制权交由浏览器以 <code>paint</code></p>\n</li>\n<li><p>执行 <code>useEffect</code> 回调</p>\n</li>\n</ol>\n<p>确实，大部分情况下是这样，只不过凡事都有例外，且看官网的描述:</p>\n<blockquote>\n<p>虽然 <code>useEffect</code> 会在浏览器绘制后延迟执行，但会保证在任何新的渲染前执行。在开始新的更新前，React 总会先清除上一轮渲染的 <code>effect</code> 。</p>\n</blockquote>\n<p>官网的介绍<strong>会保证在任何新的渲染前执行</strong>，并没有说一定会在浏览器 <code>paint</code> 之后执行，因此是不是有一些场景 <code>effect</code> 会在 <code>paint</code> 之前执行？🤔</p>\n<p>如果在 <code>useEffect</code> 的回调触发之前，React 组件又进行了一次状态更新，React 会先将之前的 Passive Effect 都处理掉。例如在 <code>useLayoutEffect</code> 中更新状态，在这种情况下，<code>useEffect</code>的回调 会在 paint 之前执行</p>\n<p><img src=\"https://blog.thoughtspile.tech/images/forced-le-flush-chart-5dc51705d5854315a6fa5e0be1464f7d.png\" alt=\"useLayoutEffect-useEffect\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">useLayoutEffect</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>和 <code>useEffect</code> 的唯一区别在于<strong>执行时机不同</strong>， <code>useLayoutEffect</code> 一定会保证回调函数会在 paint 之前执行，下面是一个正常的组件渲染流程：</p>\n<ol>\n<li><p>做一些准备工作（渲染 <code>VDOM</code> 、调度 <code>effects</code> 等）</p>\n</li>\n<li><p>执行 <code>useLayoutEffect</code> 回调</p>\n</li>\n<li><p>React 将控制权交由浏览器以 <code>paint</code></p>\n</li>\n<li><p>执行 <code>useEffect</code> 回调</p>\n</li>\n</ol>\n<p>这个区别的体现场景在于使用 useEffect 更新数据时，界面会闪烁一下</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">const</span> { useState, useEffect, useLayoutEffect } = <span class=\"hljs-title class_\">React</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(-<span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">while</span> (i &lt;= <span class=\"hljs-number\">900000000</span>) {\n      i++;\n    }\n    <span class=\"hljs-keyword\">if</span> (value === <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() * <span class=\"hljs-number\">100</span>;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;setValue&quot;</span>, tmp);\n      <span class=\"hljs-title function_\">setValue</span>(<span class=\"hljs-function\">() =&gt;</span> tmp);\n    }\n  }, [value]);\n\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;render&quot;</span>, value, <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>());\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setValue(0)}&gt;{value}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>;\n};\n</code></pre>\n<p>可以看到有一个明显的闪烁</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/useEffect-%20blink.gif\" alt=\"useEffect-blink\"></p>\n<p>改用 <code>useLayoutEffect</code> 后就不会出现这种情况了</p>\n"}},"__N_SSG":true}