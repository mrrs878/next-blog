{"pageProps":{"post":{"title":"React.js学习-单元测试-1","tags":["单元测试"],"categories":"React.js","description":"[React.js学习-单元测试-2](https://blog.mrrs.top/blog/view/612cde1686ab9f13b4b96452)\n\n## 技术选型\n\nJest + React官方测试包\n\n- `@testing-library/dom`\n- `@testing-library/jest-dom`\n- `@testing-library/react`\n- `@testi","createDate":"2020-12-08 10:06:03","updateDate":"2021-08-30 21:52:23","body":"<p><a href=\"https://blog.mrrs.top/blog/view/612cde1686ab9f13b4b96452\">React.js学习-单元测试-2</a></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">技术选型</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>Jest + React官方测试包</p>\n<ul>\n<li><code>@testing-library/dom</code></li>\n<li><code>@testing-library/jest-dom</code></li>\n<li><code>@testing-library/react</code></li>\n<li><code>@testing-library/user-event</code></li>\n<li><code>jest</code></li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Jest配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// jest.config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">testMatch</span>: [<span class=\"hljs-string\">&quot;&lt;rootDir&gt;/test/**/*.(spec|test).js?(x)&quot;</span>],\n  <span class=\"hljs-attr\">moduleFileExtensions</span>: [<span class=\"hljs-string\">&quot;js&quot;</span>, <span class=\"hljs-string\">&quot;jsx&quot;</span>],\n  <span class=\"hljs-attr\">setupFilesAfterEnv</span>: [\n    <span class=\"hljs-string\">&quot;&lt;rootDir&gt;/setupTests.js&quot;</span>,\n  ],\n  <span class=\"hljs-attr\">transform</span>: {\n    <span class=\"hljs-string\">&quot;^.+\\\\.js$&quot;</span>: <span class=\"hljs-string\">&quot;babel-jest&quot;</span>,\n  },\n};\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// setupTests.js</span>\n<span class=\"hljs-comment\">// 扩展jest matchers</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&quot;@testing-library/jest-dom&quot;</span>;\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">访问DOM</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ol>\n<li><p>使用 <strong>@testing-library/react</strong> 包里的 <code>render</code> 函数渲染组件</p>\n</li>\n<li><p>使用 <strong>@testing-library/react</strong> 包里的 <code>screen</code> 属性访问界面快照</p>\n</li>\n<li><p>使用 <code>screen.getBy/screen.findBy</code>访问元素</p>\n</li>\n</ol>\n<p><code>render</code>: 将给定组件渲染到附加到<code>document.body</code>的容器中</p>\n<p><code>screen</code>: DOM测试库导出的所有查询均接受容器作为第一个参数。 因为查询整个document.body非常普遍，所以DOM测试库还会导出一个<code>screen</code>对象，该对象具有预先绑定到document.body的每个查询（使用内部功能）。</p>\n<p><code>findBy</code>和<code>getBy</code>: <code>getBy</code>会立即返回，<code>findBy</code>会等到超时或查询到元素才返回</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> { fireEvent, render, screen } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> [value, onChange] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span></span>\n  );\n};\n<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n<span class=\"hljs-keyword\">const</span> element = screen.<span class=\"hljs-title function_\">getByPlaceholderText</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">模拟事件触发</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ol>\n<li><p>使用 <strong>@testing-library/react</strong> 包里的 <code>render</code> 函数渲染组件</p>\n</li>\n<li><p>使用 <strong>@testing-library/react</strong> 包里的 <code>fireEvent</code> 函数触发事件</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> [value, onChange] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span></span>\n    );\n};\n<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n<span class=\"hljs-keyword\">const</span> element = screen.<span class=\"hljs-title function_\">getByPlaceholderText</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n<span class=\"hljs-title function_\">expect</span>(element.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;value&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\nfireEvent.<span class=\"hljs-title function_\">input</span>(element, { <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;hello world&#x27;</span> } });\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">act</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>这函数和React自带的test-utils的act函数是同一个函数。在组件状态更新的时候（setState），组件需要被重新渲染，而这个重渲染是需要React进行调度的，因此是个异步的过程，我们可以通过使用act函数将所有会更新到组件状态的操作封装在它的callback里面来保证act函数执行完之后我们定义的组件已经完成了重新渲染。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">对比Object</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>使用<code>toEqual</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> tom = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span> }\n<span class=\"hljs-title function_\">expect</span>(tom).<span class=\"hljs-title function_\">toEqual</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span> })\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">大致规范</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;xxx&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-comment\">// 1. 测试函数是否定义</span>\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(xxx).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n  <span class=\"hljs-comment\">// 2. 测试函数是否被调用</span>\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should be called&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(xxx).<span class=\"hljs-title function_\">toBeCalled</span>();\n  });\n\n});\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">测试实例</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">测试<code>useInputValue</code>hook</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useInputValue.test.jsx</span>\n<span class=\"hljs-keyword\">import</span> { fireEvent, render, screen } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> useInputValue <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../src/react/hooks/useInputValue&#x27;</span>;\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;test useInputValue&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> [value, onChange] = <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n    <span class=\"hljs-keyword\">return</span> (\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">placeholder</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{value}</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span></span>\n    );\n  };\n  <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n  <span class=\"hljs-keyword\">const</span> element = screen.<span class=\"hljs-title function_\">getByPlaceholderText</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n  <span class=\"hljs-title function_\">expect</span>(element.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;value&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;hello&#x27;</span>);\n  fireEvent.<span class=\"hljs-title function_\">input</span>(element, { <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&#x27;hello world&#x27;</span> } });\n  <span class=\"hljs-title function_\">expect</span>(element.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;value&#x27;</span>)).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;hello world&#x27;</span>);\n});\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useInputValue.js</span>\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">ChangeEvent</span>, useCallback, useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useInputValue</span>(<span class=\"hljs-params\">initValue</span>) {\n  <span class=\"hljs-keyword\">const</span> [value, setValue] = <span class=\"hljs-title function_\">useState</span>(initValue);\n\n  <span class=\"hljs-keyword\">const</span> onChange = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">setValue</span>(e.<span class=\"hljs-property\">currentTarget</span>.<span class=\"hljs-property\">value</span>);\n  }, []);\n\n  <span class=\"hljs-keyword\">return</span> [value, onChange, setValue];\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useInputValue;\n</code></pre>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用<code>@testing-library/react-hooks</code>测试<code>hook</code></span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useCounter.js</span>\n\n<span class=\"hljs-keyword\">import</span> { useState, useCallback } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useCounter</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>)\n\n  <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">x</span>) =&gt;</span> x + <span class=\"hljs-number\">1</span>), [])\n\n  <span class=\"hljs-keyword\">return</span> { count, increment }\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> useCounter\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// useCounter.test.js</span>\n<span class=\"hljs-keyword\">import</span> { renderHook, act } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>\n<span class=\"hljs-keyword\">import</span> useCounter <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useCounter&#x27;</span>\n\n<span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should increment counter&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> { result } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useCounter</span>())\n\n  <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    result.<span class=\"hljs-property\">current</span>.<span class=\"hljs-title function_\">increment</span>()\n  })\n\n  <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>.<span class=\"hljs-property\">count</span>).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>)\n})\n</code></pre>\n"}},"__N_SSG":true}