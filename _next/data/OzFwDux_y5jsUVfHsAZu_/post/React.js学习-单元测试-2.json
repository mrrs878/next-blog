{"pageProps":{"post":{"title":"React.js学习-单元测试-2","tags":["单元测试"],"categories":"React.js","description":"[React.js学习-单元测试-1](https://blog.mrrs.top/blog/view/5fcf500be531783853b2fc5c)\n\n[示例代码仓库](https://codesandbox.io/s/beautiful-mcclintock-8iqp8)\n\nReact.js + Typescript + Jest + @testing-library\n\n## 安装和配","createDate":"2021-08-30 13:33:10","updateDate":"2021-09-01 22:01:37","body":"<p><a href=\"https://blog.mrrs.top/blog/view/5fcf500be531783853b2fc5c\">React.js学习-单元测试-1</a></p>\n<p><a href=\"https://codesandbox.io/s/beautiful-mcclintock-8iqp8\">示例代码仓库</a></p>\n<p>React.js + Typescript + Jest + @testing-library</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">安装和配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">安装</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>需要以下库</p>\n<ul>\n<li><code>jest</code>, 自动化测试框架</li>\n<li><code>ts-jest</code>，添加对<code>typescript</code>的支持</li>\n<li><code>@testing-library/jest-dom</code>，添加了一些额外的匹配器，测试dom</li>\n<li><code>@testing-library/react</code>，测试react组件</li>\n<li><code>@testing-library/react-hooks</code>，测试自定义hooks</li>\n<li><code>Babel</code>，转译jsx与ESM</li>\n</ul>\n<pre><code class=\"hljs language-shell\">yarn add jest @testing-library/jest-dom @testing-library/react @testing-library/react-hooks ts-jest -D\n</code></pre>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">配置</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>添加<code>jest</code>配置文件</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// jest.config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">preset</span>: <span class=\"hljs-string\">&#x27;ts-jest&#x27;</span>,\n  <span class=\"hljs-attr\">testEnvironment</span>: <span class=\"hljs-string\">&#x27;jsdom&#x27;</span>,\n  <span class=\"hljs-attr\">transform</span>: {\n    <span class=\"hljs-string\">&#x27;^.+\\\\.js$&#x27;</span>: <span class=\"hljs-string\">&#x27;babel-jest&#x27;</span>,\n    <span class=\"hljs-string\">&#x27;^.+\\\\.(ts|tsx)$&#x27;</span>: <span class=\"hljs-string\">&#x27;ts-jest&#x27;</span>,\n  },\n  <span class=\"hljs-attr\">moduleFileExtensions</span>: [<span class=\"hljs-string\">&#x27;js&#x27;</span>, <span class=\"hljs-string\">&#x27;jsx&#x27;</span>, <span class=\"hljs-string\">&#x27;ts&#x27;</span>, <span class=\"hljs-string\">&#x27;tsx&#x27;</span>],\n  <span class=\"hljs-attr\">setupFilesAfterEnv</span>: [\n    <span class=\"hljs-string\">&#x27;&lt;rootDir&gt;/setupTests.js&#x27;</span>,\n  ],\n};\n\n<span class=\"hljs-comment\">// setupTests.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-string\">&#x27;@testing-library/jest-dom&#x27;</span>;\n</code></pre>\n<p><code>ts</code>编译配置文件要有以下配置</p>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-comment\">// tsconfig.json</span>\n<span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-attr\">&quot;compilerOptions&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;jsx&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;react&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;lib&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">[</span>\n        <span class=\"hljs-string\">&quot;dom&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;dom.iterable&quot;</span><span class=\"hljs-punctuation\">,</span>\n        <span class=\"hljs-string\">&quot;esnext&quot;</span>\n    <span class=\"hljs-punctuation\">]</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;esModuleInterop&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;allowSyntheticDefaultImports&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-keyword\">true</span>\n<span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-comment\">// ...</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Jest简要教程</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>describe</code>用来包含一块测试的代码，通常用它来对几个测试进行分组</p>\n<p><code>test</code>是每一个测试，内部包含需要测试的方法，别名为<code>it</code></p>\n<p><code>expect</code>翻译为预期，需要和很多匹配器结合使用</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;test useCookie&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useCookie).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n  <span class=\"hljs-comment\">// ...</span>\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">常见DOM测试用例</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">测试按钮点击事件</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { render, fireEvent } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;click events&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> onClick = jest.<span class=\"hljs-title function_\">fn</span>();\n\n    <span class=\"hljs-keyword\">const</span> { getByLabelText } = <span class=\"hljs-title function_\">render</span>(\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">aria-label</span>=<span class=\"hljs-string\">&quot;Button&quot;</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{onClick}</span> /&gt;</span></span>\n    );\n\n    <span class=\"hljs-keyword\">const</span> btn = <span class=\"hljs-title function_\">getByLabelText</span>(<span class=\"hljs-string\">&quot;Button&quot;</span>);\n    fireEvent.<span class=\"hljs-title function_\">click</span>(btn);\n    <span class=\"hljs-title function_\">expect</span>(onClick).<span class=\"hljs-title function_\">toBeCalled</span>();\n    <span class=\"hljs-title function_\">expect</span>(onClick).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n  });\n});\n</code></pre>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">测试input输入事件</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { fireEvent, render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;input element&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> onChange = jest.<span class=\"hljs-title function_\">fn</span>();\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;change&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { getByTestId } = <span class=\"hljs-title function_\">render</span>(\n      <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;changeInput&quot;</span> <span class=\"hljs-attr\">onChange</span>=<span class=\"hljs-string\">{onChange}</span> /&gt;</span></span>\n    );\n\n    <span class=\"hljs-keyword\">const</span> input = <span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;changeInput&quot;</span>);\n    fireEvent.<span class=\"hljs-title function_\">change</span>(input, { <span class=\"hljs-attr\">target</span>: { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;hello&quot;</span> } });\n    <span class=\"hljs-title function_\">expect</span>(onChange).<span class=\"hljs-title function_\">toBeCalled</span>();\n    <span class=\"hljs-title function_\">expect</span>(input).<span class=\"hljs-title function_\">toHaveProperty</span>(<span class=\"hljs-string\">&quot;value&quot;</span>, <span class=\"hljs-string\">&quot;hello&quot;</span>);\n  });\n});\n</code></pre>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">测试props</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;react&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { render } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;@testing-library/react&quot;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&quot;props&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\">{ loading }: { loading?: boolean }</span>) =&gt; (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">data-testid</span>=<span class=\"hljs-string\">&quot;span&quot;</span>&gt;</span>{loading ? &quot;loading...&quot; : &quot;hello&quot;}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>\n  );\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;default props&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { getByTestId } = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n    <span class=\"hljs-keyword\">const</span> span = <span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;span&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(span).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&quot;props change&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { getByTestId, rerender } = <span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n    <span class=\"hljs-keyword\">const</span> span = <span class=\"hljs-title function_\">getByTestId</span>(<span class=\"hljs-string\">&quot;span&quot;</span>);\n    <span class=\"hljs-title function_\">expect</span>(span).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n    <span class=\"hljs-comment\">// 通过rerender来模拟props对改变</span>\n    <span class=\"hljs-title function_\">rerender</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">loading</span>=<span class=\"hljs-string\">{true}</span> /&gt;</span></span>);\n    <span class=\"hljs-title function_\">expect</span>(span).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;loading...&quot;</span>);\n    <span class=\"hljs-title function_\">rerender</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> <span class=\"hljs-attr\">loading</span>=<span class=\"hljs-string\">{false}</span> /&gt;</span></span>);\n    <span class=\"hljs-title function_\">expect</span>(span).<span class=\"hljs-title function_\">toHaveTextContent</span>(<span class=\"hljs-string\">&quot;hello&quot;</span>);\n  });\n});\n</code></pre>\n"}},"__N_SSG":true}