{"pageProps":{"post":{"title":"Vue.js学习-$nextTick","tags":["$nextTick"],"categories":"Vue.js","description":"# [异步更新]([https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97](https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%","createDate":"2020-05-07 23:20:25","updateDate":"2020-10-16 17:33:23","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\"><a href=\"%5Bhttps://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97%5D(https://cn.vuejs.org/v2/guide/reactivity.html#%E5%BC%82%E6%AD%A5%E6%9B%B4%E6%96%B0%E9%98%9F%E5%88%97)\">异步更新</a></span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 Promise.then、MutationObserver 和 setImmediate，如果执行环境不支持，则会采用 setTimeout(fn, 0) 代替。</p>\n<p>这样做主要是为了提升性能，因为如果在主线程中更新DOM，循环100次就要更新100次DOM；但是如果等待事件循环完成之后再更新DOM，只需要更新一次。为了在数据更新操作之后操作DOM，我们可以在数据变化之后立即使用<code>Vue.nextTick(callback)</code>；这样回调函数会在DOM更新完成后被调用，就可以拿到最新的DOM元素了。</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\"><code>$nextTick</code>源码分析</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// /src/core/util/next-tick.js</span>\n<span class=\"hljs-keyword\">const</span> callbacks = []\n<span class=\"hljs-keyword\">let</span> pending = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">let</span> timerFunc\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">nextTick</span> (cb?: <span class=\"hljs-title class_\">Function</span>, ctx?: <span class=\"hljs-title class_\">Object</span>) {\n  <span class=\"hljs-keyword\">let</span> _resolve\n  callbacks.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (cb) {\n      <span class=\"hljs-keyword\">try</span> {\n        cb.<span class=\"hljs-title function_\">call</span>(ctx)\n      } <span class=\"hljs-keyword\">catch</span> (e) {\n        <span class=\"hljs-title function_\">handleError</span>(e, ctx, <span class=\"hljs-string\">&#x27;nextTick&#x27;</span>)\n      }\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (_resolve) {\n      <span class=\"hljs-title function_\">_resolve</span>(ctx)\n    }\n  })\n  <span class=\"hljs-keyword\">if</span> (!pending) {\n    pending = <span class=\"hljs-literal\">true</span>\n    <span class=\"hljs-title function_\">timerFunc</span>()\n  }\n  <span class=\"hljs-comment\">// $flow-disable-line</span>\n  <span class=\"hljs-keyword\">if</span> (!cb &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Promise</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">resolve</span> =&gt;</span> {\n      _resolve = resolve\n    })\n  }\n}\n</code></pre>\n<p>每次调用$nextTick就是在向callbacks新增回调函数.callbacks新增回调函数后又执行了timerFunc函数，<code>pending</code>用来标识同一个时间只能执行一次。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">let</span> isUsingMicroTask = <span class=\"hljs-literal\">false</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Promise</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"hljs-title function_\">isNative</span>(<span class=\"hljs-title class_\">Promise</span>)) {\n  <span class=\"hljs-comment\">//判断1：是否原生支持Promise</span>\n  <span class=\"hljs-keyword\">const</span> p = <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>()\n  timerFunc = <span class=\"hljs-function\">() =&gt;</span> {\n    p.<span class=\"hljs-title function_\">then</span>(flushCallbacks)\n    <span class=\"hljs-keyword\">if</span> (isIOS) <span class=\"hljs-built_in\">setTimeout</span>(noop)\n  }\n  isUsingMicroTask = <span class=\"hljs-literal\">true</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!isIE &amp;&amp; <span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">MutationObserver</span> !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; (\n  <span class=\"hljs-title function_\">isNative</span>(<span class=\"hljs-title class_\">MutationObserver</span>) ||\n  <span class=\"hljs-title class_\">MutationObserver</span>.<span class=\"hljs-title function_\">toString</span>() === <span class=\"hljs-string\">&#x27;[object MutationObserverConstructor]&#x27;</span>\n)) {\n  <span class=\"hljs-comment\">//判断2：是否原生支持MutationObserver</span>\n  <span class=\"hljs-keyword\">let</span> counter = <span class=\"hljs-number\">1</span>\n  <span class=\"hljs-keyword\">const</span> observer = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MutationObserver</span>(flushCallbacks)\n  <span class=\"hljs-keyword\">const</span> textNode = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(<span class=\"hljs-title class_\">String</span>(counter))\n  observer.<span class=\"hljs-title function_\">observe</span>(textNode, {\n    <span class=\"hljs-attr\">characterData</span>: <span class=\"hljs-literal\">true</span>\n  })\n  timerFunc = <span class=\"hljs-function\">() =&gt;</span> {\n    counter = (counter + <span class=\"hljs-number\">1</span>) % <span class=\"hljs-number\">2</span>\n    textNode.<span class=\"hljs-property\">data</span> = <span class=\"hljs-title class_\">String</span>(counter)\n  }\n  isUsingMicroTask = <span class=\"hljs-literal\">true</span>\n} <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> setImmediate !== <span class=\"hljs-string\">&#x27;undefined&#x27;</span> &amp;&amp; <span class=\"hljs-title function_\">isNative</span>(setImmediate)) {\n  <span class=\"hljs-comment\">//判断3：是否原生支持setImmediate</span>\n  timerFunc = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">setImmediate</span>(flushCallbacks)\n  }\n} <span class=\"hljs-keyword\">else</span> {\n  <span class=\"hljs-comment\">//判断4：上面都不行，直接用setTimeout</span>\n  timerFunc = <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-built_in\">setTimeout</span>(flushCallbacks, <span class=\"hljs-number\">0</span>)\n  }\n}\n</code></pre>\n<p><code>timerFunc</code>做了四个判断，对当前环境进行不断的降级处理，尝试使用原生的<code>Promise.then</code>、<code>MutationObserver</code>和<code>setImmediate</code>，上述三个都不支持最后使用setTimeout；降级处理的目的都是将<code>flushCallbacks</code>函数放入微任务(判断1和判断2)或者宏任务(判断3和判断4)，等待下一次事件循环时来执行。<code>MutationObserver</code>是Html5的一个新特性，用来监听目标DOM结构是否改变，也就是代码中新建的textNode；如果改变了就执行<code>MutationObserver</code>构造函数中的回调函数，不过是它是在微任务中执行的。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">flushCallbacks</span> () {\n  pending = <span class=\"hljs-literal\">false</span>\n  <span class=\"hljs-keyword\">const</span> copies = callbacks.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>)\n  callbacks.<span class=\"hljs-property\">length</span> = <span class=\"hljs-number\">0</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; copies.<span class=\"hljs-property\">length</span>; i++) {\n    copies[i]()\n  }\n}\n</code></pre>\n<p><code>flushCallbacks</code>把<code>callbacks</code>数组复制一份，然后把<code>callbacks</code>置为空，最后把复制出来的数组中的每个函数依次执行一遍；所以它的作用仅仅是用来执行<code>callbacks中</code>的回调函数。</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p><code>$nextTick</code>的总体流程大致是：</p>\n<ol>\n<li>把回调函数放入<code>callbacks</code>中执行，<code>callpacks.push</code></li>\n<li>将执行函数放到微任务会宏任务中，<code>timerFunc</code></li>\n<li>事件循环到了微任务或宏任务，执行函数依次执行<code>callbacks</code>中的回调，<code>flushCallbacks</code></li>\n</ol>\n"}},"__N_SSG":true}