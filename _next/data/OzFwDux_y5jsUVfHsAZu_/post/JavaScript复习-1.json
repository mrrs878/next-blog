{"pageProps":{"post":{"title":"JavaScript复习-1","tags":["JavaScript"],"categories":"2021复习","description":"## Proxy和Reflect\n\n可以给目标对象定义一个关联的对象，而这个代理对象可以作为抽象的目标对象来使用。默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象。使用`new Proxy(target, handler)`来创建\n\n`handler`对象中所有可以捕获的方法都有对应的反射`Reflect` API方法，这些方法与捕获器拦截的方法具有相同的名称，也具有与被拦截方","createDate":"2021-05-11 14:27:01","updateDate":"2021-06-15 23:15:37","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Proxy和Reflect</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>可以给目标对象定义一个关联的对象，而这个代理对象可以作为抽象的目标对象来使用。默认情况下，在代理对象上执行的所有操作都会无障碍地传播到目标对象。使用<code>new Proxy(target, handler)</code>来创建</p>\n<p><code>handler</code>对象中所有可以捕获的方法都有对应的反射<code>Reflect</code> API方法，这些方法与捕获器拦截的方法具有相同的名称，也具有与被拦截方法相同的行为</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> target = {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>;\n}\n\n<span class=\"hljs-keyword\">const</span> proxy = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(target, {\n    <span class=\"hljs-attr\">get</span>: <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-property\">get</span>,\n})\n</code></pre>\n<p><code>Proxy.prototype</code>为<code>undefined</code>，因此不能使用<code>instanceof</code>操作符，会抛出<code>TypeError</code></p>\n<p><code>Proxy.revocable</code>方法会返回一个<code>revoke</code>方法，用来撤销代理。撤销代理的操作是不可逆、幂等的，撤销后再次访问代理会抛出<code>TypeError</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> revocableProxy = <span class=\"hljs-title class_\">Proxy</span>.<span class=\"hljs-title function_\">revocable</span>({\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>\n}, {\n  <span class=\"hljs-attr\">get</span>: <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-property\">get</span>,\n  <span class=\"hljs-attr\">set</span>: <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-property\">set</span>,\n});\n\nrevocableProxy.<span class=\"hljs-property\">proxy</span>.<span class=\"hljs-property\">name</span>; <span class=\"hljs-comment\">// tom</span>\nrevocableProxy.<span class=\"hljs-title function_\">revoke</span>();\nrevocableProxy.<span class=\"hljs-property\">proxy</span>.<span class=\"hljs-property\">name</span>; <span class=\"hljs-comment\">//TypeError</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">instanceof原理</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>原型链</strong>。通过检测构造函数的<code>prototype</code>属性是否出现在某个实例对象的原型链上，运算符左侧是实例对象，右侧是构造函数</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myInstanceof</span>(<span class=\"hljs-params\">instance, object</span>) {\n  <span class=\"hljs-keyword\">const</span> proto = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">getPrototypeOf</span>(instance);\n  <span class=\"hljs-keyword\">if</span> (proto === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (object.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> === proto) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">myInstanceof</span>(proto, object);\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">防抖、节流</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>一种性能优化手段，避免函数过多执行（多用来优化滑动/点击事件回调）</p>\n<p>防抖:：在规定的时间内若再次触发则重新及时</p>\n<p>节流：在规定的时间内若再次触发(触发间隔大于规定的时间)只会执行一次</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span>(<span class=\"hljs-params\">cb, timeout</span>) {\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">let</span> canceled = <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_denounce</span>(<span class=\"hljs-params\">...args</span>) {\n    <span class=\"hljs-keyword\">let</span> res;\n    <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n    <span class=\"hljs-keyword\">if</span> (canceled) {\n      res = cb.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args);\n    } <span class=\"hljs-keyword\">else</span> {\n      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        res = cb.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args);\n      }, timeout);\n    }\n\n    <span class=\"hljs-keyword\">return</span> res;\n  }\n\n  _denounce.<span class=\"hljs-property\">cancel</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    canceled = <span class=\"hljs-literal\">true</span>;\n  };\n\n  <span class=\"hljs-keyword\">return</span> _denounce;\n}\n</code></pre>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">throttle</span>(<span class=\"hljs-params\">cb, timeout</span>) {\n  <span class=\"hljs-keyword\">let</span> lastTime = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">let</span> canceled = <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_throttle</span>(<span class=\"hljs-params\">...args</span>) {\n    <span class=\"hljs-keyword\">const</span> now = <span class=\"hljs-title class_\">Date</span>.<span class=\"hljs-title function_\">now</span>();\n    <span class=\"hljs-keyword\">let</span> res;\n    <span class=\"hljs-keyword\">if</span> (canceled) {\n      res = cb.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (lastTime + timeout &lt; now) {\n      lastTime = now;\n      res = cb.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, args);\n    }\n\n    <span class=\"hljs-keyword\">return</span> res;\n  }\n\n  _throttle.<span class=\"hljs-property\">cancel</span> = <span class=\"hljs-function\">() =&gt;</span> {\n    canceled = <span class=\"hljs-literal\">true</span>;\n  };\n\n  <span class=\"hljs-keyword\">return</span> _throttle;\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">函数的name属性</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>es6所有的函数都会暴露出一个<code>name</code>属性，其中包含关于函数的信息。多数形况下这个属性是一个字符串化的变量名，等于该函数的名字。</p>\n<p>如果使用<code>Function</code>构造函数创建的，则会标识成<code>anonymous</code></p>\n<p>如果函数是一个<code>get</code>、<code>set</code>或使用<code>bind()</code>实例化，那么标识符前会加一个前缀</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">箭头函数的特性</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>不能使用<code>arguments</code>、<code>super</code>、<code>new.target</code></li>\n<li>不能用作构造函数</li>\n<li>没有<code>prototype</code>属性</li>\n<li>没有<code>this</code></li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">函数重载</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>JavaScript中没有函数重载。因为ECMAScript函数<strong>没有签名</strong>，函数的参数在内部表现为一个包含零个或多个值的数组。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">new.target</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>ES6新增了检测函数是否使用<code>new</code>关键字调用的<code>new.target</code>属性。如果函数是正常调用的<code>new.target</code>的值是<code>undefined</code>；如果是使用<code>new</code>关键字调用的，则<code>new.target</code>将引用被调用的构造函数</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">User</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-keyword\">new</span>.<span class=\"hljs-property\">target</span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(errorMessage);\n  }\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(successMessage);\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">arguments.callee</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><del><code>arguments</code>对象有一个<code>callee</code>属性，是一个指向<code>arguments</code>对象所在函数的指针。使用<code>arguments.callee</code>可以让函数逻辑与函数名解耦：</del></p>\n<p>不推荐使用<code>arguments</code>（VSCode+eslint使用时会报错），因为<strong>访问arguments是个很昂贵的操作，它是个很大的对象</strong>，每次递归调用时都需要重新创建，影响现代浏览器的性能，还会影响闭包。推荐创建临时函数+闭包实现</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">factorial</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">let</span> tmp = num;\n  <span class=\"hljs-keyword\">if</span> (tmp &lt; <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\"></span>) {\n    res *= tmp;\n    tmp -= <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">if</span> (tmp !== <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">return</span> res;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>();\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">尾调用优化</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>ES6新增了一项内存管理机制，让JavaScript引擎在满足响应条件时可以重用栈帧。具体来说这项优化非常适合<em>尾调用</em>即<strong>外部函数的返回值是一个内部函数的返回值</strong></p>\n<p>尾调用优化的条件：</p>\n<ol>\n<li>代码在严格模式下运行</li>\n<li>外部函数的返回值是对尾调函数的引用</li>\n<li>尾调用函数返回后不需要执行额外的操作</li>\n<li>尾调用函数没有产生闭包(无法释放外部函数的栈帧)</li>\n</ol>\n<p>优化<code>factorial</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">factorialPerform</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fn</span>(<span class=\"hljs-params\">m, n</span>) {\n    <span class=\"hljs-keyword\">if</span> (n === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> m;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>(m * n, n - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fn</span>(num, num - <span class=\"hljs-number\">1</span>);\n}\n</code></pre>\n<p>优化<code>fib</code></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fib</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">if</span> (num &lt; <span class=\"hljs-number\">2</span>) <span class=\"hljs-keyword\">return</span> num;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">1</span>) + <span class=\"hljs-title function_\">fib</span>(num - <span class=\"hljs-number\">2</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibPerform</span>(<span class=\"hljs-params\">num</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fibImpl</span>(<span class=\"hljs-params\">m, n, x</span>) {\n    <span class=\"hljs-keyword\">if</span> (x === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> m;\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fibImpl</span>(n, m + n, x - <span class=\"hljs-number\">1</span>);\n  }\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fibImpl</span>(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">1</span>, num);\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">JSON.stringify</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>JSON.stringify(value[, replacer [, space]])</code>，将一个JavaScript对象或值转换为JSON字符串，如果指定了<code>replacer</code>，则可以选择性地替换值，或将指定的<code>replacer</code>是数组，则可选择性地仅包含数组指定的属性</p>\n<p>注意：</p>\n<ul>\n<li>当在<code>value</code>存在循环引用时会抛出异常<code>TypError(&quot;cyclic object value&quot;)</code></li>\n<li>当尝试去转换<code>BigInt</code>类型的值会抛出<code>TypeError(&quot;BigInt value can&#39;t be serialized in JSON&quot;)</code></li>\n<li>如果<code>vaule</code>存在<code>toJSON()</code>方法，则返回该函数返回值</li>\n<li>非数组对象的属性不能保证以特定的顺序出现在序列化后的字符串中</li>\n<li><code>Boolean</code>、<code>Number</code>、<code>String</code>包装对象会在序列化过程中自动转换为原始值</li>\n<li>非数组对象的属性值为<code>undefined</code>、任意的函数、<code>symbol</code>会在序列化中被忽略，数组对象则会转换成<code>null</code></li>\n<li><code>Map</code>、<code>Set</code>、<code>WeakMap</code>、<code>WeakSet</code>仅会序列化可枚举属性</li>\n<li>函数、<code>undefined</code>被单独转换时会返回<code>undefined</code></li>\n<li><code>Date</code>类型会转化为<code>Date.toISOString()</code>返回的值</li>\n</ul>\n<p><code>replacer</code>为函数时：</p>\n<ul>\n<li>如果返回一个<code>Number</code>，转换为相应地字符串作为属性值被添加到JSON字符串</li>\n<li>如果返回一个<code>String</code>，该字符串作为属性值被添加入JSON字符串</li>\n<li>如果返回一个<code>Boolean</code>，<code>true</code>或<code>false</code>作为属性值被添加到JSON字符串</li>\n<li>如果返回其他对象，该对象递归地序列化为JSON字符串，对每个属性调用<code>replacer</code>方法。如果该对象是一个函数，则忽略</li>\n<li>如果返回<code>undefined</code>则忽略</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">jsonp</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jsonp</span>(<span class=\"hljs-params\">url</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);\n    <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">jsonpCallback</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">data</span>) =&gt;</span> {\n      <span class=\"hljs-title function_\">resolve</span>(data);\n      <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChild</span>(script);\n    }\n    script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${url}</span><span class=\"hljs-subst\">${url.includes(<span class=\"hljs-string\">&#x27;?&#x27;</span>) ? <span class=\"hljs-string\">&#x27;&amp;&#x27;</span> : <span class=\"hljs-string\">&#x27;?&#x27;</span>}</span>cb=jsonpCallback`</span>;\n    <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script);\n  })\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">取消网络请求</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>根据所使用的API的不同，有不同的解决方案：</p>\n<ul>\n<li><code>XMLHttpRequest</code>\n  使用<code>XMLHttpRequest.abort()</code><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> xhr = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">XMLHttpRequest</span>();\nxhr.<span class=\"hljs-title function_\">open</span>(<span class=\"hljs-string\">&#x27;GET&#x27;</span>, <span class=\"hljs-string\">&#x27;url&#x27;</span>, <span class=\"hljs-literal\">true</span>);\nxhr.<span class=\"hljs-title function_\">send</span>(<span class=\"hljs-literal\">null</span>);\nxhr.<span class=\"hljs-title function_\">abort</span>();\n</code></pre>\n</li>\n<li><code>fetch</code>\n  使用<code>AbortController</code><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> controller = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">AbortController</span>();\n<span class=\"hljs-keyword\">const</span> signal = controller.<span class=\"hljs-property\">signal</span>;\n<span class=\"hljs-title function_\">fetch</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>, { signal });\ncontroller.<span class=\"hljs-title function_\">abort</span>();\n</code></pre>\n</li>\n<li><code>axios</code>\n  使用<code>CancelToken</code><pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> source = axiox.<span class=\"hljs-property\">CancelToken</span>.<span class=\"hljs-title function_\">source</span>();\n<span class=\"hljs-keyword\">const</span> cancelToken = source.<span class=\"hljs-property\">token</span>;\n\naxios.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;url&#x27;</span>, { cancelToken });\nsource.<span class=\"hljs-title function_\">cancel</span>();\n</code></pre>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">findIndex和indexOf</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>findIndex</code>根据所给函数进行匹配，<code>indexOf</code>使用<code>===</code>进行匹配</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> students = [{ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> }, { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;jerry&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">32</span> }]\n\nstudents.<span class=\"hljs-title function_\">indexOf</span>({ <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>, <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span> }) <span class=\"hljs-comment\">// -1</span>\nstudents.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item.<span class=\"hljs-property\">name</span> === <span class=\"hljs-string\">&#x27;tom&#x27;</span> &amp;&amp; item.<span class=\"hljs-property\">age</span> === <span class=\"hljs-number\">23</span>) <span class=\"hljs-comment\">// 0</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">TDZ(暂时性死区)</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在JavaScript中，当控制流进入到它们出现的范围内，所有绑定都会被实例化。传统的<code>var</code>和<code>function</code>声明允许在实际声明之前访问那些绑定，并且值（<code>value</code>）为<code>undefined</code>。这种遗留行为被称为<strong>变量提升（hosting）</strong>。<code>let</code>和<code>const</code>声明也会被实例化，但<strong>运行到实际声明之前禁止访问</strong>。这称为<strong>暂时性死区(TDZ)</strong></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WeakMap</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在JavaScript中，map API可以通过使用其四个API方法共用两个数组（一个存放key，一个存放value）来实现。给这种map设置value时会同时将key和value添加到这两个数组的尾部。从而使得key和value的索引在两个数组中相对应。当从该map取值的时候，需要遍历所有的key，然后再使用索引从存储value的数组中检索出相应的value</p>\n<p>但这样的实现会有两个很大的缺点，首先赋值和搜索操作都是O(n)的时间复杂度。另一个缺点是可能导致内存泄漏，因为数组会一直引用着每个key和value。这种引用使得垃圾回收算法不能回收处理它们，即使没有其他引用存在了</p>\n<p>相比之下，原生的WeakMap持有的是每个键对象的<strong>弱引用</strong>，这意味着没有其他引用存在时垃圾回收能正确进行。原生的WeakMap的结构是特殊且<strong>有效</strong>的，其用于映射的key只有在其没有被回收时才是有效的</p>\n<p>正由于这样的弱引用，WeakMap的key是<strong>不可枚举</strong>的（没有办法给出所有的key，key取决于垃圾回收器的状态，是不可预知的）。如果key是可枚举的，其列表将会受垃圾回收机制的影响，从而得到不确定的结果。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">mdn-JSON.stringify()</a></p>\n<p><a href=\"https://github.com/shfshanyue/Daily-Question/issues/502\">如何取消请求的发送</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakMap\">mdn-WeakMap</a></p>\n"}},"__N_SSG":true}