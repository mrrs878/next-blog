{"pageProps":{"post":{"title":"设计模式-职责链模式","tags":["设计模式","职责链模式"],"categories":"设计模式","description":"# WHAT\n\n使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止\n\n![普通设计](../imgs/chainOfResponsibility0.png)\n\n![职责链模式](../imgs/chainOfResponsibility1.png)\n\n# WHY\n\n- 职责链模式解耦了请求发送者 A 和","createDate":"2019-10-21 10:51:52","updateDate":"10/1/2021, 3:34:43 AM","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHAT</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>使多个对象都有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系，将这些对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止</p>\n<p><img src=\"../imgs/chainOfResponsibility0.png\" alt=\"普通设计\"></p>\n<p><img src=\"../imgs/chainOfResponsibility1.png\" alt=\"职责链模式\"></p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHY</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ul>\n<li>职责链模式解耦了请求发送者 A 和 N 个接收者之间的复杂关系，由于不知道链中的哪个节点可以处理你发出的请求，所以你只需要把请求传递给第一个节点即可</li>\n<li>使用职责链后，链中的节点可以灵活拆分重组，增加/删除/改动一个节点都轻而易举</li>\n<li>可以手动指定起始节点，请求并不是非得从链中的第一个节点开始传递，这样就可以减少请求在链中的传递次数，更快的找到合适的请求接收者</li>\n</ul>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">HOW</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">a</span>(<span class=\"hljs-params\">x</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">b</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">c</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">3</span>);\n}\n\n<span class=\"hljs-comment\">// 职责链模式普通实现</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Chain</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">fn</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fn</span> = fn;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">successor</span> = <span class=\"hljs-literal\">null</span>;\n  }\n  <span class=\"hljs-title function_\">setNextSuccessor</span>(<span class=\"hljs-params\">successor</span>) {\n    <span class=\"hljs-keyword\">return</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">successor</span> = successor);\n  }\n  <span class=\"hljs-title function_\">passRequest</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> ret = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">fn</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>);\n    <span class=\"hljs-keyword\">if</span> (ret === <span class=\"hljs-literal\">false</span>)\n      <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">successor</span> &amp;&amp;\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">successor</span>.<span class=\"hljs-property\">passRequest</span>.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">successor</span>, <span class=\"hljs-variable language_\">arguments</span>)\n      );\n    <span class=\"hljs-keyword\">return</span> ret;\n  }\n}\n<span class=\"hljs-keyword\">let</span> aChain = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chain</span>(a);\n<span class=\"hljs-keyword\">let</span> bChain = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chain</span>(b);\n<span class=\"hljs-keyword\">let</span> cChain = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chain</span>(c);\naChain.<span class=\"hljs-title function_\">setNextSuccessor</span>(bChain);\nbChain.<span class=\"hljs-title function_\">setNextSuccessor</span>(cChain);\n\naChain.<span class=\"hljs-title function_\">passRequest</span>(<span class=\"hljs-number\">12</span>); <span class=\"hljs-comment\">// 2</span>\n\n<span class=\"hljs-comment\">// AOP实现职责链模式</span>\n<span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">after</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">let</span> _self = <span class=\"hljs-variable language_\">this</span>;\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">let</span> tmp = _self.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>);\n    <span class=\"hljs-keyword\">if</span> (tmp === <span class=\"hljs-literal\">false</span>) <span class=\"hljs-keyword\">return</span> fn &amp;&amp; fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, <span class=\"hljs-variable language_\">arguments</span>);\n    <span class=\"hljs-keyword\">return</span> tmp;\n  };\n};\n\na.<span class=\"hljs-title function_\">after</span>(b).<span class=\"hljs-title function_\">after</span>(c)(<span class=\"hljs-number\">12</span>); <span class=\"hljs-comment\">// 2</span>\n</code></pre>\n"}},"__N_SSG":true}