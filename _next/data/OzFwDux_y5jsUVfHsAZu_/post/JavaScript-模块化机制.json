{"pageProps":{"post":{"title":"JavaScript-模块化机制","tags":["JavaScript模块化机制"],"categories":"JavaScript","description":"# AMD\n\n## 简介\n\n全称是Asynchronous Module Definition（异步模块加载机制）。后来由该草案的作者以RequireJS实现了该规范，所以一般说AMD也是指RequireJS。适用于**浏览器环境**\n\n## 用法\n\n```js\n// a.js\ndefine(function () {\n\treturn 1\n})\n\n// b.js\nrequire(['a'],","createDate":"2020-04-24 22:55:14","updateDate":"2021-05-13 14:16:51","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">AMD</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">简介</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>全称是Asynchronous Module Definition（异步模块加载机制）。后来由该草案的作者以RequireJS实现了该规范，所以一般说AMD也是指RequireJS。适用于<strong>浏览器环境</strong></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">用法</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-number\">1</span>\n})\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-built_in\">require</span>([<span class=\"hljs-string\">&#x27;a&#x27;</span>], <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a)\n})\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">特点</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>对于依赖的模块，AMD推崇<strong>依赖前置，提前执行</strong>。也就是说在<code>define</code>方法里传入的依赖模块（数组）会在一来是就下载并执行</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">CommonJS</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">简介</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>由CommonJS小组所提出，目的是弥补JavaScript在服务端缺少模块化机制。<strong>Node.js、webpack</strong>都是基于该规范实现</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">用法</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;i am a function&quot;</span>)\n}\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./a.js&quot;</span>)\n<span class=\"hljs-title function_\">a</span>()\n<span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">num</span> = <span class=\"hljs-number\">1</span>\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">obj</span> = { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;zhangsan&#x27;</span> }\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">const</span> a = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./a.js&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(a) <span class=\"hljs-comment\">// { num: 1, obj: { name: &#x27;zhangsan&#x27; } }</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">特点</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>所有代码都运行在模块作用域，不会污染全局环境</li>\n<li>模块是同步加载的，即只有加载完成次啊能执行后面的操作</li>\n<li>模块在首次执行后就会<strong>缓存</strong>，再次加载只返回缓存结果，如果想要再次执行，可清除缓存</li>\n<li>CommonJS <strong>输出的是值的拷贝</strong></li>\n<li><code>this</code>指向当前模块</li>\n</ul>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">ESM</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    \n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">简介</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>ES6定义的模块化规范</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">基本用法</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// a.js</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> name = <span class=\"hljs-string\">&quot;zhangsan&quot;</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> age = <span class=\"hljs-number\">23</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n    <span class=\"hljs-attr\">address</span>: <span class=\"hljs-string\">&quot;shanghai&quot;</span>\n}\n\n<span class=\"hljs-comment\">// b.js</span>\n<span class=\"hljs-keyword\">import</span> address, { name, age } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;./a.js&quot;</span>\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(address, name, age) <span class=\"hljs-comment\">// &quot;shanghai&quot; &quot;zhangsan&quot; 23</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">特点</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>编译时输出接口</li>\n<li>可以单独加载模块某个接口</li>\n<li>输出的是引用</li>\n<li><code>this</code>指向<code>undefined</code></li>\n</ul>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">ESM VS CommonJS</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <table>\n<thead>\n<tr>\n<th></th>\n<th>CommonJS</th>\n<th>ESM</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>加载时间</td>\n<td>运行时加载</td>\n<td>编译时输出接口</td>\n</tr>\n<tr>\n<td>加载方式</td>\n<td>加载整个模块</td>\n<td>按需加载</td>\n</tr>\n<tr>\n<td>输出方式</td>\n<td>值的拷贝</td>\n<td>值的引用</td>\n</tr>\n<tr>\n<td><code>this</code></td>\n<td>指向当前模块</td>\n<td><code>undefined</code></td>\n</tr>\n</tbody></table>\n"}},"__N_SSG":true}