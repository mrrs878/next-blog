{"pageProps":{"post":{"title":"JavaScript复习-手写题","tags":["JavaScript","手写题"],"categories":"2021复习","description":"## map、reduce、flatten函数\n\n``` js\nfunction myMap(src, cb) {\n  if (!Array.isArray(src)) throw new TypeError('src must be an array');\n  const tmp = [];\n  src.forEach((item) => tmp.push(cb(item)));\n  ret","createDate":"2021-05-27 02:07:18","updateDate":"2021-07-05 23:25:14","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">map、reduce、flatten函数</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myMap</span>(<span class=\"hljs-params\">src, cb</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(src)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;src must be an array&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> tmp = [];\n  src.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> tmp.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-title function_\">cb</span>(item)));\n  <span class=\"hljs-keyword\">return</span> tmp;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myReduce</span>(<span class=\"hljs-params\">src, cb, initialValue</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(src)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;src must be an array&#x27;</span>);\n  <span class=\"hljs-keyword\">let</span> init = initialValue || src[<span class=\"hljs-number\">0</span>];\n  <span class=\"hljs-keyword\">const</span> tmp = initialValue ? src : src.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>);\n  tmp.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item, index</span>) =&gt;</span> {\n    init = <span class=\"hljs-title function_\">cb</span>(init, item, index, tmp);\n  });\n  <span class=\"hljs-keyword\">return</span> init;\n}\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">flatten</span> = (<span class=\"hljs-params\">arr, dep = <span class=\"hljs-number\">1</span></span>) =&gt; (dep &gt; <span class=\"hljs-number\">0</span>\n  ? arr.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">pre, cur</span>) =&gt;</span> pre.<span class=\"hljs-title function_\">concat</span>(<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(cur) ? <span class=\"hljs-title function_\">flatten</span>(cur, dep - <span class=\"hljs-number\">1</span>) : cur), [])\n  : arr.<span class=\"hljs-title function_\">slice</span>());\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">curry函数</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">myCurry</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">(<span class=\"hljs-params\">...args</span>) =&gt;</span> (fn.<span class=\"hljs-property\">length</span> === args.<span class=\"hljs-property\">length</span>\n    ? fn.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-literal\">null</span>, ...args)\n    : fn.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-literal\">null</span>, ...args));\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">异步求和</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>原文地址: <a href=\"https://mp.weixin.qq.com/s/RBk-cLUU-ZT4ylqIR2XdJg\">一道字节笔试题，实现一个异步求和函数</a>\n提供一个异步 add 方法如下，需要实现一个<code>await sum(...args)</code>函数</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">asyncAdd</span>(<span class=\"hljs-params\">a, b, callback</span>) {\n  <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">callback</span>(<span class=\"hljs-literal\">null</span>, a + b);\n  }, <span class=\"hljs-number\">1000</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum2</span>(<span class=\"hljs-params\">a, b</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">asyncAdd</span>(a, b, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, res</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-title function_\">reject</span>(err);\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-title function_\">resolve</span>(res);\n    });\n  });\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sum</span>(<span class=\"hljs-params\">...args</span>) {\n  <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(args[<span class=\"hljs-number\">0</span>]);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n    args.<span class=\"hljs-title function_\">reduce</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">pre, cur</span>) =&gt;</span> pre.<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">total</span>) =&gt;</span> <span class=\"hljs-title function_\">sum2</span>(total, cur)),\n      <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">0</span>),\n    ).<span class=\"hljs-title function_\">then</span>(resolve);\n  });\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumTmp</span>(<span class=\"hljs-params\">...args</span>) {\n  <span class=\"hljs-keyword\">if</span> (args.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(args[<span class=\"hljs-number\">0</span>]);\n  <span class=\"hljs-keyword\">const</span> res = args.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-keyword\">async</span> (a, b) =&gt; <span class=\"hljs-title function_\">sum2</span>(<span class=\"hljs-keyword\">await</span> a, b), <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">0</span>));\n  <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">performanceSum</span>(<span class=\"hljs-params\">...args</span>) {\n  <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(args));\n  <span class=\"hljs-keyword\">const</span> { length } = tmp;\n  <span class=\"hljs-keyword\">if</span> (length === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(tmp[<span class=\"hljs-number\">0</span>]);\n  <span class=\"hljs-keyword\">const</span> resultArray = [];\n  <span class=\"hljs-keyword\">if</span> (length % <span class=\"hljs-number\">2</span>) tmp.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-number\">0</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; tmp.<span class=\"hljs-property\">length</span> / <span class=\"hljs-number\">2</span>; i += <span class=\"hljs-number\">1</span>) {\n    resultArray.<span class=\"hljs-title function_\">push</span>([tmp[i * <span class=\"hljs-number\">2</span>], tmp[i * <span class=\"hljs-number\">2</span> + <span class=\"hljs-number\">1</span>]]);\n  }\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>(resultArray.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">[a, b]</span>) =&gt;</span> <span class=\"hljs-title function_\">sum2</span>(a, b)));\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">performanceSum</span>(...res);\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">rgb(255, 255, 255)转#ffffff</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">rgb2hex</span>(<span class=\"hljs-params\">rgb</span>) {\n  <span class=\"hljs-keyword\">const</span> [r, g, b] = rgb.<span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\d+/g</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`#<span class=\"hljs-subst\">${\n    [r, g, b].map((item) =&gt; (+item).toString(<span class=\"hljs-number\">16</span>).padStart(<span class=\"hljs-number\">2</span>, <span class=\"hljs-string\">&#x27;0&#x27;</span>)).join(<span class=\"hljs-string\">&#x27;&#x27;</span>)\n  }</span>`</span>;\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Promise.all</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseAll</span>(<span class=\"hljs-params\">promises</span>) {\n  <span class=\"hljs-keyword\">if</span> (!promises[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;promises must be iterable&#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> resolvedPromises = [];\n    promises.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">promise</span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(promise).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n      resolvedPromises.<span class=\"hljs-title function_\">push</span>(res);\n      <span class=\"hljs-keyword\">if</span> (resolvedPromises.<span class=\"hljs-property\">length</span> === promises.<span class=\"hljs-property\">length</span>) <span class=\"hljs-title function_\">resolve</span>(resolvedPromises);\n    }, reject));\n  });\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Promise.allSettled</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">PromiseStatus</span> = {\n  <span class=\"hljs-attr\">resolved</span>: <span class=\"hljs-string\">&#x27;fulfilled&#x27;</span>,\n  <span class=\"hljs-attr\">rejected</span>: <span class=\"hljs-string\">&#x27;rejected&#x27;</span>,\n};\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseAllSettled1</span>(<span class=\"hljs-params\">promises</span>) {\n  <span class=\"hljs-keyword\">if</span> (!promises[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;promises must be iterable&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onResolve</span> = (<span class=\"hljs-params\">value</span>) =&gt; ({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">PromiseStatus</span>.<span class=\"hljs-property\">resolved</span>, value });\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">onReject</span> = (<span class=\"hljs-params\">reason</span>) =&gt; ({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">PromiseStatus</span>.<span class=\"hljs-property\">rejected</span>, reason });\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">all</span>(promises.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">promise</span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(promise).<span class=\"hljs-title function_\">then</span>(onResolve, onReject)));\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseAllSettled2</span>(<span class=\"hljs-params\">promises</span>) {\n  <span class=\"hljs-keyword\">if</span> (!promises[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;promises must be iterable&#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> res = [];\n    promises.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">promise</span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(promise).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n      res.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">PromiseStatus</span>.<span class=\"hljs-property\">resolved</span>, value });\n      <span class=\"hljs-keyword\">if</span> (res.<span class=\"hljs-property\">length</span> === promises.<span class=\"hljs-property\">length</span>) <span class=\"hljs-title function_\">resolve</span>(res);\n    }, <span class=\"hljs-function\">(<span class=\"hljs-params\">reason</span>) =&gt;</span> {\n      res.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">status</span>: <span class=\"hljs-title class_\">PromiseStatus</span>.<span class=\"hljs-property\">rejected</span>, reason });\n      <span class=\"hljs-keyword\">if</span> (res.<span class=\"hljs-property\">length</span> === promises.<span class=\"hljs-property\">length</span>) <span class=\"hljs-title function_\">resolve</span>(res);\n    }));\n  });\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Promise.any</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">promiseAny</span>(<span class=\"hljs-params\">promises</span>) {\n  <span class=\"hljs-keyword\">if</span> (!promises[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;promises must be iterable&#x27;</span>);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { length } = promises;\n    <span class=\"hljs-keyword\">const</span> rejectedPromises = [];\n    promises.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">promise</span>) =&gt;</span> <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>(promise).<span class=\"hljs-title function_\">then</span>(resolve, <span class=\"hljs-function\">(<span class=\"hljs-params\">err</span>) =&gt;</span> {\n      rejectedPromises.<span class=\"hljs-title function_\">push</span>(err);\n      <span class=\"hljs-keyword\">if</span> (rejectedPromises.<span class=\"hljs-property\">length</span> === length) <span class=\"hljs-title function_\">reject</span>(rejectedPromises);\n    }));\n  });\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">shallowEqual</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">shallowEqual</span>(<span class=\"hljs-params\">obj1, obj2</span>) {\n  <span class=\"hljs-keyword\">if</span> (obj1 === obj2) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">if</span> (\n    <span class=\"hljs-keyword\">typeof</span> obj1 !== <span class=\"hljs-string\">&#x27;object&#x27;</span>\n    || obj1 === <span class=\"hljs-literal\">null</span>\n    || <span class=\"hljs-keyword\">typeof</span> obj2 !== <span class=\"hljs-string\">&#x27;object&#x27;</span>\n    || obj2 === <span class=\"hljs-literal\">null</span>\n  ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj1).<span class=\"hljs-property\">length</span> !== <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj2).<span class=\"hljs-property\">length</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> keys = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(obj1);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; keys.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (obj1[keys[i]] !== obj2[keys[i]]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">shuffle</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">shuffle</span> = (<span class=\"hljs-params\">list</span>) =&gt; list.<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">random</span>() - <span class=\"hljs-number\">0.5</span>)\n</code></pre>\n"}},"__N_SSG":true}