{"pageProps":{"post":{"title":"Web Component-Lit-2","tags":["微前端","WebComponent","Lit"],"categories":"微前端","description":"在昨天，我们使用 Lit 重构了`Reply`组件\n\n功能是完成了，不过最后总结的时候有些许吐槽，事后想起来貌似是自己使用姿势不对 🤔 ，因此今天基于 typescript + webpack + Lit 来重新开发，果然体验一下就上去了：\n\n1. typescript。有了 typescript 的加持，少写了不少模版代码\n\n2. VS Code 插件。我们在上一篇处理中吐槽没有语法提示，今","createDate":"2022-04-27 22:25:56","updateDate":"2022-05-07 22:54:37","body":"<p>在昨天，我们使用 Lit 重构了<code>Reply</code>组件</p>\n<p>功能是完成了，不过最后总结的时候有些许吐槽，事后想起来貌似是自己使用姿势不对 🤔 ，因此今天基于 typescript + webpack + Lit 来重新开发，果然体验一下就上去了：</p>\n<ol>\n<li><p>typescript。有了 typescript 的加持，少写了不少模版代码</p>\n</li>\n<li><p>VS Code 插件。我们在上一篇处理中吐槽没有语法提示，今天发现 VS Code 有一个插件可以做到该功能，嗯，体验又高了一级</p>\n</li>\n</ol>\n<p>接下来就开始介绍我的探索之旅</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">配置开发环境</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>主要是安装 package + 配置 webpack + 安装插件</p>\n<ol>\n<li>安装必要的 package</li>\n</ol>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;dependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;lit&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^2.2.2&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;typescript&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.6.3&quot;</span>\n  <span class=\"hljs-punctuation\">}</span><span class=\"hljs-punctuation\">,</span>\n  <span class=\"hljs-attr\">&quot;devDependencies&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;html-webpack-plugin&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^5.5.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;ts-loader&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^9.2.9&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;webpack&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^5.72.0&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;webpack-cli&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.9.2&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;webpack-dev-server&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;^4.8.1&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ol start=\"2\">\n<li>配置 webpack</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;html-webpack-plugin&quot;</span>);\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;development&quot;</span>,\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&quot;./src/index.ts&quot;</span>,\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.ts$/</span>,\n        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&quot;ts-loader&quot;</span>],\n      },\n    ],\n  },\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&quot;source-map&quot;</span>,\n  <span class=\"hljs-attr\">plugins</span>: [<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>()],\n};\n</code></pre>\n<ol start=\"3\">\n<li>添加启动命令</li>\n</ol>\n<pre><code class=\"hljs language-json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;dev:lit&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;webpack serve&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ol start=\"4\">\n<li>安装 VS Code 插件</li>\n</ol>\n<p>VS Code 插件栏中搜索<strong>lit-plugin</strong>，然后安装即可，安装好之后<code>html</code>和<code>css</code>里的代码就有高亮和语法提示了（没有的话重新打开文件试试，再不行就重启大法好），而且点击组件还可以跳转了</p>\n<p>至此，开发环境配置完毕</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用 typescript 重构代码</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>俗话说得好，磨刀不误砍柴工，先规划好要做什么</p>\n<ol>\n<li><p>重构 Reply 组件</p>\n</li>\n<li><p>使用 typescript 开发</p>\n</li>\n<li><p>使用 webpack 📦</p>\n</li>\n</ol>\n<p>那么既然用到 webpack 了，那么我们就按照通常的项目来设计了</p>\n<pre><code class=\"hljs language-sh\">.\n├── package.json\n├── src\n│   ├── components\n│   │   ├── Comment.ts <span class=\"hljs-comment\"># 评论组件</span>\n│   │   └── Reply.ts   <span class=\"hljs-comment\"># 回复组件</span>\n│   └── index.ts       <span class=\"hljs-comment\"># 入口文件，同时会创建一个App组件</span>\n├── tsconfig.json\n├── webpack.config.js\n└── yarn.lock\n</code></pre>\n<p>在这里，我们分别将不同的组件抽离到不同的文件中，这样逻辑更清晰，维护起来也更方便</p>\n<p>好了，接下来开始编码</p>\n<p>（代码和之前的差不多，我直接敲重点）</p>\n<p>从 js 迁移到 ts 开始很方便快捷的，主要修改的逻辑包含下面几项</p>\n<ol>\n<li><p>去除之前的<code>window.customElements.define(&#39;m-comment&#39;, Comment);</code>，在<code>class</code>最上面添加注解<code>@customElement(&quot;m-comment&quot;)</code></p>\n</li>\n<li><p>属性声明也可以使用注解了</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-ts\">  <span class=\"hljs-meta\">@property</span>({ <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span> })\n  avatar = <span class=\"hljs-string\">&#x27;&#x27;</span>\n</code></pre>\n<ol start=\"3\">\n<li>组件中的<code>this.shadowRoot.querySelector(&#39;#input&#39;)</code>需要修改一下</li>\n</ol>\n<p>我们可以使用<code>!</code>来强制声明<code>this.shadowRoot</code>是一定存在的，或者添加一个<code>if</code>判断</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-title function_\">onSubmit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">comment</span>: <span class=\"hljs-title class_\">HTMLInputElement</span>|<span class=\"hljs-literal\">null</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>!.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#input&#x27;</span>);\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;submit-comment&#x27;</span>, {\n      <span class=\"hljs-attr\">detail</span>: comment!.<span class=\"hljs-property\">value</span>,\n    }));\n    comment!.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n  }\n</code></pre>\n<ol start=\"4\">\n<li>完成</li>\n</ol>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/611ad4cbcda94373a63fb5b2b22bd715~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"lit-ts-js\"></p>\n<p>可以看到，有了 typescript 的加持，代码明显清爽许多，而且开发体验也更好了</p>\n<p>完整代码在<a href=\"https://github.com/mrrs878/web-components\">这里</a></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>typescript 牛逼，开发插件的大佬牛逼</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://lit.dev/docs/\">Lit</a></p>\n"}},"__N_SSG":true}