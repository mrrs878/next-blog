{"pageProps":{"post":{"title":"webpack复习-0","tags":["webpack"],"categories":"2021复习","description":"## 构建过程\n\n1. 初始化参数。从配置文件和命令行读取参数后合并，得到最终的参数\n2. 开始编译。用上一步得到的参数初始化 `Compiler` 对象，加载所有配置的插件，执行 `Compiler` 对象的 `run` 方法开始执行编译\n3. 确定入口。根据配置中的 `entry` 找出所有的入口文件\n4. 编译模块。从入口文件出发，调用所有配置的 `loader` 对模块进行翻译，再找出该","createDate":"2021-05-26 14:54:22","updateDate":"2024-04-18 20:04:40","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">构建过程</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ol>\n<li>初始化参数。从配置文件和命令行读取参数后合并，得到最终的参数</li>\n<li>开始编译。用上一步得到的参数初始化 <code>Compiler</code> 对象，加载所有配置的插件，执行 <code>Compiler</code> 对象的 <code>run</code> 方法开始执行编译</li>\n<li>确定入口。根据配置中的 <code>entry</code> 找出所有的入口文件</li>\n<li>编译模块。从入口文件出发，调用所有配置的 <code>loader</code> 对模块进行翻译，再找出该模块依赖的模块，再递归本步骤直到所有入口依赖的文件都经过了本步骤的处理</li>\n<li>完成模块编译。在经过第 4 步使用 <code>loader</code> 翻译完所有模块后，得到了每个模块被翻译后的最终内容以及它们之间的依赖关系</li>\n<li>输出资源。根据入口和模块之间的依赖关系，组装成一个个包含多个模块的 <code>chunk</code> ，再把每个 <code>chunk</code> 转换成一个单独的文件加入到输出列表，这步是可以修改输出内容的最后机会</li>\n<li>输出完成。在确定好输出内容后，根据配置确定输出的路径和文件名，把文件内容写入到文件内</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Hash&amp;ChunkHash&amp;ContentHash 的区别</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><code>hash</code>，根据构建目录生成，只要项目中有文件修改，则整个项目构建出来的<code>hash</code>都会改变</li>\n<li><code>chunkHash</code>，和 webpack 打包到 chunk 有关，不同 entry 会生成不同的<code>chunkHash</code>。chunk 之间互不影响（一般用来打包公用 js）</li>\n<li><code>contentHash</code>，根据文件内容生成<code>hash</code>，只要文件内容不变，生成的<code>contentHash</code>就不变（一般用来打包 css）</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">loader 和 plugin</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>loader 用来处理非 JavaScript 文件。webpack 将一切文件视为模块，但 webpack 只能处理 JavaScript 文件，如果想将其他文件也打包的话就要用到对应的 loader</p>\n<p>plugin 用来扩展 webpack 的能力。webpack 在运行的生命周期中会广播出许多事件，plugin 可以监听这些事件，在合适的时机通过 webpack 提供的 api 改变输出结果</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">webpack5 新特性</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>启动命令变化<pre><code class=\"hljs language-js\">{\n    <span class=\"hljs-comment\">// v4</span>\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;webpack-dev-server&quot;</span>\n    <span class=\"hljs-comment\">// v5</span>\n    <span class=\"hljs-string\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;webpack serve&quot;</span>\n}\n</code></pre>\n</li>\n<li>内置持久化缓存</li>\n<li>资源模块</li>\n<li>moduleIds 和 chunkIds 优化</li>\n<li>移除 Node.js 的 polyfill</li>\n<li><code>tree-shaking</code></li>\n<li><code>module federation</code>。主要是用来解决多个应用之间代码共享的问题，可以让我们的更加优雅的实现跨应用的代码共享</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">tree shaking</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>一种优化，可以去除不必要的代码，减小打包后的体积</p>\n<p>基于模块静态加载来实现。由于导入了哪些模块是确定的，编译的时候可以正确判断到底加载了哪些模块和变量，可以删除那些未被使用的变量或者引用</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">常用配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;path&quot;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;html-webpack-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">ProgressBarPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;progress-bar-webpack-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> chalk = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;chalk&quot;</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">CleanWebpackPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;clean-webpack-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;mini-css-extract-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">CssMinimizerPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;css-minimizer-webpack-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">DefinePlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">TerserPlugin</span> = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;terser-webpack-plugin&quot;</span>);\n<span class=\"hljs-keyword\">const</span> entry = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./webpack.entry&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> { <span class=\"hljs-variable constant_\">PORT</span>, <span class=\"hljs-variable constant_\">MODE</span>, <span class=\"hljs-variable constant_\">MOCK</span> } = process.<span class=\"hljs-property\">env</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateHTMLPluginConfig</span>(<span class=\"hljs-params\">pages</span>) {\n  <span class=\"hljs-keyword\">const</span> items = <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">ownKeys</span>(pages).<span class=\"hljs-title function_\">map</span>(\n    <span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span>\n      <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>({\n        <span class=\"hljs-attr\">chunks</span>: [item, <span class=\"hljs-string\">&quot;common&quot;</span>],\n        <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">`./src/html/<span class=\"hljs-subst\">${item}</span>.html`</span>,\n        <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${item}</span>.html`</span>,\n      })\n  );\n  <span class=\"hljs-keyword\">return</span> items;\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-variable constant_\">MODE</span>,\n  entry,\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;static/js/[name].[hash:8].js&quot;</span>,\n    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n  },\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CleanWebpackPlugin</span>(),\n    ...<span class=\"hljs-title function_\">generateHTMLPluginConfig</span>(entry),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ProgressBarPlugin</span>({\n      <span class=\"hljs-attr\">format</span>: <span class=\"hljs-string\">`<span class=\"hljs-subst\">${chalk.green(<span class=\"hljs-string\">&quot;Progressing&quot;</span>)}</span>[:bar]<span class=\"hljs-subst\">${chalk.green(\n        <span class=\"hljs-string\">&quot;:percent&quot;</span>\n      )}</span>(:elapsed seconds)`</span>,\n      <span class=\"hljs-attr\">clear</span>: <span class=\"hljs-literal\">false</span>,\n    }),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>({\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;static/css/[name].[hash:8].css&quot;</span>,\n      <span class=\"hljs-attr\">chunkFilename</span>: <span class=\"hljs-string\">&quot;static/css/[id].css&quot;</span>,\n    }),\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">DefinePlugin</span>({\n      <span class=\"hljs-string\">&quot;process.env&quot;</span>: {\n        <span class=\"hljs-attr\">MODE</span>: <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(<span class=\"hljs-variable constant_\">MODE</span>),\n        <span class=\"hljs-variable constant_\">MOCK</span>,\n      },\n    }),\n  ],\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(html)$/</span>,\n        <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&quot;html-withimg-loader&quot;</span>],\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.m?js$/</span>,\n        <span class=\"hljs-attr\">use</span>: [\n          {\n            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&quot;babel-loader&quot;</span>,\n            <span class=\"hljs-attr\">options</span>: {\n              <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">&quot;@babel/preset-env&quot;</span>],\n            },\n          },\n          <span class=\"hljs-string\">&quot;eslint-loader&quot;</span>,\n        ],\n        <span class=\"hljs-attr\">exclude</span>: [<span class=\"hljs-regexp\">/node_modules/</span>, <span class=\"hljs-regexp\">/lib/</span>, <span class=\"hljs-regexp\">/polyfill/</span>],\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.css$/</span>,\n        <span class=\"hljs-attr\">use</span>: [\n          {\n            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,\n            <span class=\"hljs-attr\">options</span>: {\n              <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&quot;../&quot;</span>,\n            },\n          },\n          <span class=\"hljs-string\">&quot;css-loader&quot;</span>,\n          <span class=\"hljs-string\">&quot;postcss-loader&quot;</span>,\n        ],\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.less$/</span>,\n        <span class=\"hljs-attr\">use</span>: [\n          {\n            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-title class_\">MiniCssExtractPlugin</span>.<span class=\"hljs-property\">loader</span>,\n            <span class=\"hljs-attr\">options</span>: {\n              <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-string\">&quot;../&quot;</span>,\n            },\n          },\n          <span class=\"hljs-string\">&quot;css-loader&quot;</span>,\n          <span class=\"hljs-string\">&quot;postcss-loader&quot;</span>,\n          <span class=\"hljs-string\">&quot;less-loader&quot;</span>,\n        ],\n      },\n      {\n        <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpg|gif|jpeg|svg|ttf)$/</span>,\n        <span class=\"hljs-attr\">use</span>: [\n          {\n            <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&quot;url-loader&quot;</span>,\n            <span class=\"hljs-attr\">options</span>: {\n              <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10240</span>,\n              <span class=\"hljs-attr\">esModule</span>: <span class=\"hljs-literal\">false</span>,\n              <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;static/img/[name].[hash:6].[ext]&quot;</span>,\n              <span class=\"hljs-attr\">publicPath</span>: <span class=\"hljs-variable constant_\">MODE</span> === <span class=\"hljs-string\">&quot;development&quot;</span> ? <span class=\"hljs-string\">&quot;/&quot;</span> : <span class=\"hljs-string\">&quot;/loginfe&quot;</span>,\n            },\n          },\n        ],\n        <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n      },\n    ],\n  },\n  <span class=\"hljs-attr\">optimization</span>: {\n    <span class=\"hljs-attr\">minimize</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">minimizer</span>: [<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CssMinimizerPlugin</span>(), <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TerserPlugin</span>()],\n    <span class=\"hljs-attr\">splitChunks</span>: {\n      <span class=\"hljs-attr\">chunks</span>: <span class=\"hljs-string\">&quot;all&quot;</span>,\n      <span class=\"hljs-attr\">cacheGroups</span>: {\n        <span class=\"hljs-attr\">common</span>: {\n          <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;common&quot;</span>,\n          <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/.js$/</span>,\n          <span class=\"hljs-attr\">minChunks</span>: <span class=\"hljs-number\">2</span>,\n          <span class=\"hljs-attr\">minSize</span>: <span class=\"hljs-number\">0</span>,\n        },\n      },\n    },\n  },\n  <span class=\"hljs-attr\">devServer</span>: {\n    <span class=\"hljs-attr\">contentBase</span>: path.<span class=\"hljs-title function_\">join</span>(__dirname, <span class=\"hljs-string\">&quot;dist&quot;</span>),\n    <span class=\"hljs-attr\">compress</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">port</span>: <span class=\"hljs-variable constant_\">PORT</span>,\n    <span class=\"hljs-attr\">disableHostCheck</span>: <span class=\"hljs-literal\">true</span>,\n    <span class=\"hljs-attr\">host</span>: <span class=\"hljs-string\">&quot;0.0.0.0&quot;</span>,\n    <span class=\"hljs-attr\">proxy</span>: {\n      <span class=\"hljs-string\">&quot;/v1/*&quot;</span>: {\n        <span class=\"hljs-attr\">target</span>: <span class=\"hljs-string\">&quot;xxx&quot;</span>,\n        <span class=\"hljs-attr\">changeOrigin</span>: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-attr\">secure</span>: <span class=\"hljs-literal\">false</span>,\n        <span class=\"hljs-attr\">headers</span>: {},\n      },\n    },\n  },\n  <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-variable constant_\">MODE</span> === <span class=\"hljs-string\">&quot;production&quot;</span> ? <span class=\"hljs-literal\">false</span> : <span class=\"hljs-string\">&quot;eval-source-map&quot;</span>,\n};\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">循环引用</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在<code>CommonJS</code>规范中，当遇到<code>require()</code>语句时，会执行<code>require</code>模块中的代码，并缓存执行的结果，当下次再次加载时不会重复执行，而是直接取缓存的结果</p>\n<p>在<code>ESM</code>中，因为<code>import</code>是在编译阶段执行的，这样就使得程序在编译时就能确定模块的依赖关系，一旦发现循环依赖，ES6 本身就不会再去执行依赖的那个模块了，所以程序可以正常结束。这也说明了 ES6 本身就支持循环依赖，保证程序不会因为循环依赖陷入无限调用</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://segmentfault.com/a/1190000038962700\">小红书面试官：介绍一下 tree shaking 及其工作原理</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/33049803\">探索 JavaScript 中的依赖管理及循环依赖</a></p>\n"}},"__N_SSG":true}