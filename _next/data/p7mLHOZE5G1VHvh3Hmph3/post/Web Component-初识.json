{"pageProps":{"post":{"title":"Web Component-初识","tags":["微前端","WebComponent"],"categories":"微前端","description":"Web Component 有点东西\n\n## 什么是 Web Component\n\n> Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 web 应用中使用它们。--MDN\n\n简单来讲就是浏览器提供的原生**组件复用**方案。主要由三种技术方案实现：\n\n- Custom elements（自定义元素）。可以用来定义标签（元素）","createDate":"2022-04-20 21:16:56","updateDate":"2022-01-08 22:40:37","body":"<p>Web Component 有点东西</p>\n<h2 id=\"什么是-web-component\">什么是 Web Component</h2>\n<blockquote>\n<p>Web Components 是一套不同的技术，允许您创建可重用的定制元素（它们的功能封装在您的代码之外）并且在您的 web 应用中使用它们。--MDN</p>\n</blockquote>\n<p>简单来讲就是浏览器提供的原生<strong>组件复用</strong>方案。主要由三种技术方案实现：</p>\n<ul>\n<li><p>Custom elements（自定义元素）。可以用来定义标签（元素）</p>\n</li>\n<li><p>Shadow DOM（影子 DOM）。可以用来做样式隔离</p>\n</li>\n<li><p>HTML templates（HTML 模板）。可以实现组件拓展</p>\n</li>\n</ul>\n<h2 id=\"怎么用-web-component\">怎么用 Web Component</h2>\n<p>实现 Web Component 的<strong>最基本</strong>流程：</p>\n<ol>\n<li>使用<code>template</code>来定义一个<em>组件</em></li>\n</ol>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>我是头部<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<ol start=\"2\">\n<li>接着创建一个<em>类组件</em></li>\n</ol>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n    <span class=\"hljs-comment\">// attachShadow() 方法来将一个 shadow root 附加到任何一个元素上，该方法返回一个 shadow root 。</span>\n    <span class=\"hljs-keyword\">const</span> shadowRoot = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attachShadow</span>({ <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;closed&quot;</span> });\n    <span class=\"hljs-keyword\">const</span> template = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#mHeader&quot;</span>);\n    <span class=\"hljs-comment\">// 复制出一个新的节点</span>\n    <span class=\"hljs-keyword\">const</span> content = template.<span class=\"hljs-property\">content</span>.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>);\n    shadowRoot.<span class=\"hljs-title function_\">appendChild</span>(content);\n  }\n}\n</code></pre>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode\">Node.cloneNode(deep)</a> 方法返回调用该方法的节点的一个副本，参数<code>deep</code>表示是否复制子节点，默认值为<code>false</code></p>\n<ol start=\"3\">\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomElementRegistry/define\">CustomElementRegistry.define()</a> 方法注册自定义标签（元素）</li>\n</ol>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-comment\">/**\n * 注意，组件名是有限制的，MHeader、header1等都是不能用的，浏览器会报错\n * \n * web-component.html:33 Uncaught DOMException: Failed to execute &#x27;define&#x27; on &#x27;CustomElementRegistry&#x27;: &quot;header1&quot; is not a valid custom element name\n    at file:///Users/echo/Desktop/web-component.html:33:27\n */</span>\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">customElements</span>.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">&quot;m-header&quot;</span>, <span class=\"hljs-title class_\">MHeader</span>);\n</code></pre>\n<ol start=\"4\">\n<li>使用该<em>组件</em></li>\n</ol>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-comment\">&lt;!-- 使用的地方没有限制，自闭合也是可以的 --&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-header</span> /&gt;</span>\n</code></pre>\n<ol start=\"5\">\n<li>给组件加点样式</li>\n</ol>\n<p>可以直接在<code>template</code>里添加<code>style</code>标签</p>\n<p><code>:host选</code>择器可以选择组件的根元素</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">\n    <span class=\"hljs-selector-pseudo\">:host</span> {\n      <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">32px</span>;\n    }\n    <span class=\"hljs-selector-class\">.content</span> {\n      <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#f00</span>;\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>我是头部<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<ol start=\"6\">\n<li>加点属性试试 🤔</li>\n</ol>\n<p>需要在第 2 步在定义组件时用到<code>this.getAttribute</code>来获取传入的属性</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">const</span> title = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&quot;title&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (title) {\n      content.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#content&quot;</span>).<span class=\"hljs-property\">innerText</span> = title;\n    }\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}\n\n&lt;m-header title=<span class=\"hljs-string\">&quot;hello&quot;</span> /&gt;;\n</code></pre>\n<ol start=\"7\">\n<li>添加一些交互</li>\n</ol>\n<p>可以使用<code>querySelector</code>获取到<code>template</code>内部的一些元素来添加事件</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- ... --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>接着绑定事件</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// ...</span>\n    content.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#login&quot;</span>).<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;login&quot;</span>);\n    });\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}\n</code></pre>\n<ol start=\"8\">\n<li>与父组件的通信</li>\n</ol>\n<p>通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/CustomEvent\">CustomEvent</a>来进行通信</p>\n<p>完整代码</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">\n        <span class=\"hljs-selector-pseudo\">:host</span> {\n          <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">32px</span>;\n        }\n\n        <span class=\"hljs-selector-class\">.content</span> {\n          <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#f00</span>;\n        }\n      </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>我是头部<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n        <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-variable language_\">super</span>();\n          <span class=\"hljs-keyword\">const</span> shadowRoot = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attachShadow</span>({ <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;closed&quot;</span> });\n          <span class=\"hljs-keyword\">const</span> template = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#mHeader&quot;</span>);\n          <span class=\"hljs-keyword\">const</span> content = template.<span class=\"hljs-property\">content</span>.<span class=\"hljs-title function_\">cloneNode</span>(<span class=\"hljs-literal\">true</span>);\n          <span class=\"hljs-keyword\">const</span> title = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&quot;title&quot;</span>);\n          <span class=\"hljs-keyword\">if</span> (title) {\n            content.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#content&quot;</span>).<span class=\"hljs-property\">innerText</span> = title;\n          }\n          <span class=\"hljs-keyword\">const</span> myEvent = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&quot;login&quot;</span>, {\n            <span class=\"hljs-attr\">detail</span>: <span class=\"hljs-string\">&quot;这是子组件传过来的消息&quot;</span>,\n          });\n          <span class=\"hljs-keyword\">const</span> loginBtn = content.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#login&quot;</span>);\n          loginBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&quot;login&quot;</span>);\n          });\n          shadowRoot.<span class=\"hljs-title function_\">appendChild</span>(content);\n        }\n      }\n\n      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">customElements</span>.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">&quot;m-header&quot;</span>, <span class=\"hljs-title class_\">MHeader</span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2 id=\"未完待续\">未完待续</h2>\n<p>to be continued...</p>\n<h2 id=\"总结\">总结</h2>\n<p>Web Component 是浏览器提供的可以用于组件复用的方案，可以实现样式隔离，自定义属性、父子组件通信等功能，但书写起来有些不够便捷，需要用到原生 dom 操作 api</p>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">MDN-Web Components</a></p>\n<p><a href=\"https://github.com/mdn/web-components-examples\">MDN/web-components-examples</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode\">Node.cloneNode(deep)</a></p>\n"}},"__N_SSG":true}