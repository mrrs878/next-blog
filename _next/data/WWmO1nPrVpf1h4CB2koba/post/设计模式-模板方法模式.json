{"pageProps":{"post":{"title":"设计模式-模板方法模式","tags":["设计模式","模板方法模式"],"categories":"设计模式","description":"# WHAT\n\n模板方法是一种只需要使用继承就可以实现的较为简单的模式。\n\n模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常**在抽象父类中封装了子类的算法框架**，包括实现一些公共方法及**封装子类中所有方法的执行顺序**。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。\n\n符合 OCP 原则\n\n# WHY\n\n模板方法模式是一种典型的通","createDate":"2019-10-19 14:32:49","updateDate":"2022-09-05 21:27:09","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHAT</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>模板方法是一种只需要使用继承就可以实现的较为简单的模式。</p>\n<p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常<strong>在抽象父类中封装了子类的算法框架</strong>，包括实现一些公共方法及<strong>封装子类中所有方法的执行顺序</strong>。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p>\n<p>符合 OCP 原则</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHY</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。在传统的面向对象语 言中，一个运用了模板方法模式的程序中，子类的方法种类和执行顺序都是不变的，所以我们把 这部分逻辑抽象到父类的模板方法里面。而子类的方法具体怎么实现则是可变的，于是我们把这 部分变化的逻辑封装到子类中。通过增加新的子类，我们便能给系统增加新的功能，并不需要改动抽象父类以及其他子类，这也是符合开放-封闭原则的</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">HOW</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ul>\n<li><p>分离共同点</p>\n</li>\n<li><p>写父类(子类的共同点)，<strong>保证子类一定会实现(使用抛异常、抽象类/抽象方法、构造函数等来约束)</strong></p>\n</li>\n<li><p>写子类，继承父类，实现父类的方法</p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">传统继承实现</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-javascript\"><span class=\"hljs-comment\">// 抛异常约束版</span>\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Beverage</span> {\n  <span class=\"hljs-title function_\">boilWater</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;把水煮沸&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">brew</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;子类应该实现brew方法&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">pourInCup</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;子类应该实现pourInCup方法&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">addCondiments</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;子类应该实现addCondiments方法&quot;</span>);\n  }\n  <span class=\"hljs-comment\">/**\n   * 封装了饮料的算法框架\n   */</span>\n  <span class=\"hljs-title function_\">init</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">boilWater</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">brew</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">pourInCup</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">addCondiments</span>();\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Coffee</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Beverage</span> {\n  <span class=\"hljs-title function_\">brew</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;用沸水冲泡咖啡&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">pourInCup</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;把咖啡倒进杯子&quot;</span>);\n  }\n  <span class=\"hljs-title function_\">addCondiments</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;加糖和牛奶&quot;</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">let</span> coffee = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Coffee</span>();\ncoffee.<span class=\"hljs-title function_\">init</span>();\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">高阶函数实现</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>javascript 中，函数是一等公民，可以直接将函数传递进 init 中</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">beverage</span> = (<span class=\"hljs-params\">param</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">boilWater</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;把水煮沸&quot;</span>);\n  }\n\n  <span class=\"hljs-keyword\">const</span> brew = param.<span class=\"hljs-property\">brew</span> || (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;应该传入brew方法&quot;</span>);\n  })\n\n  <span class=\"hljs-keyword\">const</span> pourInCup = param.<span class=\"hljs-property\">pourInCup</span> || (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;应该传入pourInCup方法&quot;</span>);\n  })\n\n  <span class=\"hljs-keyword\">const</span> addCondiments = param.<span class=\"hljs-property\">addCondiments</span> || (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;应该传入addCondiments方法&quot;</span>);\n  })\n\n  <span class=\"hljs-comment\">/**\n   * 封装了饮料的算法框架\n   */</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">init</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n    <span class=\"hljs-title function_\">boilWater</span>();\n    <span class=\"hljs-title function_\">brew</span>();\n    <span class=\"hljs-title function_\">pourInCup</span>();\n    <span class=\"hljs-title function_\">addCondiments</span>();\n  }\n\n  <span class=\"hljs-keyword\">return</span> {\n    init\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> coffee = <span class=\"hljs-title function_\">beverage</span>({\n  <span class=\"hljs-attr\">brew</span>: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;用沸水冲泡咖啡&#x27;</span>);\n  },\n  <span class=\"hljs-attr\">pourInCup</span>: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;把咖啡倒进杯子&#x27;</span>);\n  },\n  <span class=\"hljs-attr\">addCondiments</span>: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;加糖和牛奶&#x27;</span>);\n  },\n})\n\ncoffee.<span class=\"hljs-title function_\">init</span>();\n</code></pre>\n"}},"__N_SSG":true}