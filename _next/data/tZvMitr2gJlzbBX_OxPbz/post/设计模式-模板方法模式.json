{"pageProps":{"post":{"title":"设计模式-模板方法模式","tags":["设计模式","模板方法模式"],"categories":"设计模式","description":"# WHAT\n\n模板方法是一种只需要使用继承就可以实现的较为简单的模式。\n\n模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法及封装**子类中所有方法的执行顺序**。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。\n\n符合 OCP 原则\n\n# WHY\n\n模板方法模式是一种典型的通过封装","createDate":"2019-10-19 14:32:49","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"what\">WHAT</h1>\n<p>模板方法是一种只需要使用继承就可以实现的较为简单的模式。</p>\n<p>模板方法模式由两部分结构组成，第一部分是抽象父类，第二部分是具体的实现子类。通常在抽象父类中封装了子类的算法框架，包括实现一些公共方法及封装<strong>子类中所有方法的执行顺序</strong>。子类通过继承这个抽象类，也继承了整个算法结构，并且可以选择重写父类的方法。</p>\n<p>符合 OCP 原则</p>\n<h1 id=\"why\">WHY</h1>\n<p>模板方法模式是一种典型的通过封装变化提高系统扩展性的设计模式。在传统的面向对象语 言中，一个运用了模板方法模式的程序中，子类的方法种类和执行顺序都是不变的，所以我们把 这部分逻辑抽象到父类的模板方法里面。而子类的方法具体怎么实现则是可变的，于是我们把这 部分变化的逻辑封装到子类中。通过增加新的子类，我们便能给系统增加新的功能，并不需要改 动抽象父类以及其他子类，这也是符合开放-封闭原则的</p>\n<h1 id=\"how\">HOW</h1>\n<ul>\n<li>分离共同点</li>\n<li>写父类(子类的共同点)，<strong>保证子类一定会实现(使用抛异常、抽象类/抽象方法、构造函数等来约束)</strong></li>\n<li>写子类，继承父类，实现父类的方法</li>\n</ul>\n<p>```javascript\n// 抛异常约束版\nclass Beverage {\n  boilWater() {\n    console.log(&quot;把水煮沸&quot;);\n  }\n  brew() {\n    throw new Error(&quot;子类应该实现brew方法&quot;);\n  }\n  pourInCup() {\n    throw new Error(&quot;子类应该实现pourInCup方法&quot;);\n  }\n  addCondiments() {\n    throw new Error(&quot;子类应该实现addCondiments方法&quot;);\n  }\n  /* template method */\n  init() {\n    this.boilWater();\n    this.brew();\n    this.pourInCup();\n    this.addCondiments();\n  }\n}</p>\n<p>class Coffee extends Beverage {\n  brew() {\n    console.log(&quot;用沸水冲泡咖啡&quot;);\n  }\n  pourInCup() {\n    console.log(&quot;把咖啡倒进杯子&quot;);\n  }\n  addCondiments() {\n    console.log(&quot;加糖和牛奶&quot;);\n  }\n}</p>\n<p>let coffee = new Coffee();\ncoffee.init();</p>\n<p>console.log(&quot;</p>\n"}},"__N_SSG":true}