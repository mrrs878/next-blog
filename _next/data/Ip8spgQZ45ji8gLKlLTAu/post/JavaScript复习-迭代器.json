{"pageProps":{"post":{"title":"JavaScript复习-迭代器","tags":["JavaScript","迭代器","Iterator"],"categories":"2021复习","description":"> 迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现 `Iterable` 接口的对象都有一个 `Symbol.iterator` 属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器 工厂，也就是一个函数，调用之后会产生一个实现 `Iterator` 接口的对象。 --<<JS 高程 4>>\n\n## 可迭代协议\n\n数据结构必须暴露一个属性作为**默认迭代器**，","createDate":"2021-05-12 14:32:07","updateDate":"2024-03-26 20:30:44","body":"<blockquote>\n<p>迭代器是一个可以由任意对象实现的接口，支持连续获取对象产出的每一个值。任何实现 <code>Iterable</code> 接口的对象都有一个 <code>Symbol.iterator</code> 属性，这个属性引用默认迭代器。默认迭代器就像一个迭代器 工厂，也就是一个函数，调用之后会产生一个实现 <code>Iterator</code> 接口的对象。 --&lt;&lt;JS 高程 4&gt;&gt;</p>\n</blockquote>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">可迭代协议</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>数据结构必须暴露一个属性作为<strong>默认迭代器</strong>，而且这个属性必须使用特殊的<code>Symbol.iterator</code>作为键，以一个迭代器工厂函数作为值（调用其会返回一个一个新迭代器）</p>\n<p>可迭代对象可使用的语言特性包括：</p>\n<ul>\n<li><code>for-of</code>循环</li>\n<li>数组解构</li>\n<li>扩展操作符</li>\n<li><code>Array.from()</code></li>\n<li>创建集合</li>\n<li>创建映射</li>\n<li><code>Promise.all()</code>接收由<code>Promise</code>组成的可迭代对象</li>\n<li><code>Promise.race()</code>接收由<code>Promise</code>组成的可迭代对象</li>\n<li><code>yield* </code>操作符，在生成器中使用</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">迭代器协议</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li>迭代器是一次性使用的对象</li>\n<li>迭代器 API 使用 <code>next</code> 方法在可迭代对象中遍历数据。每次成功调用 <code>next</code> ，都会返回一个 <code>IteratorResult</code> 对象，其中包含迭代器返回的下一个值。</li>\n<li>每个迭代器都表示对可迭代对象的一次性有序遍历。不同迭代器的实例相互之间没有关系，只会独立地遍历可迭代对象</li>\n<li>迭代器并不与可迭代对象某个时刻的快照绑定，而仅仅是使用游标来标记遍历可迭代对象的历程。如果可迭代对象在遍历期间被修改了，那么迭代器也会反应相应地变化</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Counter</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">limit</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">limit</span> = limit;\n  }\n  [<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]() {\n    <span class=\"hljs-keyword\">let</span> count = <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">next</span>: <span class=\"hljs-function\">() =&gt;</span> {\n        count += <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">return</span> {\n          <span class=\"hljs-attr\">done</span>: count &gt; <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">limit</span>,\n          <span class=\"hljs-attr\">value</span>: count,\n        };\n      },\n      <span class=\"hljs-attr\">return</span>: <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Exiting early&quot;</span>);\n        <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">done</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">undefined</span> };\n      },\n    };\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> counter = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Counter</span>(<span class=\"hljs-number\">6</span>);\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> counter) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n  <span class=\"hljs-keyword\">if</span> (value &gt;= <span class=\"hljs-number\">4</span>) <span class=\"hljs-keyword\">break</span>;\n}\n\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-comment\">// 4</span>\n<span class=\"hljs-comment\">// Exiting early</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">提前终止迭代器</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><code>for-of</code>循环通过<code>break</code>、<code>continue</code>、<code>return</code>、<code>throw</code>提前退出</li>\n<li>解构操作并未消费的值</li>\n</ul>\n<p>并非所有迭代器都是可关闭的，比如数组，因此可以<strong>实现从上次迭代结束的位置继续执行</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>];\n<span class=\"hljs-keyword\">const</span> iter = arr[<span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">iterator</span>]();\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> iter) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n  <span class=\"hljs-keyword\">if</span> (value &gt;= <span class=\"hljs-number\">3</span>) {\n    <span class=\"hljs-keyword\">break</span>;\n  }\n}\n\n<span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> value <span class=\"hljs-keyword\">of</span> iter) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(value);\n}\n\n<span class=\"hljs-comment\">// 1</span>\n<span class=\"hljs-comment\">// 2</span>\n<span class=\"hljs-comment\">// 3</span>\n<span class=\"hljs-comment\">// ###########</span>\n<span class=\"hljs-comment\">// 4</span>\n<span class=\"hljs-comment\">// 5</span>\n</code></pre>\n"}},"__N_SSG":true}