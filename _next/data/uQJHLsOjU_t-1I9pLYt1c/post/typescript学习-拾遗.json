{"pageProps":{"post":{"title":"typescript学习-拾遗","tags":["never"],"categories":"typescript","description":"`never` 类型是 TypeScript 中的底层类型。一些例子：\n\n- 一个从来不会有返回值的函数（如：如果函数内含有 `while(true) {}`）；\n- 一个总是会抛出错误的函数（如：`function foo() { throw new Error('Not Implemented') }`，`foo` 的返回类型是 `never`）；\n\n使用场景：详细的返回值检查\n``` t","createDate":"2021-10-08 13:20:35","updateDate":"2021-10-08 21:21:44","body":"<p><code>never</code> 类型是 TypeScript 中的底层类型。一些例子：</p>\n<ul>\n<li>一个从来不会有返回值的函数（如：如果函数内含有 <code>while(true) {}</code>）；</li>\n<li>一个总是会抛出错误的函数（如：<code>function foo() { throw new Error(&#39;Not Implemented&#39;) }</code>，<code>foo</code> 的返回类型是 <code>never</code>）；</li>\n</ul>\n<p>使用场景：详细的返回值检查</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">boolean</span> {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">// 如果不是一个 never 类型，这会报错：</span>\n  <span class=\"hljs-comment\">// - 不是所有条件都有返回值 （严格模式下）</span>\n  <span class=\"hljs-comment\">// - 或者检查到无法访问的代码</span>\n  <span class=\"hljs-comment\">// 但是由于 TypeScript 理解 `fail` 函数返回为 `never` 类型</span>\n  <span class=\"hljs-comment\">// 它可以让你调用它，因为你可能会在运行时用它来做安全或者详细的检查。</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fail</span>(<span class=\"hljs-string\">&#x27;Unexhaustive&#x27;</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fail</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">never</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(message);\n}\n</code></pre>\n<p>与 <code>void</code> 的差异：</p>\n<p><code>never</code> 表示一个从来不会优雅的返回的函数时，你可能马上就会想到与此类似的 <code>void</code>，然而实际上，<code>void</code> 表示没有任何类型，<code>never</code> 表示永远不存在的值的类型。</p>\n<p>当一个函数返回空值时，它的返回值为 <code>void</code> 类型，但是，当一个函数永不返回时（或者总是抛出错误），它的返回值为 <code>never</code> 类型。<code>void</code> 类型可以被赋值（在 <code>strictNullChecking</code> 为 <code>false</code>时），但是除了 <code>never</code> 本身以外，其他任何类型不能赋值给 <code>never</code></p>\n"}},"__N_SSG":true}