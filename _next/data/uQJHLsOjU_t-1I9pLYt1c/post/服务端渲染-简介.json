{"pageProps":{"post":{"title":"服务端渲染-简介","tags":["SSR"],"categories":"服务端渲染","description":"# 什么是SSR\r\n\r\n`SSR`(server side rendering)，服务端渲染。当后端/服务器接收到网络请求后，生成(渲染)`HTML`字符串，将它们直接发送到浏览器\r\n\r\n与之对立的则是`CSR`(client side rendering)，客户端渲染。后端不提供完整的`html`页面，而是提供一些`api`使得前端可以获取`json`数据，然后前端拿到`json`数据之","createDate":"2020-07-28 11:15:28","updateDate":"2020-10-16 17:32:50","body":"<h1 id=\"什么是ssr\">什么是SSR</h1>\n<p><code>SSR</code>(server side rendering)，服务端渲染。当后端/服务器接收到网络请求后，生成(渲染)<code>HTML</code>字符串，将它们直接发送到浏览器</p>\n<p>与之对立的则是<code>CSR</code>(client side rendering)，客户端渲染。后端不提供完整的<code>html</code>页面，而是提供一些<code>api</code>使得前端可以获取<code>json</code>数据，然后前端拿到<code>json</code>数据之后再在前端进行<code>html</code>页面拼接，然后展示在浏览器上。这种是客户端渲染。这样前端就可以专注<code>UI</code>的开发，后端专注逻辑开发。典型的应用是<code>SPA</code></p>\n<p><code>CSR</code>和<code>SSR</code>最大的区别在于前者的页面渲染是<code>JS</code>负责进行的，而后者是服务器端直接返回HTML让浏览器直接渲染</p>\n<h1 id=\"为什么要有ssr\">为什么要有SSR</h1>\n<p>传统CSR的弊端不容小觑：</p>\n<ul>\n<li>首屏加载缓慢</li>\n<li>对于SEO无能为力</li>\n</ul>\n<h1 id=\"怎么做ssr\">怎么做SSR</h1>\n<h2 id=\"原理基于reactjs\">原理(基于React.js)</h2>\n<ol>\n<li><p>编写一个简单的<code>React</code>组件</p>\n</li>\n<li><p>使用<code>react-dom/server</code>中的<code>renderToString</code>编译虚拟<code>DOM</code></p>\n</li>\n<li><p>将转换后的<code>DOM</code>插入<code>html</code>中返回给前端</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// containers/Home.js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Home</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>This is sanyuan<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  )\n}\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> <span class=\"hljs-title class_\">Home</span>\n\n<span class=\"hljs-comment\">// server/index.js</span>\n<span class=\"hljs-keyword\">import</span> express <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;express&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { renderToString } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom/server&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./containers/Home&#x27;</span>;\n\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\n<span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-title function_\">renderToString</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Home</span> /&gt;</span></span>);\n\napp.<span class=\"hljs-title function_\">get</span>(<span class=\"hljs-string\">&#x27;/&#x27;</span>, <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) {\n  res.<span class=\"hljs-title function_\">send</span>(\n  <span class=\"hljs-string\">`\n    &lt;html&gt;\n      &lt;head&gt;\n        &lt;title&gt;ssr&lt;/title&gt;\n      &lt;/head&gt;\n      &lt;body&gt;\n        &lt;div id=&quot;root&quot;&gt;<span class=\"hljs-subst\">${content}</span>&lt;/div&gt;\n      &lt;/body&gt;\n    &lt;/html&gt;\n  `</span>\n  );\n})\napp.<span class=\"hljs-title function_\">listen</span>(<span class=\"hljs-number\">3001</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;listen:3001&#x27;</span>)\n})\n</code></pre>\n</li>\n</ol>\n<p>此时已实现一个简单的SSR，但对于一些常见的场景如事件绑定无效，这时就需要进行了同构。所谓同构，通俗的讲，就是一套<code>React</code>代码在服务器上运行一遍，到达浏览器又运行一遍。<strong>服务端渲染完成页面结构，浏览器端渲染完成事件绑定</strong>。这样的话就需要浏览器去拉取额外的JS文件，由JS来完成一些复杂的事情</p>\n<ol start=\"4\">\n<li><p>使用<code>react-dom</code>关联<code>DOM</code>与<code>JS</code></p>\n</li>\n<li><p>使用<code>webpack</code>打包<code>JS</code></p>\n</li>\n<li><p>开启<code>express</code>的静态服务</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// client/index. js</span>\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">React</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">ReactDom</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;react-dom&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> <span class=\"hljs-title class_\">Home</span> <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;../containers/Home&#x27;</span>;\n\n<span class=\"hljs-title class_\">ReactDom</span>.<span class=\"hljs-title function_\">hydrate</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Home</span> /&gt;</span></span>, <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&#x27;root&#x27;</span>))\n\n<span class=\"hljs-comment\">// webpack.client.js</span>\n<span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;path&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> merge = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;webpack-merge&#x27;</span>);\n<span class=\"hljs-keyword\">const</span> config = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;./webpack.base&#x27;</span>);\n\n<span class=\"hljs-keyword\">const</span> clientConfig = {\n  <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,\n  <span class=\"hljs-attr\">entry</span>: <span class=\"hljs-string\">&#x27;./src/client/index.js&#x27;</span>,\n  <span class=\"hljs-attr\">output</span>: {\n    <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;index.js&#x27;</span>,\n    <span class=\"hljs-attr\">path</span>: path.<span class=\"hljs-title function_\">resolve</span>(__dirname, <span class=\"hljs-string\">&#x27;public&#x27;</span>)\n  },\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-title function_\">merge</span>(config, clientConfig);\n\n<span class=\"hljs-comment\">//webpack.base.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [{\n      <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js$/</span>,\n      <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>,\n      <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>,\n      <span class=\"hljs-attr\">options</span>: {\n        <span class=\"hljs-attr\">presets</span>: [<span class=\"hljs-string\">&#x27;@babel/preset-react&#x27;</span>,  [<span class=\"hljs-string\">&#x27;@babel/preset-env&#x27;</span>, {\n          <span class=\"hljs-attr\">targets</span>: {\n            <span class=\"hljs-attr\">browsers</span>: [<span class=\"hljs-string\">&#x27;last 2 versions&#x27;</span>]\n          }\n        }]]\n      }\n    }]\n  }\n}\n\n<span class=\"hljs-comment\">// package.json</span>\n<span class=\"hljs-string\">&quot;scripts&quot;</span>: {\n  <span class=\"hljs-string\">&quot;dev&quot;</span>: <span class=\"hljs-string\">&quot;npm-run-all --parallel dev:**&quot;</span>,\n  <span class=\"hljs-string\">&quot;dev:start&quot;</span>: <span class=\"hljs-string\">&quot;nodemon --watch build --exec node \\&quot;./build/bundle.js\\&quot;&quot;</span>,\n  <span class=\"hljs-string\">&quot;dev:build:server&quot;</span>: <span class=\"hljs-string\">&quot;webpack --config webpack.server.js --watch&quot;</span>,\n  <span class=\"hljs-string\">&quot;dev:build:client&quot;</span>: <span class=\"hljs-string\">&quot;webpack --config webpack.client.js --watch&quot;</span>\n}\n\n<span class=\"hljs-comment\">// server/index.js</span>\n<span class=\"hljs-keyword\">const</span> app = <span class=\"hljs-title function_\">express</span>();\napp.<span class=\"hljs-title function_\">use</span>(express.<span class=\"hljs-title function_\">static</span>(<span class=\"hljs-string\">&#x27;public&#x27;</span>));\n</code></pre>\n</li>\n</ol>\n<h2 id=\"三方框架\">三方框架</h2>\n<ul>\n<li><p><a href=\"https://nuxtjs.org/\">Nuxt.js</a>(基于<a href=\"https://cn.vuejs.org/index.html\">Vue.js</a>)</p>\n</li>\n<li><p><a href=\"https://nextjs.frontendx.cn/\">Next.js</a>(基于<a href=\"https://react.docschina.org\">React.js</a>)</p>\n</li>\n</ul>\n<p>Ref:</p>\n<p><a href=\"https://segmentfault.com/a/1190000020029159?utm_source=tag-newest\">从头开始，彻底理解服务端渲染原理(8千字汇总长文)</a></p>\n"}},"__N_SSG":true}