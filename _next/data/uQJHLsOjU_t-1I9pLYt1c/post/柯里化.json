{"pageProps":{"post":{"title":"柯里化","tags":["函数式编程","柯里化"],"categories":"awesome","description":"# WHAT\n\n柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术\n\n# WHY\n\n- 参数复用\n  如果是相同的参数，在计算之后不需要再次重新传参计算\n- 提前返回\n  多次调用多次内部判断，可以直接把第一次判断的结果返回外部接收\n- 延迟执行\n  缓存参数，避免重复的去执行程序，等真正需要结果的时候再执行\n\n# HOW\n\n## 参数复用\n\n常见于函数式编程(funct","createDate":"2019-10-16 20:48:43","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"what\">WHAT</h1>\n<p>柯里化是一种将使用多个参数的一个函数转换成一系列使用一个参数的函数的技术</p>\n<h1 id=\"why\">WHY</h1>\n<ul>\n<li>参数复用\n如果是相同的参数，在计算之后不需要再次重新传参计算</li>\n<li>提前返回\n多次调用多次内部判断，可以直接把第一次判断的结果返回外部接收</li>\n<li>延迟执行\n缓存参数，避免重复的去执行程序，等真正需要结果的时候再执行</li>\n</ul>\n<h1 id=\"how\">HOW</h1>\n<h2 id=\"参数复用\">参数复用</h2>\n<p>常见于函数式编程(functional programing)</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">add</span>(<span class=\"hljs-params\">x</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">y</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">z</span>) {\n      <span class=\"hljs-keyword\">return</span> x + y + z;\n    };\n  };\n}\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">add</span>(<span class=\"hljs-number\">1</span>)(<span class=\"hljs-number\">2</span>)(<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">// 6</span>\n</code></pre>\n<h2 id=\"提前返回\">提前返回</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">addEvent</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">addEventListener</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, type, fn, capture</span>) {\n      el.<span class=\"hljs-title function_\">addEventListener</span>(type, <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> fn.<span class=\"hljs-title function_\">call</span>(el, e), capture);\n    };\n  } <span class=\"hljs-keyword\">else</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">el, type, fn</span>) {\n      el.<span class=\"hljs-title function_\">attachEvent</span>(<span class=\"hljs-string\">&quot;on&quot;</span> + type, <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> fn.<span class=\"hljs-title function_\">call</span>(el, e));\n    };\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> elBind = <span class=\"hljs-title function_\">addEvent</span>();\n<span class=\"hljs-title function_\">elBind</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;button&quot;</span>), <span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-params\">e</span> =&gt;</span> <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(e), <span class=\"hljs-literal\">true</span>);\n</code></pre>\n<h2 id=\"延迟执行\">延迟执行</h2>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">curryScore</span>(<span class=\"hljs-params\">fn</span>) {\n  <span class=\"hljs-keyword\">let</span> _allScore = [];\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> fn.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-literal\">null</span>, _allScore);\n    <span class=\"hljs-keyword\">else</span> _allScore = _allScore.<span class=\"hljs-title function_\">concat</span>([].<span class=\"hljs-property\">slice</span>.<span class=\"hljs-title function_\">call</span>(<span class=\"hljs-variable language_\">arguments</span>));\n  };\n}\n<span class=\"hljs-keyword\">let</span> allScore = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> curryAllScore = <span class=\"hljs-title function_\">curryScore</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span>; ++i) allScore += <span class=\"hljs-variable language_\">arguments</span>[i];\n});\n\n<span class=\"hljs-title function_\">curryAllScore</span>(<span class=\"hljs-number\">2</span>);\n<span class=\"hljs-title function_\">curryAllScore</span>(<span class=\"hljs-number\">3</span>);\n<span class=\"hljs-title function_\">curryAllScore</span>(<span class=\"hljs-number\">4</span>);\n<span class=\"hljs-title function_\">curryAllScore</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(allScore);\n</code></pre>\n"}},"__N_SSG":true}