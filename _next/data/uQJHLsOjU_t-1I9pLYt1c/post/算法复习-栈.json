{"pageProps":{"post":{"title":"算法复习-栈","tags":["算法"],"categories":"2021复习","description":"## 最小栈\n\n[leetcode-最小栈](https://leetcode-cn.com/problems/min-stack/)\n\n``` js\nfunction MinStack() {\n  this.storage = [];\n  this.min = null;\n}\nMinStack.prototype.push = function (val) {\n  let preMin =","createDate":"2021-06-08 15:03:02","updateDate":"2021-06-08 23:03:06","body":"<h2 id=\"最小栈\">最小栈</h2>\n<p><a href=\"https://leetcode-cn.com/problems/min-stack/\">leetcode-最小栈</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">MinStack</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">storage</span> = [];\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span> = <span class=\"hljs-literal\">null</span>;\n}\n<span class=\"hljs-title class_\">MinStack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">push</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">val</span>) {\n  <span class=\"hljs-keyword\">let</span> preMin = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">if</span> (val &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span> || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span> === <span class=\"hljs-literal\">null</span>) {\n    preMin = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span>;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span> = val;\n  }\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">storage</span>.<span class=\"hljs-title function_\">push</span>({ val, preMin });\n};\n<span class=\"hljs-title class_\">MinStack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">pop</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> { val, preMin } = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">storage</span>.<span class=\"hljs-title function_\">pop</span>();\n  <span class=\"hljs-keyword\">if</span> (val &lt;= <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span>) <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span> = preMin;\n};\n<span class=\"hljs-title class_\">MinStack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">getMin</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">min</span>;\n};\n<span class=\"hljs-title class_\">MinStack</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> topNode = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">storage</span>[<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">storage</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n  <span class=\"hljs-keyword\">return</span> topNode ? topNode.<span class=\"hljs-property\">val</span> : <span class=\"hljs-literal\">undefined</span>;\n};\n</code></pre>\n<h2 id=\"有效的括号\">有效的括号</h2>\n<p><a href=\"https://leetcode-cn.com/problems/valid-parentheses/\">leetcode-有效的括号</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isValid</span>(<span class=\"hljs-params\">str</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> str !== <span class=\"hljs-string\">&#x27;string&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (str === <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">const</span> stack = [];\n  <span class=\"hljs-keyword\">const</span> left = <span class=\"hljs-regexp\">/\\(|\\[|\\{/</span>;\n  <span class=\"hljs-keyword\">const</span> right = <span class=\"hljs-regexp\">/\\)|\\]|\\}/</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; str.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (left.<span class=\"hljs-title function_\">test</span>(str[i])) stack.<span class=\"hljs-title function_\">push</span>(str[i]);\n    <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (right.<span class=\"hljs-title function_\">test</span>(str[i])) {\n      <span class=\"hljs-keyword\">const</span> top = stack[stack.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n      <span class=\"hljs-keyword\">if</span> (str[i] === <span class=\"hljs-string\">&#x27;)&#x27;</span> &amp;&amp; top === <span class=\"hljs-string\">&#x27;(&#x27;</span>) stack.<span class=\"hljs-title function_\">pop</span>();\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[i] === <span class=\"hljs-string\">&#x27;]&#x27;</span> &amp;&amp; top === <span class=\"hljs-string\">&#x27;[&#x27;</span>) stack.<span class=\"hljs-title function_\">pop</span>();\n      <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (str[i] === <span class=\"hljs-string\">&#x27;}&#x27;</span> &amp;&amp; top === <span class=\"hljs-string\">&#x27;{&#x27;</span>) stack.<span class=\"hljs-title function_\">pop</span>();\n      <span class=\"hljs-keyword\">else</span> stack.<span class=\"hljs-title function_\">push</span>(stack[i]);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>;\n}\n</code></pre>\n<h2 id=\"删除字符串中的所有相邻重复项\">删除字符串中的所有相邻重复项</h2>\n<p><a href=\"https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/\">leetcode-删除字符串中的所有相邻重复项</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeDuplicates</span>(<span class=\"hljs-params\">str</span>) {\n  <span class=\"hljs-keyword\">if</span> (str === <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-keyword\">if</span> (str.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">1</span>) <span class=\"hljs-keyword\">return</span> str;\n  <span class=\"hljs-keyword\">const</span> stack = [str[<span class=\"hljs-number\">0</span>]];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; str.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">const</span> prev = stack.<span class=\"hljs-title function_\">pop</span>();\n    <span class=\"hljs-keyword\">if</span> (prev !== str[i]) {\n      stack.<span class=\"hljs-title function_\">push</span>(prev);\n      stack.<span class=\"hljs-title function_\">push</span>(str[i]);\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n}\n</code></pre>\n<h2 id=\"删除字符串中的所有相邻重复项ii\">删除字符串中的所有相邻重复项II</h2>\n<p><a href=\"https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string-ii/\">lletcode-删除字符串中的所有相邻重复项II</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeNDuplicates</span>(<span class=\"hljs-params\">s, k</span>) {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">popN</span>(<span class=\"hljs-params\">stack, n</span>) {\n    <span class=\"hljs-keyword\">let</span> i = n;\n    <span class=\"hljs-keyword\">while</span> (i &gt; <span class=\"hljs-number\">0</span>) {\n      stack.<span class=\"hljs-title function_\">pop</span>();\n      i -= <span class=\"hljs-number\">1</span>;\n    }\n  }\n  <span class=\"hljs-keyword\">const</span> stack = [];\n  <span class=\"hljs-keyword\">let</span> n = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">if</span> (stack[stack.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>] === s[i]) {\n      n += <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      n = <span class=\"hljs-number\">0</span>;\n    }\n    stack.<span class=\"hljs-title function_\">push</span>(s[i]);\n    <span class=\"hljs-keyword\">if</span> (n === k - <span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-title function_\">popN</span>(stack, k);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">removeNDuplicates</span>(stack.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>) + s.<span class=\"hljs-title function_\">slice</span>(i + <span class=\"hljs-number\">1</span>), k);\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeNDuplicatesPerform</span>(<span class=\"hljs-params\">s, k</span>) {\n  <span class=\"hljs-keyword\">const</span> stack = [];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">const</span> pre = stack.<span class=\"hljs-title function_\">pop</span>();\n    <span class=\"hljs-keyword\">if</span> (!pre || pre[<span class=\"hljs-number\">0</span>] !== s[i]) {\n      stack.<span class=\"hljs-title function_\">push</span>(pre);\n      stack.<span class=\"hljs-title function_\">push</span>(s[i]);\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (pre.<span class=\"hljs-property\">length</span> &lt; k - <span class=\"hljs-number\">1</span>) {\n      stack.<span class=\"hljs-title function_\">push</span>(pre + s[i]);\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> stack.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27;&#x27;</span>);\n}\n</code></pre>\n<h2 id=\"翻转字符串里的单词\">翻转字符串里的单词</h2>\n<p><a href=\"https://leetcode-cn.com/problems/reverse-words-in-a-string/\">leetcode-翻转字符串里的单词</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reverseWords</span>(<span class=\"hljs-params\">s</span>) {\n  <span class=\"hljs-keyword\">if</span> (s === <span class=\"hljs-string\">&#x27;&#x27;</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">&#x27;&#x27;</span>;\n  <span class=\"hljs-keyword\">const</span> str = s.<span class=\"hljs-title function_\">trim</span>();\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-regexp\">/ /</span>.<span class=\"hljs-title function_\">test</span>(str)) <span class=\"hljs-keyword\">return</span> str;\n  <span class=\"hljs-keyword\">const</span> tmp = str.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>).<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> item !== <span class=\"hljs-string\">&#x27;&#x27;</span>).<span class=\"hljs-title function_\">reverse</span>();\n  <span class=\"hljs-keyword\">return</span> tmp.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&#x27; &#x27;</span>);\n}\n</code></pre>\n"}},"__N_SSG":true}