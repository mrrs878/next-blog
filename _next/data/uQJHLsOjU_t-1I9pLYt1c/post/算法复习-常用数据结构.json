{"pageProps":{"post":{"title":"算法复习-常用数据结构","tags":["算法"],"categories":"2021复习","description":"## 数组\n\n⼀组连续的储存结构，⽤来储存同⼀种类型的数据\n\n- 随机访问，O(1)\n- 对插入、删除不友好，O(n)\n\n``` js\nclass JSArray: public JSObject {}\n```\n\n`JSArray`是继承⾃`JSObject`的，所以在JavaScript中，数组可以是⼀个特殊的对象，内部也是以 `key-value`形式存储数据，所以JavaScript中的","createDate":"2021-06-08 13:35:13","updateDate":"2021-06-13 23:14:25","body":"<h2 id=\"数组\">数组</h2>\n<p>⼀组连续的储存结构，⽤来储存同⼀种类型的数据</p>\n<ul>\n<li>随机访问，O(1)</li>\n<li>对插入、删除不友好，O(n)</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">JSArray</span>: public <span class=\"hljs-title class_\">JSObject</span> {}\n</code></pre>\n<p><code>JSArray</code>是继承⾃<code>JSObject</code>的，所以在JavaScript中，数组可以是⼀个特殊的对象，内部也是以 <code>key-value</code>形式存储数据，所以JavaScript中的数组可以存放不同类型的值。</p>\n<p>JSArray有两种存储方式：</p>\n<ul>\n<li>fast，基于<code>FixedArray</code>，<code>push</code>和<code>pop</code>时可能会伴随着动态扩容或减容</li>\n<li>slow，基于<code>HashTable</code>，以数组下标作为<code>key</code></li>\n</ul>\n<p><code>FixedArray</code>是V8实现的⼀个类似于数组的类，它表示⼀段连续的内存，可以使⽤索引直接定位。新创建的空数组默认就是快数组。当数组满（数组的⻓度达到数组在内存中申请的内存容量最⼤值）的时候，继续<code>push</code>时，<code>JSArray</code>会进⾏动态的扩容，以存储更多的元素。当加⼊的索引值<code>index</code>⽐当前容量 <code>capacity</code>差值⼤于等于1024时（<code>index - capacity &gt;= 1024</code>）或快数组新容量是扩容后的容量3倍之多时，快数组会被转成慢数组</p>\n<p>慢数组以哈希表的形式存储在内存空间⾥，它不需要开辟连续的存储空间，但需要额外维护⼀个哈希表，与快数组相⽐，性能相对较差</p>\n<p><a href=\"https://blog.mrrs.top/blog/view/60bb53d1830576874275bbea\">常见算法题</a></p>\n<h2 id=\"栈\">栈</h2>\n<p>⼀种遵从后进先出<code>(LIFO / Last In First Out)</code>原则的有序集合</p>\n<p>JavaScript使用(调用)栈来管理函数<strong>执行上下⽂</strong>，它记录了当前函数执⾏的位置，哪个函数正在被执⾏。</p>\n<p>JavaScript基本类型保存在栈中</p>\n<p><a href=\"https://dashboard.blog.mrrs.top/articles/60bf86a67da910d68a85abdd\">常见算法题</a></p>\n<h2 id=\"链表\">链表</h2>\n<p>链表不需要连续的内存空间，它是由⼀组零散的内存块通过指针连接⽽成。JavaScript中可以通过数组来模拟栈</p>\n<p>链表有不同的结构，常见的有：</p>\n<ul>\n<li><p>单链表，节点有一个<code>next</code>属性，指向下一个节点。尾节点指向<code>null</code></p>\n</li>\n<li><p>双链表，节点有<code>next</code>和<code>pre</code>属性分别指向上一个和下一个节点</p>\n</li>\n<li><p>单循环链表，和单链表类似，不同的是单循环链表的尾节点指向的是头节点</p>\n</li>\n<li><p>查找：从头节点开始查找，时间复杂度为O(n)</p>\n</li>\n<li><p>插⼊或删除：在某⼀节点后插⼊或删除⼀个节点（后继节点）的时间复杂度为O(1)</p>\n</li>\n</ul>\n<p>常结合<strong>双指针</strong>来解决相关问题</p>\n<p><a href=\"https://blog.mrrs.top/blog/view/60bdaa0e8305760f4b75bbec\">常见算法题</a></p>\n<h2 id=\"队列\">队列</h2>\n<p>和栈类似，遵循先进先出 (FIFO) 原则的有序集合</p>\n<ul>\n<li>查找：从队头开始查找，从时间复杂度为O(n)</li>\n<li>插⼊或删除：进栈与出栈的时间复杂度为O(1)</li>\n</ul>\n<p>常用来实现<strong>滑动窗口</strong>来解决实际问题</p>\n<p><a href=\"https://blog.mrrs.top/blog/view/60bf851d7da910c98785abdc\">常见算法题</a></p>\n<h2 id=\"散列表\">散列表</h2>\n<p>解决线性表在查找时的性能问题O(nlgn)~O(n)</p>\n<p>通过<strong>散列算法</strong>，将<strong>key</strong>转换为<strong>散列值</strong>，而后通过散列值去<strong>散列表</strong>中查找</p>\n<p>🌰：通过学号010121可以知道对应的同学在1年级1班21号</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/hash.png\" alt=\"散列算法、key、散列值、散列表的关系\"></p>\n<h2 id=\"树\">树</h2>\n<p>一种非线性结构</p>\n<h3 id=\"bst\">BST</h3>\n<p>二叉搜索树</p>\n<p>在⼆叉树的基础上，增加了对⼆叉树上节点存储位置的限制：</p>\n<ul>\n<li>左子节点值小于父节点的值</li>\n<li>右节点的值大于父节点的值</li>\n</ul>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/bst.png\" alt=\"BST\"></p>\n<p>在理想情况下，⼆叉树每多⼀层，可以存储的元素都增加⼀倍。也就是说 n 个元素的⼆叉搜索树，对应的树⾼为 O(logn)。所以我们查找元素、插⼊元素的时间也为 O(logn)。当然这是理想情况下，但在实际应⽤中，并不是那么理想，例如⼀直递增或递减的给⼀个⼆叉查找树插⼊数据，那么所有插⼊的元素就会⼀直出现在⼀个树的左节点上，数型结构就会退化为链表结构，时间复杂度就会趋于 O(n)，这是不好的。</p>\n<p>AVL树用来解决这个问题</p>\n<h3 id=\"avl\">AVL</h3>\n<p>平衡搜索二叉树</p>\n<p>在二叉搜索树的基础上满⾜左右⼦树⾼度不⼤于1</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/avl.png\" alt=\"AVL\"></p>\n<h3 id=\"红黑树\">红黑树</h3>\n<p>红黑树也是一种特殊的二叉搜索树</p>\n<p>在二叉搜索树的基础上添加以下限制：</p>\n<ul>\n<li>节点是红⾊或⿊⾊</li>\n<li>根节点必须是⿊⾊节点</li>\n<li>所有的叶⼦节点都必须是值为<code>NULL</code>的⿊节点</li>\n<li>如果⼀个节点是红⾊的，则它两个⼦节点都是⿊⾊的</li>\n<li>从任⼀节点到达它的每个叶⼦节点的所有的路径，都有相同数⽬的⿊⾊节点</li>\n</ul>\n"}},"__N_SSG":true}