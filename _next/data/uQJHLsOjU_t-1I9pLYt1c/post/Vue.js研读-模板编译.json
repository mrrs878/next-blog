{"pageProps":{"post":{"title":"Vue.js研读-模板编译","tags":["Vue.js","模板编译"],"categories":"Vue.js","description":"## 模板编译\n\n模板编译的主要目标是**生成渲染函数**。而渲染函数的作用是每次执行它，它就会使用当前最新的状态生成一份新的vnode，然后使用这份vnode进行渲染。\n\n## 将模板编译成渲染函数\n\n- 将模板编译成AST（解析器）\n\n- 遍历AST标记静态节点（优化器）\n\n- 使用AST生成渲染函数（代码生成器）\n\n  ![模板编译整体流程](https://mrrsblog.oss-c","createDate":"2020-03-05 22:54:17","updateDate":"10/1/2021, 3:34:43 AM","body":"<h2 id=\"模板编译\">模板编译</h2>\n<p>模板编译的主要目标是<strong>生成渲染函数</strong>。而渲染函数的作用是每次执行它，它就会使用当前最新的状态生成一份新的vnode，然后使用这份vnode进行渲染。</p>\n<h2 id=\"将模板编译成渲染函数\">将模板编译成渲染函数</h2>\n<ul>\n<li><p>将模板编译成AST（解析器）</p>\n</li>\n<li><p>遍历AST标记静态节点（优化器）</p>\n</li>\n<li><p>使用AST生成渲染函数（代码生成器）</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/%E6%A8%A1%E6%9D%BF%E7%BC%96%E8%AF%91-0.png\" alt=\"模板编译整体流程\"></p>\n</li>\n</ul>\n<h2 id=\"解析器\">解析器</h2>\n<p>将模板编译成AST</p>\n<p>在解析器内部，分成了很多小解析器，其中包括过滤解析器、文本解析器和HTML解析器。然后再通过一条主线将这些解析器组装在一起。</p>\n<p>HTML解析器是解析器中最核心的模块，它的作用是解析HTML模板，每当解析到HTML标签的开始位置、结束位置、文本或注释时，都会<strong>触发钩子函数</strong>，然后将相关信息通过参数传递出来。在解析期间，使用栈来记录层级关系（触发start钩子函数时入栈，触发end钩子函数时出栈）。</p>\n<p>事实上，解析HTML模板的过程就是循环的过程，简单来说就是用HTML模板字符串来循环，每轮循环都从HTML模板中截取一小段字符串，然后重复上述过程👆，直到HTML模板被截成一个空字符串时结束。</p>\n<p>文本解析器的主要作用是对HTML解析器解析出来的文本进行二次加工，处理<strong>带变量</strong>的文本。HTML解析器在解析文本时并不会区分文本是否是带有变量的文本，如果是纯文本，不需要进行任何处理；但如果是带变量的文本那个需要使用文本解析器进一步解析。</p>\n<h2 id=\"优化器\">优化器</h2>\n<p>优化器的目标是遍历AST，检测出所有静态子树（永远不会变化的DOM节点）并给其打标记</p>\n<p>标记静态子树有两点好处：</p>\n<ul>\n<li>每次重新渲染时，不需要为静态子树创建新节点</li>\n<li>在虚拟DOM中打补丁的过程中可以跳过</li>\n</ul>\n<p>优化器内部实现主要有以下两个步骤：</p>\n<ol>\n<li><p>在AST中找出所有静态节点并打上标记（<code>static === true</code>）</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>我是一个静态节点<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n</code></pre>\n</li>\n<li><p>在AST中供找出所有静态根节点并打上标记（<code>staticRoot === true</code>）</p>\n<p>如果一个节点下边的所有<strong>子节点都是静态节点</strong>，并且它的<strong>父级是动态节点</strong>，那么它就是静态根节点</p>\n</li>\n</ol>\n<h2 id=\"代码生成器\">代码生成器</h2>\n<p>代码生成器是模板编译的最后一步，它的作用是将AST转换成渲染函数中的内容，这个内容称为<strong>代码字符串</strong>。之后交由渲染函数导出到外界。</p>\n<p>代码生成器其实就是字符串拼接的过程。通过递归AST来生成字符串，最先生成根节点，然后在子节点字符串生成后，将其拼接在根节点的参数中，子节点的子节点拼接在子节点的参数中，这样一层一层地拼接，直到最后拼接成完整的字符串。</p>\n<h2 id=\"渲染函数\">渲染函数</h2>\n<p>Vue.js通过将模板编译转换成渲染函数（render function）执行渲染函数就可以得到一个虚拟节点树，使用这个虚拟节点树就可以渲染界面。</p>\n"}},"__N_SSG":true}