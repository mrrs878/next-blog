{"pageProps":{"post":{"title":"函数式编程-容器/函子","tags":["函数式编程","容器/函子"],"categories":"函数式编程","description":"# 声明式编程(Declarative) vs 命令式编程(Imperative)\n\n- 命令式编程就是对硬件操作的抽象， 程序员需要通过指令，精确的告诉计算机干什么事情；声明式编程只会将需要什么告诉计算机，剩下的将交由计算机自行完成。\n- 声明式编程写表达式， 命令式编程写一步一步的指示\n\n# 容器(container)\n\n- 一个对象\n- 可以装载任意类型的值（大多数容器只有一个）\n- 使","createDate":"2019-10-16 13:43:11","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"声明式编程declarative-vs-命令式编程imperative\">声明式编程(Declarative) vs 命令式编程(Imperative)</h1>\n<ul>\n<li>命令式编程就是对硬件操作的抽象， 程序员需要通过指令，精确的告诉计算机干什么事情；声明式编程只会将需要什么告诉计算机，剩下的将交由计算机自行完成。</li>\n<li>声明式编程写表达式， 命令式编程写一步一步的指示</li>\n</ul>\n<h1 id=\"容器container\">容器(container)</h1>\n<ul>\n<li>一个对象</li>\n<li>可以装载任意类型的值（大多数容器只有一个）</li>\n<li>使用 of 替代 new</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Container</span> {\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">of</span>(<span class=\"hljs-params\">x</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Container</span>(x);\n  }\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">x</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__value</span> = x;\n  }\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Container</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-number\">3</span>)); <span class=\"hljs-comment\">//Container { __value: 3 }</span>\n</code></pre>\n<h1 id=\"函子functor\">函子(functor)</h1>\n<p>functor 是实现了 map 函数并遵守一些特定规则的容器类型</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Functor</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Container</span> {\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-params\">f</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Container</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-title function_\">f</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__value</span>));\n  }\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Functor</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-number\">3</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x + <span class=\"hljs-number\">3</span>));\n</code></pre>\n<h2 id=\"maybe\">Maybe</h2>\n<p>在 map 方法里设置了空值检查</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Maybe</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">x</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__value</span> = x;\n  }\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">of</span>(<span class=\"hljs-params\">x</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Maybe</span>(x);\n  }\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-params\">f</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__value</span> ? <span class=\"hljs-title class_\">Maybe</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-title function_\">f</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">__value</span>)) : <span class=\"hljs-title class_\">Maybe</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-literal\">null</span>);\n  }\n}\n\n<span class=\"hljs-title class_\">Maybe</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x);\n</code></pre>\n<h2 id=\"either\">Either</h2>\n<p>用于实现 if...else...，Either 函子内部有两个值，**左值(left)<strong>和</strong>右值(right)**，右值是正常情况下使用的值，左值是右值不存在的时候使用的默认值</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Either</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">Functor</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">left, right</span>) {\n    <span class=\"hljs-variable language_\">super</span>(<span class=\"hljs-literal\">null</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span> = left;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span> = right;\n  }\n  <span class=\"hljs-keyword\">static</span> <span class=\"hljs-title function_\">of</span>(<span class=\"hljs-params\">left, right</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Either</span>(left, right);\n  }\n  <span class=\"hljs-title function_\">map</span>(<span class=\"hljs-params\">f</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>\n      ? <span class=\"hljs-title class_\">Either</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>, <span class=\"hljs-title function_\">f</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>))\n      : <span class=\"hljs-title class_\">Either</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-title function_\">f</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">left</span>), <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">right</span>);\n  }\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Either</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x + <span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Either { __value: null, left: 5, right: 7 }</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Either</span>.<span class=\"hljs-title function_\">of</span>(<span class=\"hljs-number\">5</span>, <span class=\"hljs-literal\">null</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">x</span> =&gt;</span> x + <span class=\"hljs-number\">1</span>)); <span class=\"hljs-comment\">// Either { __value: null, left: 6, right: null }</span>\n</code></pre>\n<h2 id=\"io\">IO</h2>\n<h2 id=\"task\">Task</h2>\n"}},"__N_SSG":true}