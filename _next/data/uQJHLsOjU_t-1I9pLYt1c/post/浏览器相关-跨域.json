{"pageProps":{"post":{"title":"浏览器相关-跨域","tags":["跨域"],"categories":"浏览器","description":"# WHAT-什么是跨域及同源策略\n\n## 同源策略\n\n**同源策略**是一个重要的安全策略，它用于限制一个[origin](https://developer.mozilla.org/zh-CN/docs/Glossary/源)的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。\n\n如果两个 URL 的 [protocol](https://de","createDate":"2020-04-09 23:26:29","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"what-什么是跨域及同源策略\">WHAT-什么是跨域及同源策略</h1>\n<h2 id=\"同源策略\">同源策略</h2>\n<p><strong>同源策略</strong>是一个重要的安全策略，它用于限制一个<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E6%BA%90\">origin</a>的文档或者它加载的脚本如何能与另一个源的资源进行交互。它能帮助阻隔恶意文档，减少可能被攻击的媒介。</p>\n<p>如果两个 URL 的 <a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Protocol\">protocol</a>、<a href=\"https://developer.mozilla.org/en-US/docs/Glossary/port\">port</a> (如果有指定的话)和 <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/host\">host</a> 都相同的话，则这两个 URL 是<em>同源</em>。这个方案也被称为“协议/主机/端口元组”，或者直接是 “元组”。（“元组” 是指一组项目构成的整体，双重/三重/四重/五重/等的通用形式）。</p>\n<p><strong>同源策略限制内容有：</strong></p>\n<ul>\n<li>Cookie、LocalStorage、IndexedDB 等存储性内容</li>\n<li>DOM 节点</li>\n<li>AJAX 请求发送后，结果被浏览器拦截了</li>\n</ul>\n<p>但是有三个标签是允许跨域加载资源：</p>\n<ul>\n<li><code>&lt;img src=XXX&gt;</code></li>\n<li><code>&lt;link href=XXX&gt;</code></li>\n<li><code>&lt;script src=XXX&gt;</code></li>\n</ul>\n<h2 id=\"跨域\">跨域</h2>\n<p>当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。不同域之间相互请求资源就算做<strong>跨域</strong>。</p>\n<p>特别说明：</p>\n<ol>\n<li><p>如果是协议和端口造成的跨域问题，前端是无能为力的</p>\n</li>\n<li><p>在跨域问题上，仅仅是通过<strong>URL的首部</strong>来识别而不会根据域名对应的ip是否相同来判断。</p>\n</li>\n<li><p>请求跨域后，请求到底有没有发送出去：</p>\n<p>跨域不是请求发送不出去，请求能发送出去，服务端能接收到请求并正常的返回，只是结果被浏览器拦截了（同源策略）。</p>\n</li>\n<li><p>为什么通过表单的方式可以发起跨域请求，Ajax就不能？</p>\n<p>归根结底，跨域是因为了阻止用户读取到另一个域名下的内容，Ajax可以获取响应，浏览器任务这不安全所以拦截了响应；但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p>\n</li>\n</ol>\n<h1 id=\"why-为什么有同源策略\">WHY-为什么有同源策略</h1>\n<p><strong>安全</strong></p>\n<h1 id=\"how-跨域解决方案\">HOW-跨域解决方案</h1>\n<h2 id=\"jsonp\">JSONP</h2>\n<p>原理：利用<code>&lt;script&gt;</code>标签没有同源策略限制的漏洞，网页可以得到从其他源动态产生的JSON数据。JSONP请求一定需要对方的<strong>服务器支持</strong>。JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。缺点是<strong>仅支持get方法具有局限性,不安全可能会遭受XSS攻击。</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">jsonp</span>(<span class=\"hljs-params\">{ url, params, callback }</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">let</span> script = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;script&quot;</span>)\n        <span class=\"hljs-variable language_\">window</span>[callback] = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) {\n            <span class=\"hljs-title function_\">resolve</span>(data)\n            <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">removeChildren</span>(script)\n        }\n        params = { ...params, callback }\n        <span class=\"hljs-keyword\">let</span> arrs = []\n        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(params).<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> arrs.<span class=\"hljs-title function_\">push</span>(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${ key }</span>=<span class=\"hljs-subst\">${ params[key] }</span>`</span>))\n        script.<span class=\"hljs-property\">src</span> = <span class=\"hljs-string\">`<span class=\"hljs-subst\">${ url }</span>?<span class=\"hljs-subst\">${ arrs.join(<span class=\"hljs-string\">&#x27;&amp;&#x27;</span>) }</span>`</span>\n        <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(script)\n    })\n}\n</code></pre>\n<h2 id=\"cors\">CORS</h2>\n<p>CORS需要<strong>浏览器和后端同时支持</strong></p>\n<p>浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。</p>\n<p>服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。</p>\n<p>虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<strong>简单请求</strong>和<strong>复杂请求</strong>。</p>\n<h3 id=\"简单请求\">简单请求</h3>\n<p>只要<strong>同时满足</strong>以下条件，就属于简单请求：</p>\n<ol>\n<li>method=GET/POST/HEAD</li>\n<li>Content-Type=text/plain或multipart/form-data或application/x-www-form-urlencoded</li>\n<li>请求中的任意<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a> 对象均没有注册任何事件监听器；<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequestUpload\"><code>XMLHttpRequestUpload</code></a> 对象可以使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/XMLHttpRequest/upload\"><code>XMLHttpRequest.upload</code></a> 属性访问</li>\n</ol>\n<h3 id=\"复杂请求\">复杂请求</h3>\n<p> 复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为<strong>预检请求</strong>,该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。</p>\n<h2 id=\"postmessage\">postMessage</h2>\n<p>postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：</p>\n<ul>\n<li>页面和其打开的新窗口的数据传递</li>\n<li>多窗口之间消息传递</li>\n<li>页面与嵌套的iframe消息传递</li>\n<li>上面三个场景的跨域数据传递</li>\n</ul>\n<h2 id=\"websocket\">websocket</h2>\n<p>Websocket是HTML5的一个持久化协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。但是 <strong>WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据</strong>。同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。</p>\n<h2 id=\"nginx反向代理\">Nginx反向代理</h2>\n<p>实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。</p>\n"}},"__N_SSG":true}