{"pageProps":{"post":{"title":"React.js学习-hooks原理简析","tags":["hooks"],"categories":"React.js","description":"让我们从实现两个简单的hook入手来探究hooks原理\n\n> [示例代码](https://github.com/mrrs878/review)\n\n## useState\n\n`useState`用于在函数式组件中声明并保存一个变量，`useState`的使用是这样的：\n\n``` ts\nconst [count, setCount] = useState(0);\n\nconsole.log(cou","createDate":"2021-12-23 11:25:20","updateDate":"2021-12-23 21:56:54","body":"<p>让我们从实现两个简单的hook入手来探究hooks原理</p>\n<blockquote>\n<p><a href=\"https://github.com/mrrs878/review\">示例代码</a></p>\n</blockquote>\n<h2 id=\"usestate\">useState</h2>\n<p><code>useState</code>用于在函数式组件中声明并保存一个变量，<code>useState</code>的使用是这样的：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(count);\n\n<span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-title function_\">setCount</span>((pre) + pre + <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>有几个特点：</p>\n<ol>\n<li>接受一个函数或值作为变量的初始值</li>\n<li>返回一个数组(元组)，第一个参数是变量值，第二个参数是一个函数，可用来更新变量值</li>\n<li>返回的更新函数支持传入一个函数，改函数的参数是当前的变量值</li>\n</ol>\n<p>据此，可以实现一版简单的<code>useState</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n    <span class=\"hljs-comment\">// 没有考虑传入一个函数的情况</span>\n    <span class=\"hljs-keyword\">let</span> state = initialState;\n    \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n        state = newState;\n    }\n    \n    <span class=\"hljs-keyword\">return</span> [state, setState];\n}\n</code></pre>\n<p>但在使用的时候会发现，当调用<code>setCount</code>的时候，<code>count</code> 并不会变化，这是因为我们没有存储<code>state</code>，导致每次渲染组件的时候，<code>state</code>都会重新设置</p>\n<p>为解决这个问题，会自然而然地想到，把<code>state</code>提取出来，存在<code>useState</code>外面：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> _state;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n  _state = _state || initialState;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n    _state = <span class=\"hljs-keyword\">typeof</span> newState === <span class=\"hljs-string\">&#x27;function&#x27;</span> ? <span class=\"hljs-title function_\">newState</span>(_state) : newState;\n  };\n\n  <span class=\"hljs-keyword\">return</span> [\n    _state,\n    setState,\n  ];\n}\n</code></pre>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { renderHook, act } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useState_simple&#x27;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useState_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useState should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useState).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When the update function is called, the data is updated normally&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { result, rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>));\n\n    <span class=\"hljs-keyword\">const</span> [, setState] = result.<span class=\"hljs-property\">current</span>;\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-number\">2</span>);\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-keyword\">const</span> [state] = result.<span class=\"hljs-property\">current</span>;\n\n    <span class=\"hljs-title function_\">expect</span>(state).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<p>至此，实现了一个简单的<code>useState</code>，后边会进一步完善</p>\n<h2 id=\"useeffect\">useEffect</h2>\n<p><code>useEffect</code>的使用是这样的</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n});\n\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n}, [])\n\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n}, [deps])\n</code></pre>\n<p><code>useEffect</code>的使用有几个特点：</p>\n<ol>\n<li>有两个参数<code>callback</code>和<code>deps</code>数组</li>\n<li>如果<code>deps</code>不存在，那么<code>callback</code>在每次<code>render</code>时都会执行</li>\n<li>如果<code>deps</code>存在，只有当它发生了变化，<code>callback</code>才会执行</li>\n</ol>\n<p>根据使用方法和特点，可以做一个简单地实现：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">let</span> _deps;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, deps</span>) {\n  <span class=\"hljs-keyword\">const</span> hasNoDeps = !deps;\n  <span class=\"hljs-keyword\">const</span> hasChangeDeps = _deps\n    ? !deps?.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">dep, index</span>) =&gt;</span> _deps[index] === dep)\n    : <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangeDeps) {\n    <span class=\"hljs-title function_\">callback</span>();\n    _deps = deps;\n  }\n}\n</code></pre>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { renderHook, act } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useEffect_simple&#x27;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useEffect_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useEffect should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useEffect).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is empty, every rendering callback should be executed&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback));\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is an empty array, render multiple times but callback should only be called once&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback, []));\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is changed, callback should be called&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name }</span>) =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback, [name]), {\n      <span class=\"hljs-attr\">initialProps</span>: {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>,\n      },\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>({\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;jerry&#x27;</span>,\n      });\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<p>到这里，我们又实现了一个可以工作的丐版<code>useEffect</code>，hook貌似没有那么难</p>\n<h2 id=\"优化\">优化</h2>\n<p>我们上边实现的两个简单的hook存在一个致命缺点，在一个组件内只能使用一次，对此，我们可以将<code>_state</code>和<code>_deps</code>保存至一个全局数组<code>memoizedState </code>中，并用一个变量存储当前<code>memoizedState</code>下标</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> memoizedStates = []; <span class=\"hljs-comment\">// hooks存放在这个数组</span>\n<span class=\"hljs-keyword\">let</span> cursor = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 当前memoizedState下标</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n  memoizedStates[cursor] = memoizedStates[cursor] || initialState;\n\n  <span class=\"hljs-keyword\">const</span> currentCursor = cursor;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n    memoizedStates[currentCursor] = <span class=\"hljs-keyword\">typeof</span> newState === <span class=\"hljs-string\">&#x27;function&#x27;</span>\n      ? <span class=\"hljs-title function_\">newState</span>(memoizedStates[currentCursor])\n      : newState;\n  };\n\n  <span class=\"hljs-keyword\">const</span> res = [memoizedStates[cursor], setState];\n  cursor += <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, deps</span>) {\n  <span class=\"hljs-keyword\">const</span> hasNoDeps = deps === <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">const</span> preDeps = memoizedStates[cursor];\n  <span class=\"hljs-keyword\">const</span> hasChangedDeps = preDeps\n    ? !deps.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">dep, index</span>) =&gt;</span> dep === preDeps[index])\n    : <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangedDeps) {\n    <span class=\"hljs-title function_\">callback</span>();\n    memoizedStates[cursor] = deps;\n  }\n\n  cursor += <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resetCursor</span>(<span class=\"hljs-params\"></span>) {\n  cursor = <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resetMemoizedStates</span>(<span class=\"hljs-params\"></span>) {\n  memoizedStates = [];\n}\n</code></pre>\n<p><strong>Not Magic, just Arrays</strong></p>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { act, renderHook } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  resetCursor, useEffect, useState, resetMemoizedStates,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useState_useEffect&#x27;</span>;\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useState_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useState should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useState).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When the update function is called, the data is updated normally&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">usePeople</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-keyword\">const</span> [age, setAge] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n      <span class=\"hljs-keyword\">return</span> [age, setAge, name, setName];\n    };\n    <span class=\"hljs-keyword\">const</span> { result, rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">usePeople</span>());\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">1</span>](<span class=\"hljs-function\">(<span class=\"hljs-params\">pre</span>) =&gt;</span> pre + <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">3</span>](<span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>);\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>);\n  });\n});\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useEffect_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">resetCursor</span>();\n    <span class=\"hljs-title function_\">resetMemoizedStates</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useEffect should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useEffect).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Different DEPs, Callback calls should also be differentcalls should also be different&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callbackWithNoDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> callbackWithEmptyDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> callbackWithChangingDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n\n    <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&#x27;tom&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useProple</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithNoDeps);\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithEmptyDeps, []);\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithChangingDeps, [name]);\n    };\n\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useProple</span>());\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      name = <span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>;\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<h2 id=\"真正的react实现\">真正的React实现</h2>\n<p>虽然我们用数组基本实现了一个可用的Hooks，了解了Hooks的原理，但在React中，实现方式却有一些差异的。</p>\n<ol>\n<li>React中是通过类似单链表的形式来代替数组的。通过<code>next</code>按顺序串联所有的<code>hook</code></li>\n<li><code>memoizedState</code>，<code>cursor</code>是存在哪里的？如何和每个函数组件一一对应的？</li>\n</ol>\n<p>我们知道，React会生成一棵组件树（或Fiber单链表），树中每个节点对应了一个组件，hooks的数据就作为组件的一个信息，存储在这些节点上，<strong>伴随组件一起出生，一起死亡</strong>。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Hooks</span> = {\n    <span class=\"hljs-comment\">// others</span>\n    <span class=\"hljs-attr\">memoizedState</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-comment\">// useState中 保存 state 信息 ｜ useEffect 中 保存着 effect 对象 ｜ useMemo 中 保存的是缓存的值和 deps ｜ useRef 中保存的是 ref 对象</span>\n    <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">Hook</span> | <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// link 到下一个 hooks，通过 next 串联每一个hooks</span>\n}\n</code></pre>\n<h2 id=\"解惑\">解惑</h2>\n<p>Q. 为什么只能在函数最外层调用Hook，不要在循环、条件判断或者子函数中调用？</p>\n<p>A. <code>memoizedState</code>是按hook定义的顺序来放置数据的，如果hook顺序变化，<code>memoizedState</code>并不会感知到</p>\n<p>Q. 为什么<code>useEffect</code>第二个参数是空数组，在组件更新时回调只会执行一次？</p>\n<p>A. 因为依赖一直不变化，<code>callback</code>不会二次执行</p>\n<p>Q. 自定义的Hook是如何影响使用它的函数组件的？</p>\n<p>A. 共享同一个<code>memoizedState</code>，共享同一个顺序</p>\n<p>Q. Capture Value 特性是如何产生的？</p>\n<p>A. 每一次<code>rerender</code>的时候，都是重新去执行函数组件了，对于之前已经执行过的函数组件，并不会做任何操作。即<strong>每次渲染（执行），都有它自己的xxx</strong></p>\n"}},"__N_SSG":true}