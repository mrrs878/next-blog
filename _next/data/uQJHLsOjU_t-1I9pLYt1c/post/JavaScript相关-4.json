{"pageProps":{"post":{"title":"JavaScript相关-4","tags":["JavaScript"],"categories":"JavaScript","description":"## 模拟实现call、apply\n\n实现思路：\n\n- 不传入第一个参数，那么默认为`window`\n- 改变了`this`指向，让新对象可以执行该函数，那个思路可以变成给新对象添加一个函数，然后在执行完成之后删除\n\n``` javascript\nFunction.prototype.myCall = function (context) {\n  context = context || wi","createDate":"2020-02-17 22:25:05","updateDate":"10/1/2021, 3:34:43 AM","body":"<h2 id=\"模拟实现call、apply\">模拟实现call、apply</h2>\n<p>实现思路：</p>\n<ul>\n<li>不传入第一个参数，那么默认为<code>window</code></li>\n<li>改变了<code>this</code>指向，让新对象可以执行该函数，那个思路可以变成给新对象添加一个函数，然后在执行完成之后删除</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">myCall</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">context</span>) {\n  context = context || <span class=\"hljs-variable language_\">window</span>\n  context.<span class=\"hljs-property\">fn</span> = <span class=\"hljs-variable language_\">this</span>\n  <span class=\"hljs-keyword\">const</span> args = [...<span class=\"hljs-variable language_\">arguments</span>].<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">const</span> result = context.<span class=\"hljs-title function_\">fn</span>(...args)\n  <span class=\"hljs-keyword\">delete</span> context.<span class=\"hljs-property\">fn</span>\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">myApply</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) {\n  context = context || <span class=\"hljs-variable language_\">window</span>\n  context.<span class=\"hljs-property\">fn</span> = <span class=\"hljs-variable language_\">this</span>\n  <span class=\"hljs-keyword\">const</span> result = <span class=\"hljs-variable language_\">arguments</span>[<span class=\"hljs-number\">1</span>] ? context.<span class=\"hljs-title function_\">fn</span>(...<span class=\"hljs-variable language_\">arguments</span>[<span class=\"hljs-number\">1</span>]) : context.<span class=\"hljs-title function_\">fn</span>()\n  <span class=\"hljs-keyword\">delete</span> context.<span class=\"hljs-property\">fn</span>\n  <span class=\"hljs-keyword\">return</span> result\n}\n\n<span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">myBind</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">context</span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span> !== <span class=\"hljs-string\">&#x27;function&#x27;</span>)\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&quot;error&quot;</span>)\n  <span class=\"hljs-keyword\">const</span> that = <span class=\"hljs-variable language_\">this</span>\n  <span class=\"hljs-keyword\">const</span> args = [...<span class=\"hljs-variable language_\">arguments</span>].<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>)\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">F</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span> <span class=\"hljs-keyword\">instanceof</span> F) {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">that</span>(...args, ...<span class=\"hljs-variable language_\">arguments</span>)\n    }\n    <span class=\"hljs-keyword\">return</span> that.<span class=\"hljs-title function_\">apply</span>(context, args.<span class=\"hljs-title function_\">concat</span>(...<span class=\"hljs-variable language_\">arguments</span>))\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> tom = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tom&quot;</span>,\n  say (tmp1, tmp2) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">name</span>, tmp1, tmp2);\n  }\n}\n<span class=\"hljs-keyword\">const</span> jack = {\n  <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;jack&quot;</span>\n}\n\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">myCall</span>(jack, <span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>)\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">call</span>(jack, <span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>)\n\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">myApply</span>(jack, [<span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>])\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">apply</span>(jack, [<span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>])\n\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">myBind</span>(jack)(<span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>)\ntom.<span class=\"hljs-property\">say</span>.<span class=\"hljs-title function_\">bind</span>(jack)(<span class=\"hljs-string\">&quot;111&quot;</span>, <span class=\"hljs-string\">&quot;222&quot;</span>)\n\n<span class=\"hljs-comment\">// jack 111 222</span>\n<span class=\"hljs-comment\">// jack 111 222</span>\n<span class=\"hljs-comment\">// jack 111 222</span>\n<span class=\"hljs-comment\">// jack 111 222</span>\n<span class=\"hljs-comment\">// jack 111 222</span>\n<span class=\"hljs-comment\">// jack 111 222</span>\n</code></pre>\n<h2 id=\"promise-实现\">Promise 实现</h2>\n<p><code>Promise</code>是ES6新增的语法，解决了回调地狱的问题。可以把<code>Promise</code>看作是一个状态机，可以通过函数<code>resolve</code>和<code>reject</code>将状态转变为<code>resolved</code>或<code>rejected</code>，状态一旦转变就不能再次变化</p>\n<p><code>then</code>函数会返回一个新的<code>Promise</code>实例。因为<code>Promise</code>规范规定除了<code>pending</code>状态，其他状态是不可以改变的，如果返回的是一个相同实例的话，多个<code>then</code>调用就失去意义了</p>\n<p>对于<code>then</code>，本质上可以把它看成是<code>flatMap</code></p>\n<h2 id=\"proxy\">Proxy</h2>\n<p>proxy是ES6中新增的功能，用来定义对象中的操作</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onwatch</span>(<span class=\"hljs-params\">obj, setBind, getLogger</span>) {\n  <span class=\"hljs-keyword\">const</span> handler = {\n    <span class=\"hljs-title function_\">get</span>(<span class=\"hljs-params\">target, property, receiver</span>) {\n      <span class=\"hljs-title function_\">getLogger</span>(target, property)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">get</span>(target, property, receiver)\n    },\n    <span class=\"hljs-title function_\">set</span>(<span class=\"hljs-params\">target, property, value</span>) {\n      <span class=\"hljs-title function_\">setBind</span>(target, property, value)\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">set</span>(target, property, value)\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Proxy</span>(obj, handler)\n}\n\n<span class=\"hljs-keyword\">let</span> obj = { <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">1</span> }\n<span class=\"hljs-keyword\">let</span> p = <span class=\"hljs-title function_\">onwatch</span>(obj, <span class=\"hljs-function\">(<span class=\"hljs-params\">target, property, value</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`set <span class=\"hljs-subst\">${ property }</span> = <span class=\"hljs-subst\">${ value }</span>`</span>);\n}, <span class=\"hljs-function\">(<span class=\"hljs-params\">target, property</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`get <span class=\"hljs-subst\">${ property }</span> = <span class=\"hljs-subst\">${ target[property] }</span>`</span>);\n})\n\np.<span class=\"hljs-property\">a</span> = <span class=\"hljs-number\">2</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(p.<span class=\"hljs-property\">a</span>);\n\n<span class=\"hljs-comment\">// set a = 2</span>\n<span class=\"hljs-comment\">// get a = 2</span>\n</code></pre>\n<h2 id=\"正则表达式\">正则表达式</h2>\n<p><strong>元字符</strong></p>\n<p>| 元字符 |             作用             |\n| :</p>\n"}},"__N_SSG":true}