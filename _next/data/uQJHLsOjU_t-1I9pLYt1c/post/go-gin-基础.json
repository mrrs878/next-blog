{"pageProps":{"post":{"title":"go-gin-基础","tags":["go","gin"],"categories":"go","description":"# 获取`GET` `path`参数\n``` go\n  func main() {\n    r := gin.Default()\n    r.GET(\"/index/:id\", func(context *gin.Context){\n      r.JOSN(http.StatusOK, gin.H{\n        \"id\": context.Param(\"id\"),\n      })","createDate":"2020-01-14 14:05:44","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"获取get-path参数\">获取<code>GET</code> <code>path</code>参数</h1>\n<pre><code class=\"hljs language-go\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n    r := gin.Default()\n    r.GET(<span class=\"hljs-string\">&quot;/index/:id&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(context *gin.Context)</span></span>{\n      r.JOSN(http.StatusOK, gin.H{\n        <span class=\"hljs-string\">&quot;id&quot;</span>: context.Param(<span class=\"hljs-string\">&quot;id&quot;</span>),\n      })\n    })\n  }\n</code></pre>\n<h1 id=\"获取post-raw-json参数\">获取<code>POST</code> <code>raw json</code>参数</h1>\n<ol>\n<li>定义一个公用<code>struct</code>，用于标准返回数据格式<pre><code class=\"hljs language-go\">  <span class=\"hljs-keyword\">type</span> ResBodyS <span class=\"hljs-keyword\">struct</span> {\n ErrCode <span class=\"hljs-type\">int</span> <span class=\"hljs-string\">`json:&quot;errCode&quot;`</span>\n Desc <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;description&quot; binding:&quot;required&quot;`</span> <span class=\"hljs-comment\">//参数存在性校验</span>\n  }\n</code></pre>\n</li>\n<li>定义针对于特定接口的<code>struct</code><pre><code class=\"hljs language-go\">  <span class=\"hljs-keyword\">type</span> IndexReqBodyS <span class=\"hljs-keyword\">struct</span> {\n ResBodyS\n Data <span class=\"hljs-type\">string</span> <span class=\"hljs-string\">`json:&quot;index&quot;`</span>\n  }\n</code></pre>\n</li>\n<li>使用<code>context.BindJSON()</code>解析请求中的body参数<pre><code class=\"hljs language-go\">  <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">main</span><span class=\"hljs-params\">()</span></span> {\n r := gin,Default()\n r.POST(<span class=\"hljs-string\">&quot;/index&quot;</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">(context *gin.Context)</span></span>{\n   <span class=\"hljs-keyword\">var</span> reqInfo IndexReqBodyS\n   err := context.BindJSON(&amp;reqInfo)\n   <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n     fmt.PrintFln(<span class=\"hljs-string\">&quot;parse json data error! err:&quot;</span>, err)\n     <span class=\"hljs-keyword\">return</span>\n   }\n   context.JSON(http.StatusOK, reqInfo)\n })\n r.Run(<span class=\"hljs-string\">&quot;:9090&quot;</span>)\n  }\n</code></pre>\n</li>\n</ol>\n<h1 id=\"捕获异常\">捕获异常</h1>\n<p>在 Go 中异常就是<code>panic</code>，它是在程序运行的时候抛出的，当<code>panic</code>抛出之后，如果在程序里没有添加任何保护措施的话，控制台就会在打印出<code>panic</code>的详细情况，然后终止运行。\n当程序发生<code>panic</code>后，在<code>defer</code>(延迟函数) 内部可以调用<code>recover</code>进行捕获。</p>\n<pre><code class=\"hljs language-go\">  <span class=\"hljs-keyword\">defer</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span><span class=\"hljs-params\">()</span></span> {\n    err := <span class=\"hljs-built_in\">recover</span>();\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n      fmp.Println(err)\n    }\n  }\n</code></pre>\n<h1 id=\"单元测试\">单元测试</h1>\n<p>使用<code>net/http/httptest</code>包\n与原生测试相比，使用<code>gin.Engine.ServeHTTP</code>发送请求(原生使用<code>http.HandlerFunc.ServeHTTP</code>)</p>\n<pre><code class=\"hljs language-go\"><span class=\"hljs-keyword\">var</span> engine *gin.Engine\n\n<span class=\"hljs-keyword\">const</span> accessToken = <span class=\"hljs-string\">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODA5OTE1NTUsInVzZXJfaWQiOjE4LCJuYW1lIjoidGVzdDEifQ.900X9t3qveW0NGn3_FhYxHXlgsLAdl1BkjfKxNlBNyE&quot;</span>\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateRequest</span><span class=\"hljs-params\">(method constant.HttpRequestMethod, url <span class=\"hljs-type\">string</span>, params <span class=\"hljs-keyword\">interface</span>{})</span></span> (status constant.ResultCode, resBody *util.ResS, returnError <span class=\"hljs-type\">error</span>) {\n    <span class=\"hljs-keyword\">if</span> engine == <span class=\"hljs-literal\">nil</span> {\n        gin.SetMode(gin.ReleaseMode)\n        engine = gin.New()\n        database.SetUpDatabase()\n        controller.SetupRouter(engine)\n    }\n\n    <span class=\"hljs-keyword\">var</span> (\n        rr        = httptest.NewRecorder()\n        req       = <span class=\"hljs-built_in\">new</span>(http.Request)\n        err <span class=\"hljs-type\">error</span> = <span class=\"hljs-literal\">nil</span>\n    )\n    <span class=\"hljs-keyword\">if</span> params != <span class=\"hljs-literal\">nil</span> {\n        tmp, err := json.Encode(params)\n        <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n            <span class=\"hljs-keyword\">return</span> constant.FAILED, <span class=\"hljs-literal\">nil</span>, err\n        }\n        req, err = http.NewRequest(<span class=\"hljs-type\">string</span>(method), url, bytes.NewBuffer([]<span class=\"hljs-type\">byte</span>(tmp)))\n    } <span class=\"hljs-keyword\">else</span> {\n        req, err = http.NewRequest(<span class=\"hljs-type\">string</span>(method), url, <span class=\"hljs-literal\">nil</span>)\n    }\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> constant.FAILED, <span class=\"hljs-literal\">nil</span>, err\n    }\n\n    req.Header.Add(<span class=\"hljs-string\">&quot;Authorization&quot;</span>, fmt.Sprintf(<span class=\"hljs-string\">&quot;Bear %s&quot;</span>, accessToken))\n    engine.ServeHTTP(rr, req)\n\n    formatRes := util.ResS{}\n    err = json.Decode(rr.Body.Bytes(), &amp;formatRes)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">return</span> constant.FAILED, <span class=\"hljs-literal\">nil</span>, err\n    }\n    <span class=\"hljs-keyword\">return</span> constant.SUCCESS, &amp;formatRes, <span class=\"hljs-literal\">nil</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">func</span> <span class=\"hljs-title\">CreateTest</span><span class=\"hljs-params\">(t *testing.T, method constant.HttpRequestMethod, url <span class=\"hljs-type\">string</span>, params <span class=\"hljs-keyword\">interface</span>{})</span></span> {\n    _, resBody, err := CreateRequest(method, url, params)\n    <span class=\"hljs-keyword\">if</span> err != <span class=\"hljs-literal\">nil</span> {\n        t.Errorf(<span class=\"hljs-string\">&quot;got error: %s&quot;</span>, err.Error())\n        <span class=\"hljs-keyword\">return</span>\n    }\n    <span class=\"hljs-keyword\">if</span> resBody != <span class=\"hljs-literal\">nil</span> {\n        <span class=\"hljs-keyword\">if</span> resBody.Code != constant.SUCCESS {\n            t.Errorf(<span class=\"hljs-string\">&quot;GetInfo test failed, got: %v, info: %s&quot;</span>, resBody.Data, resBody.Message)\n        }\n    }\n}\n</code></pre>\n"}},"__N_SSG":true}