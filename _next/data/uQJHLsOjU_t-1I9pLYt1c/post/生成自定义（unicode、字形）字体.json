{"pageProps":{"post":{"title":"生成自定义（unicode、字形）字体","tags":["反爬虫","字体","安全"],"categories":"反爬虫","description":"原理(流程)：基于[opentype.js](https://opentype.js.org/)从源字体中提取出特定的字符，按照一定的规则对字符的字形做出变换，输出一套新的字体\n\n变换规则：根据`strength`和`distance`调整`glyph.path.command`的坐标点\n\n基于[opentype.js](https://opentype.js.org)\n\n``` js\nimp","createDate":"2022-01-08 09:38:17","updateDate":"2022-01-08 18:05:37","body":"<p>原理(流程)：基于<a href=\"https://opentype.js.org/\">opentype.js</a>从源字体中提取出特定的字符，按照一定的规则对字符的字形做出变换，输出一套新的字体</p>\n<p>变换规则：根据<code>strength</code>和<code>distance</code>调整<code>glyph.path.command</code>的坐标点</p>\n<p>基于<a href=\"https://opentype.js.org\">opentype.js</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> opentype <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;opentype.js&#x27;</span>; \n<span class=\"hljs-keyword\">import</span> { clone } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ramda&#x27;</span>\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Chance</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chance&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> snapX = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> snapY = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> snapDistance = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// 随机数生成器</span>\n<span class=\"hljs-keyword\">const</span> chance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chance</span>();\n\n<span class=\"hljs-comment\">// 调整path点</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">snap</span>(<span class=\"hljs-params\">v, distance, strength</span>) {\n    <span class=\"hljs-keyword\">return</span> (v * (<span class=\"hljs-number\">1.0</span> - strength)) + (strength * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(v / distance) * distance);\n}\n\n<span class=\"hljs-comment\">// 对每个字符的字形做调整</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSnap</span>(<span class=\"hljs-params\">sourcePath, options</span>) {\n    <span class=\"hljs-keyword\">const</span> { snapStrength, snapDistance, snapPathCmdCnt } = options;\n    <span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-title function_\">clone</span>(sourcePath);\n    <span class=\"hljs-keyword\">if</span> (!path?.<span class=\"hljs-property\">commands</span>) <span class=\"hljs-keyword\">return</span> path;\n\n    <span class=\"hljs-keyword\">const</span> cursorLeft = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">max</span>: path.<span class=\"hljs-property\">commands</span>.<span class=\"hljs-property\">length</span> - snapPathCmdCnt });\n    <span class=\"hljs-keyword\">const</span> cursorRight = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: cursorLeft, <span class=\"hljs-attr\">max</span>: cursorLeft + snapPathCmdCnt });\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = cursorLeft; i &lt; cursorRight; i += <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">const</span> cmd = path?.<span class=\"hljs-property\">commands</span>?.[i];\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> !== <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;Q&#x27;</span> || cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;C&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x1</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x1</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y1</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y1</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;C&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x2</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x2</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y2</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y2</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> path;\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@description</span>: TTF变码，基于一种字体，生成另一种新字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} sourceFontPath 源字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} words 要转换的字\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string|Array&lt;string&gt;</span>} newFontPath 转换后的字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">SnapConfiguration</span>} snapConfig 字形变化配置\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} 转换规则(映射表)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateFont</span>(<span class=\"hljs-params\">sourceFontPath, words, newFontPath, snapConfig</span>) {\n    <span class=\"hljs-comment\">// 保存字符和unicode的映射关系</span>\n    <span class=\"hljs-keyword\">const</span> result = {};\n    <span class=\"hljs-keyword\">const</span> sourceFont = opentype.<span class=\"hljs-title function_\">loadSync</span>(sourceFontPath);\n\n    <span class=\"hljs-keyword\">const</span> notdefGlyph = <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Glyph</span>({\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;.notdef&#x27;</span>,\n        <span class=\"hljs-attr\">advanceWidth</span>: sourceFont.<span class=\"hljs-title function_\">getAdvanceWidth</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>),\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Path</span>(),\n    });\n\n    <span class=\"hljs-keyword\">const</span> snapStrength = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">10</span> });\n\n    <span class=\"hljs-comment\">// 生成新的字形</span>\n    <span class=\"hljs-comment\">// sourceFont.stringToGlyphs(words) 提取出要转换的字符的字形</span>\n    <span class=\"hljs-keyword\">const</span> subGlyphs = sourceFont.<span class=\"hljs-title function_\">stringToGlyphs</span>(words).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">glyph, index</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> word = words[index];\n        <span class=\"hljs-comment\">// 针对反爬虫需求，每个字符需要生成新的unicode</span>\n        <span class=\"hljs-keyword\">const</span> unicode = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">255</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">65536</span> });\n        <span class=\"hljs-keyword\">const</span> { consistent, isSnap, snapPathCmdCnt } = snapConfig;\n        <span class=\"hljs-keyword\">let</span> path = glyph.<span class=\"hljs-property\">path</span>;\n        \n        <span class=\"hljs-keyword\">if</span> (isSnap) {\n            <span class=\"hljs-comment\">// 每个字符共用一套字形变换配置or相互独立</span>\n            <span class=\"hljs-keyword\">const</span> snapConfiguration = consistent\n                ?   {   \n                        snapDistance,\n                        snapStrength,\n                        snapPathCmdCnt,\n                    }\n                :   { \n                        snapPathCmdCnt,\n                        snapDistance,\n                        <span class=\"hljs-attr\">snapStrength</span>: chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">10</span> }),\n                    }\n            path = <span class=\"hljs-title function_\">doSnap</span>(glyph.<span class=\"hljs-property\">path</span>, snapConfiguration);\n        }\n        \n        <span class=\"hljs-comment\">// 保存映射关系</span>\n        result[word] = <span class=\"hljs-string\">`&amp;#x<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Number</span>(unicode).toString(<span class=\"hljs-number\">16</span>)}</span>;`</span>;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Glyph</span>({\n            <span class=\"hljs-attr\">index</span>: index + <span class=\"hljs-number\">1</span>,\n            unicode,\n            <span class=\"hljs-attr\">name</span>: word,\n            path,\n            <span class=\"hljs-attr\">advanceWidth</span>: glyph.<span class=\"hljs-property\">advanceWidth</span>,\n        });\n    });\n\n    <span class=\"hljs-keyword\">const</span> { unitsPerEm, ascender, descender } = sourceFont;\n\n    <span class=\"hljs-comment\">// 生成新的字体文件</span>\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Font</span>({\n        <span class=\"hljs-attr\">familyName</span>: <span class=\"hljs-string\">&#x27;yqn-font&#x27;</span>,\n        <span class=\"hljs-attr\">styleName</span>: <span class=\"hljs-string\">&#x27;Medium&#x27;</span>,\n        unitsPerEm,\n        ascender,\n        descender,\n        <span class=\"hljs-attr\">glyphs</span>: [notdefGlyph, ...subGlyphs],\n    });\n\n    <span class=\"hljs-comment\">// 可能需要保存多份字体文件（不同格式，做浏览器兼容）</span>\n    <span class=\"hljs-keyword\">const</span> outputPath = [newFontPath].<span class=\"hljs-title function_\">flat</span>();\n    outputPath?.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">path</span>) =&gt;</span> {\n        res.<span class=\"hljs-title function_\">download</span>(path);\n    });\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">// 输出映射关系到单独的文件中</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">saveRule</span>(<span class=\"hljs-params\">rule</span>) {\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(<span class=\"hljs-string\">&#x27;rule.json&#x27;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(rule, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">4</span>));\n}\n\n<span class=\"hljs-keyword\">export</span> { generateFont, saveRule };\n</code></pre>\n"}},"__N_SSG":true}