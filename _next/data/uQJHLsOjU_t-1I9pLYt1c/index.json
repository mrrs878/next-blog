{"pageProps":{"posts":[{"slug":"生成自定义（unicode、字形）字体","title":"生成自定义（unicode、字形）字体","tags":["反爬虫","字体","安全"],"categories":"反爬虫","description":"原理(流程)：基于[opentype.js](https://opentype.js.org/)从源字体中提取出特定的字符，按照一定的规则对字符的字形做出变换，输出一套新的字体\n\n变换规则：根据`strength`和`distance`调整`glyph.path.command`的坐标点\n\n基于[opentype.js](https://opentype.js.org)\n\n``` js\nimp","createDate":"2022-01-08 09:38:17","updateDate":"2022-01-08 18:05:37","body":"<p>原理(流程)：基于<a href=\"https://opentype.js.org/\">opentype.js</a>从源字体中提取出特定的字符，按照一定的规则对字符的字形做出变换，输出一套新的字体</p>\n<p>变换规则：根据<code>strength</code>和<code>distance</code>调整<code>glyph.path.command</code>的坐标点</p>\n<p>基于<a href=\"https://opentype.js.org\">opentype.js</a></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">import</span> opentype <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;opentype.js&#x27;</span>; \n<span class=\"hljs-keyword\">import</span> { clone } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;ramda&#x27;</span>\n<span class=\"hljs-keyword\">import</span> fs <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;fs&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { <span class=\"hljs-title class_\">Chance</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;chance&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> snapX = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> snapY = <span class=\"hljs-number\">0</span>;\n<span class=\"hljs-keyword\">const</span> snapDistance = <span class=\"hljs-number\">2</span>;\n\n<span class=\"hljs-comment\">// 随机数生成器</span>\n<span class=\"hljs-keyword\">const</span> chance = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Chance</span>();\n\n<span class=\"hljs-comment\">// 调整path点</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">snap</span>(<span class=\"hljs-params\">v, distance, strength</span>) {\n    <span class=\"hljs-keyword\">return</span> (v * (<span class=\"hljs-number\">1.0</span> - strength)) + (strength * <span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">round</span>(v / distance) * distance);\n}\n\n<span class=\"hljs-comment\">// 对每个字符的字形做调整</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doSnap</span>(<span class=\"hljs-params\">sourcePath, options</span>) {\n    <span class=\"hljs-keyword\">const</span> { snapStrength, snapDistance, snapPathCmdCnt } = options;\n    <span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-title function_\">clone</span>(sourcePath);\n    <span class=\"hljs-keyword\">if</span> (!path?.<span class=\"hljs-property\">commands</span>) <span class=\"hljs-keyword\">return</span> path;\n\n    <span class=\"hljs-keyword\">const</span> cursorLeft = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">0</span>, <span class=\"hljs-attr\">max</span>: path.<span class=\"hljs-property\">commands</span>.<span class=\"hljs-property\">length</span> - snapPathCmdCnt });\n    <span class=\"hljs-keyword\">const</span> cursorRight = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: cursorLeft, <span class=\"hljs-attr\">max</span>: cursorLeft + snapPathCmdCnt });\n\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = cursorLeft; i &lt; cursorRight; i += <span class=\"hljs-number\">1</span>) {\n        <span class=\"hljs-keyword\">const</span> cmd = path?.<span class=\"hljs-property\">commands</span>?.[i];\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> !== <span class=\"hljs-string\">&#x27;Z&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;Q&#x27;</span> || cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;C&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x1</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x1</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y1</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y1</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n        <span class=\"hljs-keyword\">if</span> (cmd.<span class=\"hljs-property\">type</span> === <span class=\"hljs-string\">&#x27;C&#x27;</span>) {\n            cmd.<span class=\"hljs-property\">x2</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">x2</span> + snapX, snapDistance, snapStrength) - snapX;\n            cmd.<span class=\"hljs-property\">y2</span> = <span class=\"hljs-title function_\">snap</span>(cmd.<span class=\"hljs-property\">y2</span> + snapY, snapDistance, snapStrength) - snapY;\n        }\n    }\n\n    <span class=\"hljs-keyword\">return</span> path;\n}\n\n<span class=\"hljs-comment\">/**\n * <span class=\"hljs-doctag\">@description</span>: TTF变码，基于一种字体，生成另一种新字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} sourceFontPath 源字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} words 要转换的字\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string|Array&lt;string&gt;</span>} newFontPath 转换后的字体\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">SnapConfiguration</span>} snapConfig 字形变化配置\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">object</span>} 转换规则(映射表)\n */</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">generateFont</span>(<span class=\"hljs-params\">sourceFontPath, words, newFontPath, snapConfig</span>) {\n    <span class=\"hljs-comment\">// 保存字符和unicode的映射关系</span>\n    <span class=\"hljs-keyword\">const</span> result = {};\n    <span class=\"hljs-keyword\">const</span> sourceFont = opentype.<span class=\"hljs-title function_\">loadSync</span>(sourceFontPath);\n\n    <span class=\"hljs-keyword\">const</span> notdefGlyph = <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Glyph</span>({\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;.notdef&#x27;</span>,\n        <span class=\"hljs-attr\">advanceWidth</span>: sourceFont.<span class=\"hljs-title function_\">getAdvanceWidth</span>(<span class=\"hljs-string\">&#x27;.&#x27;</span>),\n        <span class=\"hljs-attr\">path</span>: <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Path</span>(),\n    });\n\n    <span class=\"hljs-keyword\">const</span> snapStrength = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">10</span> });\n\n    <span class=\"hljs-comment\">// 生成新的字形</span>\n    <span class=\"hljs-comment\">// sourceFont.stringToGlyphs(words) 提取出要转换的字符的字形</span>\n    <span class=\"hljs-keyword\">const</span> subGlyphs = sourceFont.<span class=\"hljs-title function_\">stringToGlyphs</span>(words).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">glyph, index</span>) =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span> word = words[index];\n        <span class=\"hljs-comment\">// 针对反爬虫需求，每个字符需要生成新的unicode</span>\n        <span class=\"hljs-keyword\">const</span> unicode = chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">255</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">65536</span> });\n        <span class=\"hljs-keyword\">const</span> { consistent, isSnap, snapPathCmdCnt } = snapConfig;\n        <span class=\"hljs-keyword\">let</span> path = glyph.<span class=\"hljs-property\">path</span>;\n        \n        <span class=\"hljs-keyword\">if</span> (isSnap) {\n            <span class=\"hljs-comment\">// 每个字符共用一套字形变换配置or相互独立</span>\n            <span class=\"hljs-keyword\">const</span> snapConfiguration = consistent\n                ?   {   \n                        snapDistance,\n                        snapStrength,\n                        snapPathCmdCnt,\n                    }\n                :   { \n                        snapPathCmdCnt,\n                        snapDistance,\n                        <span class=\"hljs-attr\">snapStrength</span>: chance.<span class=\"hljs-title function_\">integer</span>({ <span class=\"hljs-attr\">min</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">max</span>: <span class=\"hljs-number\">10</span> }),\n                    }\n            path = <span class=\"hljs-title function_\">doSnap</span>(glyph.<span class=\"hljs-property\">path</span>, snapConfiguration);\n        }\n        \n        <span class=\"hljs-comment\">// 保存映射关系</span>\n        result[word] = <span class=\"hljs-string\">`&amp;#x<span class=\"hljs-subst\">${<span class=\"hljs-built_in\">Number</span>(unicode).toString(<span class=\"hljs-number\">16</span>)}</span>;`</span>;\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Glyph</span>({\n            <span class=\"hljs-attr\">index</span>: index + <span class=\"hljs-number\">1</span>,\n            unicode,\n            <span class=\"hljs-attr\">name</span>: word,\n            path,\n            <span class=\"hljs-attr\">advanceWidth</span>: glyph.<span class=\"hljs-property\">advanceWidth</span>,\n        });\n    });\n\n    <span class=\"hljs-keyword\">const</span> { unitsPerEm, ascender, descender } = sourceFont;\n\n    <span class=\"hljs-comment\">// 生成新的字体文件</span>\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">new</span> opentype.<span class=\"hljs-title class_\">Font</span>({\n        <span class=\"hljs-attr\">familyName</span>: <span class=\"hljs-string\">&#x27;yqn-font&#x27;</span>,\n        <span class=\"hljs-attr\">styleName</span>: <span class=\"hljs-string\">&#x27;Medium&#x27;</span>,\n        unitsPerEm,\n        ascender,\n        descender,\n        <span class=\"hljs-attr\">glyphs</span>: [notdefGlyph, ...subGlyphs],\n    });\n\n    <span class=\"hljs-comment\">// 可能需要保存多份字体文件（不同格式，做浏览器兼容）</span>\n    <span class=\"hljs-keyword\">const</span> outputPath = [newFontPath].<span class=\"hljs-title function_\">flat</span>();\n    outputPath?.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">path</span>) =&gt;</span> {\n        res.<span class=\"hljs-title function_\">download</span>(path);\n    });\n\n    <span class=\"hljs-keyword\">return</span> result;\n}\n\n<span class=\"hljs-comment\">// 输出映射关系到单独的文件中</span>\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">saveRule</span>(<span class=\"hljs-params\">rule</span>) {\n    fs.<span class=\"hljs-title function_\">writeFileSync</span>(<span class=\"hljs-string\">&#x27;rule.json&#x27;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(rule, <span class=\"hljs-literal\">null</span>, <span class=\"hljs-number\">4</span>));\n}\n\n<span class=\"hljs-keyword\">export</span> { generateFont, saveRule };\n</code></pre>\n"},{"slug":"CSS学习-clip path","title":"CSS学习-clip path","tags":["clip:path()"],"categories":"CSS","description":"## WHAT\n\n一个CSS属性\n\n使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏\n\n起初是SVG里的，后挪用到CSS\n\n``` css\n/* Keyword values */\nclip-path: none;\n\n/* <clip-source> values */\nclip-path: url(resources.svg);\n\n/* <basic-shape> value","createDate":"2021-12-30 13:52:25","updateDate":"2021-12-30 21:53:08","body":"<h2 id=\"what\">WHAT</h2>\n<p>一个CSS属性</p>\n<p>使用裁剪方式创建元素的可显示区域。区域内的部分显示，区域外的隐藏</p>\n<p>起初是SVG里的，后挪用到CSS</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Keyword values */</span>\n<span class=\"hljs-attribute\">clip-path</span>: none;\n\n<span class=\"hljs-comment\">/* &lt;clip-source&gt; values */</span>\n<span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">url</span>(<span class=\"hljs-string\">resources.svg</span>);\n\n<span class=\"hljs-comment\">/* &lt;basic-shape&gt; values */</span>\n<span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">inset</span>(<span class=\"hljs-number\">100px</span> <span class=\"hljs-number\">50px</span>);\n<span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">circle</span>(<span class=\"hljs-number\">50px</span> at <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">100px</span>);\n<span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">polygon</span>(<span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">0%</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">50%</span>, <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">50%</span>);\n<span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">path</span>(<span class=\"hljs-string\">&#x27;M0.5,1 C0.5,1,0,0.7,0,0.3 A0.25,0.25,1,1,1,0.5,0.3 A0.25,0.25,1,1,1,1,0.3 C1,0.7,0.5,1,0.5,1 Z&#x27;</span>);\n</code></pre>\n<h2 id=\"why\">WHY</h2>\n<p>方便创建一些不规则的图形，如切角、内切圆角、箭头等</p>\n<h2 id=\"how\">HOW</h2>\n<p>DEMO使用<code>clip-path: path()</code>来创建</p>\n<p><code>path</code>类似于svg的<code>path</code>标签，使用一系列 命令+参数 的序列来创建形状</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/path.png\" alt=\"SVG-PATH\"></p>\n<p><a href=\"https://yqnn.github.io/svg-path-editor/\">可视化编辑</a></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">\n    <span class=\"hljs-selector-class\">.img</span> {\n      <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">140px</span>;\n      <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">280px</span>;\n      <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-built_in\">linear-gradient</span>(<span class=\"hljs-number\">90deg</span>, <span class=\"hljs-number\">#be0f2d</span>, <span class=\"hljs-number\">#cb364a</span>, <span class=\"hljs-number\">#f5abb7</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.popover</span> {\n      <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">polygon</span>(<span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">0%</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">0%</span>, <span class=\"hljs-number\">100%</span> <span class=\"hljs-number\">75%</span>, <span class=\"hljs-number\">75%</span> <span class=\"hljs-number\">75%</span>, <span class=\"hljs-number\">50%</span> <span class=\"hljs-number\">100%</span>, <span class=\"hljs-number\">25%</span> <span class=\"hljs-number\">75%</span>, <span class=\"hljs-number\">0%</span> <span class=\"hljs-number\">75%</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.message</span> {\n      <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">path</span>(<span class=\"hljs-string\">&#x27;M 20 0 L 260 0 A 20 20 90 0 1 280 20 L 280 100 A 20 20 90 0 1 260 120 L 220 120 L 240 140 L 180 120 L 20 120 A 20 20 90 0 1 0 100 L 0 20 A 20 20 90 0 1 20 0&#x27;</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.coupon</span> {\n      <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">path</span>(<span class=\"hljs-string\">&#x27;M 20 0 L 260 0 A 20 20 0 0 0 280 20 L 280 120 A 20 20 0 0 0 260 140 L 20 140 A 20 20 0 0 0 0 120 L 0 20 A 20 20 0 0 0 20 0&#x27;</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.notching</span> {\n      <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">path</span>(<span class=\"hljs-string\">&#x27;M 40 0 L 280 0 L 280 100 L 240 140 L 0 140 L 0 40 L 40 0&#x27;</span>);\n    }\n\n    <span class=\"hljs-selector-class\">.outside-circle</span> {\n      <span class=\"hljs-attribute\">clip-path</span>: <span class=\"hljs-built_in\">path</span>(<span class=\"hljs-string\">&#x27;M 40 0 L 240 0 A 20 20 90 0 1 260 20 L 260 120 A 20 20 90 0 0 280 140 L 0 140 A 20 20 90 0 0 20 120 L 20 20 A 20 20 90 0 1 40 0&#x27;</span>);\n    }\n  </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bennettfeely.com/clippy/pics/pittsburgh.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img popover&quot;</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bennettfeely.com/clippy/pics/pittsburgh.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img message&quot;</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bennettfeely.com/clippy/pics/pittsburgh.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img coupon&quot;</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bennettfeely.com/clippy/pics/pittsburgh.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img notching&quot;</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">br</span> /&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://bennettfeely.com/clippy/pics/pittsburgh.jpg&quot;</span> <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">&quot;&quot;</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;img outside-circle&quot;</span> <span class=\"hljs-attr\">srcset</span>=<span class=\"hljs-string\">&quot;&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/clip-path.png\" alt=\"clip-path\"></p>\n"},{"slug":"React.js学习-hooks原理简析","title":"React.js学习-hooks原理简析","tags":["hooks"],"categories":"React.js","description":"让我们从实现两个简单的hook入手来探究hooks原理\n\n> [示例代码](https://github.com/mrrs878/review)\n\n## useState\n\n`useState`用于在函数式组件中声明并保存一个变量，`useState`的使用是这样的：\n\n``` ts\nconst [count, setCount] = useState(0);\n\nconsole.log(cou","createDate":"2021-12-23 11:25:20","updateDate":"2021-12-23 21:56:54","body":"<p>让我们从实现两个简单的hook入手来探究hooks原理</p>\n<blockquote>\n<p><a href=\"https://github.com/mrrs878/review\">示例代码</a></p>\n</blockquote>\n<h2 id=\"usestate\">useState</h2>\n<p><code>useState</code>用于在函数式组件中声明并保存一个变量，<code>useState</code>的使用是这样的：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> [count, setCount] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">0</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(count);\n\n<span class=\"hljs-title function_\">setCount</span>(<span class=\"hljs-number\">1</span>);\n\n<span class=\"hljs-title function_\">setCount</span>((pre) + pre + <span class=\"hljs-number\">1</span>);\n</code></pre>\n<p>有几个特点：</p>\n<ol>\n<li>接受一个函数或值作为变量的初始值</li>\n<li>返回一个数组(元组)，第一个参数是变量值，第二个参数是一个函数，可用来更新变量值</li>\n<li>返回的更新函数支持传入一个函数，改函数的参数是当前的变量值</li>\n</ol>\n<p>据此，可以实现一版简单的<code>useState</code></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n    <span class=\"hljs-comment\">// 没有考虑传入一个函数的情况</span>\n    <span class=\"hljs-keyword\">let</span> state = initialState;\n    \n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n        state = newState;\n    }\n    \n    <span class=\"hljs-keyword\">return</span> [state, setState];\n}\n</code></pre>\n<p>但在使用的时候会发现，当调用<code>setCount</code>的时候，<code>count</code> 并不会变化，这是因为我们没有存储<code>state</code>，导致每次渲染组件的时候，<code>state</code>都会重新设置</p>\n<p>为解决这个问题，会自然而然地想到，把<code>state</code>提取出来，存在<code>useState</code>外面：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> _state;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n  _state = _state || initialState;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n    _state = <span class=\"hljs-keyword\">typeof</span> newState === <span class=\"hljs-string\">&#x27;function&#x27;</span> ? <span class=\"hljs-title function_\">newState</span>(_state) : newState;\n  };\n\n  <span class=\"hljs-keyword\">return</span> [\n    _state,\n    setState,\n  ];\n}\n</code></pre>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { renderHook, act } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useState } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useState_simple&#x27;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useState_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useState should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useState).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When the update function is called, the data is updated normally&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { result, rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>));\n\n    <span class=\"hljs-keyword\">const</span> [, setState] = result.<span class=\"hljs-property\">current</span>;\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-number\">2</span>);\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-keyword\">const</span> [state] = result.<span class=\"hljs-property\">current</span>;\n\n    <span class=\"hljs-title function_\">expect</span>(state).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<p>至此，实现了一个简单的<code>useState</code>，后边会进一步完善</p>\n<h2 id=\"useeffect\">useEffect</h2>\n<p><code>useEffect</code>的使用是这样的</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n});\n\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n}, [])\n\n<span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// do something</span>\n}, [deps])\n</code></pre>\n<p><code>useEffect</code>的使用有几个特点：</p>\n<ol>\n<li>有两个参数<code>callback</code>和<code>deps</code>数组</li>\n<li>如果<code>deps</code>不存在，那么<code>callback</code>在每次<code>render</code>时都会执行</li>\n<li>如果<code>deps</code>存在，只有当它发生了变化，<code>callback</code>才会执行</li>\n</ol>\n<p>根据使用方法和特点，可以做一个简单地实现：</p>\n<pre><code class=\"hljs language-tsx\"><span class=\"hljs-keyword\">let</span> _deps;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, deps</span>) {\n  <span class=\"hljs-keyword\">const</span> hasNoDeps = !deps;\n  <span class=\"hljs-keyword\">const</span> hasChangeDeps = _deps\n    ? !deps?.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">dep, index</span>) =&gt;</span> _deps[index] === dep)\n    : <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangeDeps) {\n    <span class=\"hljs-title function_\">callback</span>();\n    _deps = deps;\n  }\n}\n</code></pre>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { renderHook, act } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> { useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useEffect_simple&#x27;</span>;\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useEffect_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useEffect should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useEffect).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is empty, every rendering callback should be executed&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback));\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is an empty array, render multiple times but callback should only be called once&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback, []));\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When deps is changed, callback should be called&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callback = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ name }</span>) =&gt;</span> <span class=\"hljs-title function_\">useEffect</span>(callback, [name]), {\n      <span class=\"hljs-attr\">initialProps</span>: {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;tom&#x27;</span>,\n      },\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">rerender</span>({\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;jerry&#x27;</span>,\n      });\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callback).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<p>到这里，我们又实现了一个可以工作的丐版<code>useEffect</code>，hook貌似没有那么难</p>\n<h2 id=\"优化\">优化</h2>\n<p>我们上边实现的两个简单的hook存在一个致命缺点，在一个组件内只能使用一次，对此，我们可以将<code>_state</code>和<code>_deps</code>保存至一个全局数组<code>memoizedState </code>中，并用一个变量存储当前<code>memoizedState</code>下标</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">let</span> memoizedStates = []; <span class=\"hljs-comment\">// hooks存放在这个数组</span>\n<span class=\"hljs-keyword\">let</span> cursor = <span class=\"hljs-number\">0</span>; <span class=\"hljs-comment\">// 当前memoizedState下标</span>\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-params\">initialState</span>) {\n  memoizedStates[cursor] = memoizedStates[cursor] || initialState;\n\n  <span class=\"hljs-keyword\">const</span> currentCursor = cursor;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">setState</span> = (<span class=\"hljs-params\">newState</span>) =&gt; {\n    memoizedStates[currentCursor] = <span class=\"hljs-keyword\">typeof</span> newState === <span class=\"hljs-string\">&#x27;function&#x27;</span>\n      ? <span class=\"hljs-title function_\">newState</span>(memoizedStates[currentCursor])\n      : newState;\n  };\n\n  <span class=\"hljs-keyword\">const</span> res = [memoizedStates[cursor], setState];\n  cursor += <span class=\"hljs-number\">1</span>;\n\n  <span class=\"hljs-keyword\">return</span> res;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">useEffect</span>(<span class=\"hljs-params\">callback, deps</span>) {\n  <span class=\"hljs-keyword\">const</span> hasNoDeps = deps === <span class=\"hljs-literal\">undefined</span>;\n  <span class=\"hljs-keyword\">const</span> preDeps = memoizedStates[cursor];\n  <span class=\"hljs-keyword\">const</span> hasChangedDeps = preDeps\n    ? !deps.<span class=\"hljs-title function_\">every</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">dep, index</span>) =&gt;</span> dep === preDeps[index])\n    : <span class=\"hljs-literal\">true</span>;\n\n  <span class=\"hljs-keyword\">if</span> (hasNoDeps || hasChangedDeps) {\n    <span class=\"hljs-title function_\">callback</span>();\n    memoizedStates[cursor] = deps;\n  }\n\n  cursor += <span class=\"hljs-number\">1</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resetCursor</span>(<span class=\"hljs-params\"></span>) {\n  cursor = <span class=\"hljs-number\">0</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">resetMemoizedStates</span>(<span class=\"hljs-params\"></span>) {\n  memoizedStates = [];\n}\n</code></pre>\n<p><strong>Not Magic, just Arrays</strong></p>\n<p>测试用例</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">import</span> { act, renderHook } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;@testing-library/react-hooks&#x27;</span>;\n<span class=\"hljs-keyword\">import</span> {\n  resetCursor, useEffect, useState, resetMemoizedStates,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&#x27;./useState_useEffect&#x27;</span>;\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useState_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useState should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useState).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;When the update function is called, the data is updated normally&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">usePeople</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-keyword\">const</span> [age, setAge] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-keyword\">const</span> [name, setName] = <span class=\"hljs-title function_\">useState</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n      <span class=\"hljs-keyword\">return</span> [age, setAge, name, setName];\n    };\n    <span class=\"hljs-keyword\">const</span> { result, rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">usePeople</span>());\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">1</span>](<span class=\"hljs-function\">(<span class=\"hljs-params\">pre</span>) =&gt;</span> pre + <span class=\"hljs-number\">1</span>);\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&#x27;</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">3</span>](<span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>);\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">0</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(result.<span class=\"hljs-property\">current</span>[<span class=\"hljs-number\">2</span>]).<span class=\"hljs-title function_\">toBe</span>(<span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>);\n  });\n});\n\n<span class=\"hljs-title function_\">describe</span>(<span class=\"hljs-string\">&#x27;useEffect_simple&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-title function_\">beforeEach</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">resetCursor</span>();\n    <span class=\"hljs-title function_\">resetMemoizedStates</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;useEffect should be defined&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">expect</span>(useEffect).<span class=\"hljs-title function_\">toBeDefined</span>();\n  });\n\n  <span class=\"hljs-title function_\">it</span>(<span class=\"hljs-string\">&#x27;Different DEPs, Callback calls should also be differentcalls should also be different&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> callbackWithNoDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> callbackWithEmptyDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n    <span class=\"hljs-keyword\">const</span> callbackWithChangingDeps = jest.<span class=\"hljs-title function_\">fn</span>();\n\n    <span class=\"hljs-keyword\">let</span> name = <span class=\"hljs-string\">&#x27;tom&#x27;</span>;\n\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">useProple</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithNoDeps);\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithEmptyDeps, []);\n      <span class=\"hljs-title function_\">useEffect</span>(callbackWithChangingDeps, [name]);\n    };\n\n    <span class=\"hljs-keyword\">const</span> { rerender } = <span class=\"hljs-title function_\">renderHook</span>(<span class=\"hljs-function\">() =&gt;</span> <span class=\"hljs-title function_\">useProple</span>());\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      name = <span class=\"hljs-string\">&#x27;tom&amp;jerry&#x27;</span>;\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n\n    <span class=\"hljs-title function_\">act</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-title function_\">resetCursor</span>();\n      <span class=\"hljs-title function_\">rerender</span>();\n    });\n\n    <span class=\"hljs-title function_\">expect</span>(callbackWithNoDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">3</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithEmptyDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-title function_\">expect</span>(callbackWithChangingDeps).<span class=\"hljs-title function_\">toBeCalledTimes</span>(<span class=\"hljs-number\">2</span>);\n  });\n});\n</code></pre>\n<h2 id=\"真正的react实现\">真正的React实现</h2>\n<p>虽然我们用数组基本实现了一个可用的Hooks，了解了Hooks的原理，但在React中，实现方式却有一些差异的。</p>\n<ol>\n<li>React中是通过类似单链表的形式来代替数组的。通过<code>next</code>按顺序串联所有的<code>hook</code></li>\n<li><code>memoizedState</code>，<code>cursor</code>是存在哪里的？如何和每个函数组件一一对应的？</li>\n</ol>\n<p>我们知道，React会生成一棵组件树（或Fiber单链表），树中每个节点对应了一个组件，hooks的数据就作为组件的一个信息，存储在这些节点上，<strong>伴随组件一起出生，一起死亡</strong>。</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Hooks</span> = {\n    <span class=\"hljs-comment\">// others</span>\n    <span class=\"hljs-attr\">memoizedState</span>: <span class=\"hljs-built_in\">any</span>, <span class=\"hljs-comment\">// useState中 保存 state 信息 ｜ useEffect 中 保存着 effect 对象 ｜ useMemo 中 保存的是缓存的值和 deps ｜ useRef 中保存的是 ref 对象</span>\n    <span class=\"hljs-attr\">next</span>: <span class=\"hljs-title class_\">Hook</span> | <span class=\"hljs-literal\">null</span>, <span class=\"hljs-comment\">// link 到下一个 hooks，通过 next 串联每一个hooks</span>\n}\n</code></pre>\n<h2 id=\"解惑\">解惑</h2>\n<p>Q. 为什么只能在函数最外层调用Hook，不要在循环、条件判断或者子函数中调用？</p>\n<p>A. <code>memoizedState</code>是按hook定义的顺序来放置数据的，如果hook顺序变化，<code>memoizedState</code>并不会感知到</p>\n<p>Q. 为什么<code>useEffect</code>第二个参数是空数组，在组件更新时回调只会执行一次？</p>\n<p>A. 因为依赖一直不变化，<code>callback</code>不会二次执行</p>\n<p>Q. 自定义的Hook是如何影响使用它的函数组件的？</p>\n<p>A. 共享同一个<code>memoizedState</code>，共享同一个顺序</p>\n<p>Q. Capture Value 特性是如何产生的？</p>\n<p>A. 每一次<code>rerender</code>的时候，都是重新去执行函数组件了，对于之前已经执行过的函数组件，并不会做任何操作。即<strong>每次渲染（执行），都有它自己的xxx</strong></p>\n"},{"slug":"SVG学习-stroke-dashoffset和stroke-dasharray","title":"SVG学习-stroke-dashoffset和stroke-dasharray","tags":["SVG"],"categories":"前端架构&软实力","description":"## 起因\n\n周末玩游戏的时候发现游戏内有一个按钮的交互挺有趣，类似于这种效果\n\n![button-svg](https://mrrsblog.oss-cn-shanghai.aliyuncs.com/button-svg.gif)\n\n点击后边框有一个进度条，鼠标长按进度会增加，抬起后回到起始位置\n\n咦，有点意思\n\n![因垂斯汀](https://mrrsblog.oss-cn-shangha","createDate":"2021-11-24 13:35:30","updateDate":"2021-11-25 21:54:36","body":"<h2 id=\"起因\">起因</h2>\n<p>周末玩游戏的时候发现游戏内有一个按钮的交互挺有趣，类似于这种效果</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/button-svg.gif\" alt=\"button-svg\"></p>\n<p>点击后边框有一个进度条，鼠标长按进度会增加，抬起后回到起始位置</p>\n<p>咦，有点意思</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/interesting.gif\" alt=\"因垂斯汀\"></p>\n<p>于是就想着能不能使用前端的一些技术实现🤔</p>\n<p>于是开始一系列的尝试（此处省略若干字），发现触及到知识盲区了😭，根本无从下手</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/interesting2.png\" alt=\"知识盲区\"></p>\n<h2 id=\"转机\">转机</h2>\n<p>突然不知道怎么就想到SVG了，想着要不试试？没准能行，然后一顿搜索，眼前一亮</p>\n<p>有大佬使用<code>stroke</code>和<code>stroke-dashoffset</code>及<code>stroke-dasharray</code>做出进度条，同时又想到SVG可以和JavaScript交互，貌似可以实现我的需求</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/interesting3.png\" alt=\"奇怪的知识增加了\"></p>\n<h2 id=\"stork-dashoffset和stork-dasharray\">stork-dashoffset和stork-dasharray</h2>\n<p>那么<code>stroke</code>和<code>stroke-dashoffset</code>以及<code>stroke-dasharray</code>是何方神圣腻？🤔</p>\n<p><code>stroke</code>: 描边，接受一个颜色值。可作用于大部分SVG元素</p>\n<p><code>stroke-dasharray</code>: 用于创建虚线描边</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 表示：虚线长10，间距10，然后重复 虚线长10，间距10</span>\nstroke-dasharray = <span class=\"hljs-string\">&#x27;10&#x27;</span>\n\n<span class=\"hljs-comment\">// 表示：虚线长10，间距5，然后重复 虚线长10，间距5</span>\nstroke-dasharray = <span class=\"hljs-string\">&#x27;10, 5&#x27;</span>\n\n<span class=\"hljs-comment\">// 当然还有更复杂的设置这里就不细讲了</span>\n</code></pre>\n<p><code>stroke-dashoffset</code>：字如其意，表示stroke的偏移。这个属性是相对于起始点的偏移，<strong>正数</strong>偏移x值的时候，相当于往<strong>左</strong>移动了x个长度单位，<strong>负数</strong>偏移x的时候，相当于往<strong>右</strong>移动了x个长度单位</p>\n<p>需要注意的是，不管偏移的方向是哪边，要记得dasharray 是循环的，也就是 虚线-间隔-虚线-间隔。\n<code>stroke-dashoffset</code>要搭配<code>stroke-dasharray</code>才能看得出来效果，非虚线的话，是无法看出偏移的。</p>\n<p>概念有点抽象，来看一个MDN的例子，图中红线段是偏移的距离</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/stroke-dashoffset.png\" alt=\"stroke-dashoffset\"></p>\n<p>上图效果分别是：</p>\n<ol>\n<li>没有虚线</li>\n<li><code>stroke-dasharray=&quot;3 1&quot;</code> ，虚线没有设置偏移，也就是stroke-dashoffset值为0</li>\n<li><code>stroke-dashoffset=&quot;3&quot;</code>，偏移正数，虚线整体左移了3个单位，图中3后面的红线段，就是起始线段，线段之后是1个单位的间隔，我们可见区域从这个间隔开始，然后循环 3-1,3-1的虚线-间隔-虚线-间隔</li>\n<li><code>stroke-dashoffset=&quot;-3&quot;</code>，偏移负数，虚线整体右移动了3个单位，由于dasharray 是循环的，前面偏移的位置会有dasharray 填充上</li>\n<li><code>stroke-dashoffset=&quot;1&quot;</code>，偏移正数，虚线整体左移了1个单位，最终呈现出来的效果跟 线段4 一样</li>\n</ol>\n<p><strong>利用这两个属性，我们可以做出好看的动画效果</strong></p>\n<ol>\n<li><p>设置<code>stroke-dasharray</code>为<em>图形边长</em></p>\n</li>\n<li><p>设置<code>stroke-dashoffset</code>为<em>图形边长</em></p>\n</li>\n<li><p>动态减少<code>stroke-dashoffset</code>到0</p>\n</li>\n</ol>\n<p>简析：第一步后就有一个长度为图形边长的<em>长条</em>，第二步由于设置了<code>stroke-dashoffset</code>也为图形边长，因此<em>长条</em>会被推到不可见的位置，再通过第三步中动态减少<code>stroke-dashoffset</code>，第一步中绘制的<em>长条</em>就会慢慢<em>增长</em>并显示出来</p>\n<h2 id=\"再次挑战\">再次挑战</h2>\n<p>刚开始是想使用<code>rect</code>来做的，但发现游戏中的按钮是有一定的圆角的，<code>rect</code>在设置圆角之后再添加<code>storke</code>有点丑，遂放弃，改用<code>path</code>实现</p>\n<p>观察原图，实现思路如下：</p>\n<ol>\n<li><p>边框可以使用<code>path</code>绘制出来</p>\n</li>\n<li><p>边框背景也使用<code>path</code>绘制（同一套<code>d</code>属性），设置一下<code>opacity</code>即可</p>\n</li>\n<li><p>背景色使用SVG的<code>fill</code>填充出来</p>\n</li>\n<li><p>文字使用<code>text</code>绘制</p>\n</li>\n</ol>\n<p>实现代码如下：</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>SVG<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">\n        <span class=\"hljs-selector-id\">#svg</span><span class=\"hljs-selector-pseudo\">:active</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.9</span>;\n        }\n        <span class=\"hljs-selector-id\">#path</span>, <span class=\"hljs-selector-id\">#background</span> {\n            stroke-<span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">3</span>;\n            stroke: <span class=\"hljs-number\">#f00</span>;\n            <span class=\"hljs-attribute\">cursor</span>: pointer;\n            \n            <span class=\"hljs-comment\">/** \n             * 修正位置，设置水平垂直居中\n             */</span>\n            <span class=\"hljs-attribute\">transform</span>: <span class=\"hljs-built_in\">translate</span>(<span class=\"hljs-number\">5px</span>, <span class=\"hljs-number\">5px</span>);\n        }\n        <span class=\"hljs-selector-id\">#background</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.2</span>;\n        }\n        <span class=\"hljs-selector-id\">#text</span> {\n            user-select: none;\n            <span class=\"hljs-attribute\">cursor</span>: pointer;\n            fill: <span class=\"hljs-number\">#000</span>;\n            \n            <span class=\"hljs-comment\">/** \n             * 设置水平垂直居中\n             */</span>\n            dominant-baseline: middle;\n            text-anchor: middle;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n        <span class=\"hljs-keyword\">let</span> rafId = -<span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">WIDTH</span> = <span class=\"hljs-number\">70</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">HEIGHT</span> = <span class=\"hljs-number\">30</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">RADIUS</span> = <span class=\"hljs-number\">6</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">DEFAULT_OFFSET</span> = <span class=\"hljs-number\">15</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">STORK_LENGTH</span> = (<span class=\"hljs-variable constant_\">WIDTH</span> + <span class=\"hljs-variable constant_\">HEIGHT</span>) &lt;&lt; <span class=\"hljs-number\">1</span>;\n        <span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">STEP</span> = <span class=\"hljs-number\">5</span>;\n\n        <span class=\"hljs-comment\">/**\n         * <span class=\"hljs-doctag\">@description</span>: 生成带有圆角的path\n         */</span>\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">roundedRect</span>(<span class=\"hljs-params\">w, h, tlr, trr, brr, blr</span>) {\n            <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`M 0 <span class=\"hljs-subst\">${tlr}</span> A <span class=\"hljs-subst\">${tlr}</span> <span class=\"hljs-subst\">${tlr}</span> 0 0 1 <span class=\"hljs-subst\">${tlr}</span> 0 L <span class=\"hljs-subst\">${w - trr}</span> 0 `</span>\n                + <span class=\"hljs-string\">`A <span class=\"hljs-subst\">${trr}</span> <span class=\"hljs-subst\">${trr}</span> 0 0 1 <span class=\"hljs-subst\">${w}</span> <span class=\"hljs-subst\">${trr}</span> L <span class=\"hljs-subst\">${w}</span> <span class=\"hljs-subst\">${h - brr}</span> `</span>\n                + <span class=\"hljs-string\">`A <span class=\"hljs-subst\">${brr}</span> <span class=\"hljs-subst\">${brr}</span> 0 0 1 <span class=\"hljs-subst\">${w - brr}</span> <span class=\"hljs-subst\">${h}</span> L <span class=\"hljs-subst\">${blr}</span> <span class=\"hljs-subst\">${h}</span> `</span>\n                + <span class=\"hljs-string\">`A <span class=\"hljs-subst\">${blr}</span> <span class=\"hljs-subst\">${blr}</span> 0 0 1 0 <span class=\"hljs-subst\">${h - blr}</span> Z`</span>;\n        }\n\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">animation</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#path&#x27;</span>);\n            <span class=\"hljs-keyword\">const</span> preOffset = path.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dashoffset&#x27;</span>);\n            <span class=\"hljs-keyword\">const</span> newOffset = preOffset - <span class=\"hljs-variable constant_\">STEP</span>;\n            path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dashoffset&#x27;</span>, newOffset);\n            <span class=\"hljs-keyword\">if</span> (newOffset &gt;= <span class=\"hljs-number\">0</span>) {\n                rafId = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(animation);\n            } <span class=\"hljs-keyword\">else</span> {\n                path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dashoffset&#x27;</span>, <span class=\"hljs-variable constant_\">STORK_LENGTH</span> - <span class=\"hljs-variable constant_\">DEFAULT_OFFSET</span>);\n                <span class=\"hljs-title function_\">alert</span>(<span class=\"hljs-string\">&#x27;success&#x27;</span>);\n            }\n        }\n\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onMouseDown</span>(<span class=\"hljs-params\"></span>) {\n            rafId = <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">requestAnimationFrame</span>(animation);\n        }\n\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">onMouseUp</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">cancelAnimationFrame</span>(rafId);\n            path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dashoffset&#x27;</span>, <span class=\"hljs-variable constant_\">STORK_LENGTH</span> - <span class=\"hljs-variable constant_\">DEFAULT_OFFSET</span>);\n        }\n\n        <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-keyword\">const</span> path = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#path&#x27;</span>);\n            <span class=\"hljs-keyword\">const</span> background = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#background&#x27;</span>);\n            path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dashoffset&#x27;</span>, <span class=\"hljs-variable constant_\">STORK_LENGTH</span> - <span class=\"hljs-variable constant_\">DEFAULT_OFFSET</span>);\n            path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;stroke-dasharray&#x27;</span>, <span class=\"hljs-variable constant_\">STORK_LENGTH</span>);\n\n            <span class=\"hljs-keyword\">const</span> roundedPath = <span class=\"hljs-title function_\">roundedRect</span>(<span class=\"hljs-variable constant_\">WIDTH</span>, <span class=\"hljs-variable constant_\">HEIGHT</span>, <span class=\"hljs-variable constant_\">RADIUS</span>, <span class=\"hljs-variable constant_\">RADIUS</span>, <span class=\"hljs-variable constant_\">RADIUS</span>, <span class=\"hljs-variable constant_\">RADIUS</span>);\n            path.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, roundedPath);\n            background.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;d&#x27;</span>, roundedPath);\n        });\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">svg</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;svg&quot;</span> <span class=\"hljs-attr\">width</span>=<span class=\"hljs-string\">&quot;80&quot;</span> <span class=\"hljs-attr\">height</span>=<span class=\"hljs-string\">&quot;40&quot;</span> <span class=\"hljs-attr\">fill</span>=<span class=\"hljs-string\">&quot;#ccc&quot;</span> <span class=\"hljs-attr\">onmousedown</span>=<span class=\"hljs-string\">&quot;onMouseDown()&quot;</span> <span class=\"hljs-attr\">onmouseup</span>=<span class=\"hljs-string\">&quot;onMouseUp()&quot;</span>\n        <span class=\"hljs-attr\">xmlns</span>=<span class=\"hljs-string\">&quot;http://www.w3.org/2000/svg&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;path&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">path</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;background&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">path</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">text</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">x</span>=<span class=\"hljs-string\">&quot;40&quot;</span> <span class=\"hljs-attr\">y</span>=<span class=\"hljs-string\">&quot;20&quot;</span>&gt;</span>click me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">text</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">svg</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>最终效果</p>\n<p><img src=\"https://mrrs878.github.io/awesome/static/img/button.gif\" alt=\"最终效果\"></p>\n<p><a href=\"https://mrrs878.github.io/awesome/interactive-button/index.html\">在线体验</a></p>\n<p>参考：</p>\n<p><a href=\"https://www.cnblogs.com/daisygogogo/p/11044353.html\">SVG学习之stroke-dasharray 和 stroke-dashoffset 详解</a></p>\n"},{"slug":"typescript学习-拾遗","title":"typescript学习-拾遗","tags":["never"],"categories":"typescript","description":"`never` 类型是 TypeScript 中的底层类型。一些例子：\n\n- 一个从来不会有返回值的函数（如：如果函数内含有 `while(true) {}`）；\n- 一个总是会抛出错误的函数（如：`function foo() { throw new Error('Not Implemented') }`，`foo` 的返回类型是 `never`）；\n\n使用场景：详细的返回值检查\n``` t","createDate":"2021-10-08 13:20:35","updateDate":"2021-10-08 21:21:44","body":"<p><code>never</code> 类型是 TypeScript 中的底层类型。一些例子：</p>\n<ul>\n<li>一个从来不会有返回值的函数（如：如果函数内含有 <code>while(true) {}</code>）；</li>\n<li>一个总是会抛出错误的函数（如：<code>function foo() { throw new Error(&#39;Not Implemented&#39;) }</code>，<code>foo</code> 的返回类型是 <code>never</code>）；</li>\n</ul>\n<p>使用场景：详细的返回值检查</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">foo</span>(<span class=\"hljs-params\">x: <span class=\"hljs-built_in\">string</span> | <span class=\"hljs-built_in\">number</span></span>): <span class=\"hljs-built_in\">boolean</span> {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> x === <span class=\"hljs-string\">&#x27;number&#x27;</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-comment\">// 如果不是一个 never 类型，这会报错：</span>\n  <span class=\"hljs-comment\">// - 不是所有条件都有返回值 （严格模式下）</span>\n  <span class=\"hljs-comment\">// - 或者检查到无法访问的代码</span>\n  <span class=\"hljs-comment\">// 但是由于 TypeScript 理解 `fail` 函数返回为 `never` 类型</span>\n  <span class=\"hljs-comment\">// 它可以让你调用它，因为你可能会在运行时用它来做安全或者详细的检查。</span>\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">fail</span>(<span class=\"hljs-string\">&#x27;Unexhaustive&#x27;</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">fail</span>(<span class=\"hljs-params\">message: <span class=\"hljs-built_in\">string</span></span>): <span class=\"hljs-built_in\">never</span> {\n  <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(message);\n}\n</code></pre>\n<p>与 <code>void</code> 的差异：</p>\n<p><code>never</code> 表示一个从来不会优雅的返回的函数时，你可能马上就会想到与此类似的 <code>void</code>，然而实际上，<code>void</code> 表示没有任何类型，<code>never</code> 表示永远不存在的值的类型。</p>\n<p>当一个函数返回空值时，它的返回值为 <code>void</code> 类型，但是，当一个函数永不返回时（或者总是抛出错误），它的返回值为 <code>never</code> 类型。<code>void</code> 类型可以被赋值（在 <code>strictNullChecking</code> 为 <code>false</code>时），但是除了 <code>never</code> 本身以外，其他任何类型不能赋值给 <code>never</code></p>\n"}]},"__N_SSG":true}