{"pageProps":{"post":{"title":"webpack复习-loader","tags":["webpack","loader"],"categories":"2024复习","description":"## normal loader VS pitch loader\n\n`normal loader` 就是 `loader` 本身\n\n`pitch loader` 就是`loader`上一个名为 `pitch` 的属性，也是个函数\n\n```js\nfunction styleLoader(data) {\n  return data;\n}\n\nstyleLoader.pitch = (remaining","createDate":"2024-04-17 20:18:27","updateDate":"2024-04-17 20:37:36","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">normal loader VS pitch loader</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>normal loader</code> 就是 <code>loader</code> 本身</p>\n<p><code>pitch loader</code> 就是<code>loader</code>上一个名为 <code>pitch</code> 的属性，也是个函数</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">styleLoader</span>(<span class=\"hljs-params\">data</span>) {\n  <span class=\"hljs-keyword\">return</span> data;\n}\n\nstyleLoader.<span class=\"hljs-property\">pitch</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">remainingRequest, previousRequest, data</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// remainingRequest 表示剩余需要处理的loader的绝对路径和资源文件以!分割组成的字符串</span>\n  <span class=\"hljs-comment\">// previousRequest 它表示pitch阶段已经迭代过的loader按照!分割组成的字符串</span>\n  <span class=\"hljs-comment\">// data 处理normalLoader与pitchLoader的交互</span>\n  <span class=\"hljs-comment\">/**\n   *\n   * {\n   *    test: /\\.css$/,\n   *    use: [&quot;style-loader&quot;, &quot;css-loader&quot;],\n   * },\n   *\n   * remainingRequest: xxx/node_modules/.pnpm/css-loader@7.1.1_webpack@5.91.0/node_modules/css-loader/dist/cjs.js!xxx/src/index.css\n   */</span>\n};\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">pitch loader 的执行顺序</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>所有的 <code>pitch loader</code> 均在 <code>normal loader</code> 之前执行，如下所示</p>\n<p><img src=\"/img/pitch-loader-1.png\" alt=\"loader执行顺序\"></p>\n<p>但当某一个 <code>pitch loader</code> 的<strong>返回值不为空</strong>时，即发生 <code>loader</code> 的<strong>熔断</strong>效应，即<strong>立即中断后续 loader 的执行，并从该 pitch loader 对应的 normal loader 开始执行</strong></p>\n<p><img src=\"/img/pitch-loader-2.png\" alt=\"loader的熔断效应\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">为什么需要 pitch loader</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>// TODO</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://juejin.cn/post/7036379350710616078\">多角度解析 Webpack5 之 Loader 核心原理</a></p>\n<p><a href=\"https://juejin.cn/post/7037696103973650463\">你不知道的「pitch loader」应用场景</a></p>\n"}},"__N_SSG":true}