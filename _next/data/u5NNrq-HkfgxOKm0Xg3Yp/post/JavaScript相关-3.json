{"pageProps":{"post":{"title":"JavaScript相关-3","tags":["JavaScript"],"categories":"JavaScript","description":"## 执行上下文\n\n### 什么是执行上下文\n\n执行上下文就是当前JavaScript代码被解析和执行时所在环境的抽象概念。JavaScript中任何的代码都是在执行上下文中运行。\n\n执行上下文创建过程中，需要做以下几件事：\n\n1. 创建变量对象：首先初始化函数的参数`arguments`，提升变量声明和函数声明\n2. 创建作用域链（`scope chain`）：在执行上下文的创建阶段，作用域链","createDate":"2020-02-14 23:22:46","updateDate":"10/1/2021, 3:34:43 AM","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">执行上下文</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">什么是执行上下文</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>执行上下文就是当前JavaScript代码被解析和执行时所在环境的抽象概念。JavaScript中任何的代码都是在执行上下文中运行。</p>\n<p>执行上下文创建过程中，需要做以下几件事：</p>\n<ol>\n<li>创建变量对象：首先初始化函数的参数<code>arguments</code>，提升变量声明和函数声明</li>\n<li>创建作用域链（<code>scope chain</code>）：在执行上下文的创建阶段，作用域链是在变量对象之后创建的</li>\n<li>确定<code>this</code>的值，即<code>resolve thisbinding</code></li>\n</ol>\n<p>每个执行上下文中都有三种重要的属性：</p>\n<ul>\n<li>变量对象（VO），包含变量、函数声明和函数的形参，该属性只能在全局执行上下文中访问（函数执行上下文中为AO）</li>\n<li>作用域链（<code>scope chain</code>），JavaScript采用词法作用域，也就是说变量的作用域实在定义的时候就决定了，包含自身变量对象和上级变量对象的列表，通过<code>[[Scope]]</code>属性查找上级变量</li>\n<li><code>this</code></li>\n</ul>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">执行上下文的分类</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li>全局执行上下文</li>\n<li>函数执行上下文</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">执行栈</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>执行栈，也叫做调用栈，具有LIFO结构，用于存储在代码执行期间创建的所有执行上下文</p>\n<p>有如下规则：</p>\n<ul>\n<li>首次运行JavaScript代码的时候会创建一个全局执行的上下文并push到当前的执行栈中，每当发生函数调用，引擎都会为该函数创建一个新的函数执行上下文并push当前执行栈的栈顶</li>\n<li>当栈顶的函数运行完成后，其对应的函数执行上下文将会从执行栈中pop，上下文的控制权移动到当前执行栈的下一个执行上下文</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">作用域</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>作用域负责收集和维护由所有声明的标识符（变量）组成的一系列查询，并实施一套非常严格的规则，确定当前执行的代码对这些标识符的访问权限</p>\n<p>作用域有两种工作模型：<strong>词法作用域</strong>和<strong>动态作用域</strong>。JavaScript采用的时<strong>词法作用域</strong>，词法作用域意味着作用域是由书写代码时变量和函数声明的位置决定的。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">作用域的分类</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li>全局作用域</li>\n<li>函数作用域</li>\n<li>块级作用域</li>\n</ul>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">作用域链</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>作用域链就是从当前作用域开始一层一层向上寻找某个变量，直到全局作用域链</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">变量提升</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>通俗解释：</p>\n<p>将声明的代码移动到了顶部</p>\n<p>准确解释：👍</p>\n<ol>\n<li>在生成执行上下文时，具体步骤是创建VO，JavaScript解释器会找出需要提升的变量和函数，并且给它们提前在内存中开辟好空间，函数的话会将整个函数存入内存，变量之生命并且赋值为<code>undefined</code></li>\n<li>代码执行阶段（可以直接使用变量/函数）</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">防抖</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在一定时间多次触发但内只调用一次</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">debounce</span> (func, wait = <span class=\"hljs-number\">50</span>, immediate = <span class=\"hljs-literal\">true</span>) {\n  <span class=\"hljs-keyword\">let</span> timer, context, args;\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">later</span> = (<span class=\"hljs-params\"></span>) =&gt; <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    timer = <span class=\"hljs-literal\">null</span>\n    <span class=\"hljs-keyword\">if</span> (!immediate) {\n      func.<span class=\"hljs-title function_\">apply</span>(context, args)\n    }\n  }, wait)\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">...params</span>) {\n    <span class=\"hljs-keyword\">if</span> (timer) {\n      <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n      timer = <span class=\"hljs-title function_\">later</span>()\n    } <span class=\"hljs-keyword\">else</span> {\n      timer = <span class=\"hljs-title function_\">later</span>()\n      <span class=\"hljs-keyword\">if</span> (immediate) {\n        func.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, params)\n      } <span class=\"hljs-keyword\">else</span> {\n        context = <span class=\"hljs-variable language_\">this</span>\n        args = params\n      }\n    }\n  }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">可迭代对象</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>ES6规定，默认的<code>Iterator</code>接口部署在数据结构的<code>Symbol.iterator</code>属性上，换个角度，也可以认为一个数据结构只要具有<code>Symbol.iterator</code>属性那么就可以认为其是可迭代的</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">可迭代对象的特点</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li>具有<code>Symbol.iterator</code>属性，返回的是一个遍历器对象</li>\n<li>可以使用<code>for...of</code>循环遍历</li>\n<li>可以通过<code>Array.from</code>转换为数组</li>\n</ul>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">原生具有<code>Iterator</code>接口的数据结构</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <ul>\n<li>Array</li>\n<li>Map</li>\n<li>Set</li>\n<li>String</li>\n<li>TypedArray</li>\n<li>函数的arguments对象</li>\n<li>NodeList对象</li>\n</ul>\n"}},"__N_SSG":true}