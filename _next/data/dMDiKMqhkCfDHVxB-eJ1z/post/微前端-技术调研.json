{"pageProps":{"post":{"title":"微前端-技术调研","tags":["微前端"],"categories":"微前端","description":"微前端是近两年比较火热的话题，从国外的 single-spa 到阿里的 qiankun，从京东的 micro-app 到欢聚时代的 emp ，各家大厂使尽浑身解数推出自家的微前端框架，那么微前端到底是什么呢\n\n## 什么是微前端\n\n网上看到一句话对其总结的鞭辟入里\n\n> “微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。”\n\n微前端的概念最早在 2016 年底被[提出](ht","createDate":"2022-04-28 22:12:20","updateDate":"2022-05-06 22:57:34","body":"<p>微前端是近两年比较火热的话题，从国外的 single-spa 到阿里的 qiankun，从京东的 micro-app 到欢聚时代的 emp ，各家大厂使尽浑身解数推出自家的微前端框架，那么微前端到底是什么呢</p>\n<h2 id=\"什么是微前端\">什么是微前端</h2>\n<p>网上看到一句话对其总结的鞭辟入里</p>\n<blockquote>\n<p>“微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。”</p>\n</blockquote>\n<p>微前端的概念最早在 2016 年底被<a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\">提出</a>，<strong>微前端不是单纯的前端框架或者工具，而是一套架构体系</strong>，它将微服务的概念扩展到前端世界。在该技术架构下，新的/改造好之后的前端应用可由多个子应用构成，这些子应用间独立开发、独立部署、独立运行时、技术栈无关</p>\n<p>微前端有如下特性：</p>\n<ol>\n<li><p>技术栈无关</p>\n</li>\n<li><p>独立开发/部署</p>\n</li>\n<li><p>增量升级</p>\n</li>\n</ol>\n<p>既然微前端这么好，为什么直到 16 年才被提出来呢</p>\n<p>其实早在上古时代，<code>iframe</code>就可称为微前端，为什么这么说呢，因为<code>iframe</code>可以做到完美隔离 javascript/css ，并且可适用 url 快速接入。那既然这么简单，为啥没有流行起来呢（在微前端领域）？因为<code>iframe</code>缺点同样明显：隔离过于简单粗暴，导致应用间数据交互困难；整个应用全量加载，性能较差；弹窗类业务无法正常施展。。。</p>\n<h2 id=\"为什么要做微前端\">为什么要做微前端</h2>\n<p>微前端既可将多个应用/项目整合到一起，又可减小各应用间的耦合性，可做到<em>去中心化</em>，提高项目的可扩展性</p>\n<h2 id=\"实现微前端有哪些方案\">实现微前端有哪些方案</h2>\n<p>可以大致分为构建时集成、运行时集成</p>\n<h3 id=\"构建时集成\">构建时集成</h3>\n<p>最常见的是将子应用独立开发为一个单独的可部署的 Javascript 包，在主应用中引用该包的部署地址，在合适的时间加载。但是，这种方法意味着我们必须重新编译并发布每个微前端，才能发布对产品任何单个部分的更改</p>\n<h3 id=\"运行时集成\">运行时集成</h3>\n<h2 id=\"总结\">总结</h2>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">MDN-Web Components</a></p>\n<p><a href=\"https://github.com/mdn/web-components-examples\">MDN/web-components-examples</a></p>\n"}},"__N_SSG":true}