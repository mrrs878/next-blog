{"pageProps":{"post":{"title":"Vue.js研读-基础","tags":["Vue.js"],"categories":"Vue.js","description":"## Document.createDocumentFragment()\n\n`DocumentFragments` 是DOM节点。它们不是主DOM树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到DOM树。在DOM树中，文档片段被其所有的子元素所代替。\n\n因为文档片段存在于**内存中**，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面[回流](http","createDate":"2020-03-02 23:21:38","updateDate":"10/1/2021, 3:34:43 AM","body":"<h2 id=\"documentcreatedocumentfragment\">Document.createDocumentFragment()</h2>\n<p><code>DocumentFragments</code> 是DOM节点。它们不是主DOM树的一部分。通常的用例是创建文档片段，将元素附加到文档片段，然后将文档片段附加到DOM树。在DOM树中，文档片段被其所有的子元素所代替。</p>\n<p>因为文档片段存在于<strong>内存中</strong>，并不在DOM树中，所以将子元素插入到文档片段时不会引起页面<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Reflow\">回流</a>（对元素位置和几何上的计算）。因此，使用文档片段通常会带来更好的性能。</p>\n<h2 id=\"nodenodetype\">node.nodeType</h2>\n<p>1 元素</p>\n<p>2 属性</p>\n<p>3 文本</p>\n<p>8 注释</p>\n<p>9 document</p>\n<h2 id=\"nodetextcontext、nodeinnertext\">node.textContext、node.innerText</h2>\n<p><code>textContent</code>会获取所有元素的内容，包括<code>script</code>和<code>style</code>元素。然而<code>innerText</code>只展示给人看的元素</p>\n<p><code>textContext</code>会返回节点中的每一个元素，相反，<code>innerText</code>受<code>CSS</code>样式的影响，不会返回隐藏元素的文本，并且会触发<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/Reflow\">回流</a>去确保是最新的计算样式</p>\n<p>与<code>textContext</code>不同的是，在IE11以及下版本中，对<code>innerText</code>进行修改，不仅会移除当前元素的子节点，而且会永久性的破坏所有后代文本节点，在之后不可能再次将节点到任何其他元素或同同一元素</p>\n<h2 id=\"通过字符串路径获取对象属性的简单方法（暂不支持）\">通过字符串路径获取对象属性的简单方法（暂不支持[]）</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">parsePath</span> (obj, path) {\n    <span class=\"hljs-keyword\">return</span> path.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">data, current</span>) =&gt;</span> data[current], obj)\n}\n\n<span class=\"hljs-keyword\">const</span> obj1 = {\n    <span class=\"hljs-attr\">tom</span>: {\n        <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;tom&quot;</span>,\n        <span class=\"hljs-attr\">age</span>: <span class=\"hljs-number\">23</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title function_\">parsePath</span>(obj1, <span class=\"hljs-string\">&quot;tom.name&quot;</span>)\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res);\n<span class=\"hljs-comment\">// tom</span>\n</code></pre>\n<h2 id=\"etarget和ecurrenttarget\">e.target和e.currentTarget</h2>\n<p>e.target指向触发事件的对象</p>\n<p>e.currentTarget指向添加监听事件的对象</p>\n<h2 id=\"vuejs整体流程\">Vue.js整体流程</h2>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/vue-4.png\" alt=\"Vue.js整体流程\"></p>\n"}},"__N_SSG":true}