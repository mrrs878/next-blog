{"pageProps":{"post":{"title":"Web Component-处理数据","tags":["微前端","WebComponent","Attribute","Property"],"categories":"微前端","description":"在前一篇中，我们开发了一个`Reply`组件，大概长这样\n\n![web component reply](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa68a485f5242f5b5e1eb75dfc801c1~tplv-k3u1fbpfcp-zoom-1.image)\n\n功能是完成了，不过今天浏览看到一篇文章[Handling dat","createDate":"2022-04-24 22:00:47","updateDate":"2022-04-23 22:54:37","body":"<p>在前一篇中，我们开发了一个<code>Reply</code>组件，大概长这样</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa68a485f5242f5b5e1eb75dfc801c1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"web component reply\"></p>\n<p>功能是完成了，不过今天浏览看到一篇文章<a href=\"https://itnext.io/handling-data-with-web-components-9e7e4a452e6e\">Handling data with Web Components</a>，大概是介绍了 Web Component 中数据交互的几种方式，有不少收获，特此总结记录一下</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">attribute VS property</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>首先是<code>attribute</code>和<code>property</code>，我们之前的代码中使用的是<code>attribute</code>来将<code>comments</code>传递到组件中，组件拿到后开始渲染数据。这种方案有一个弊端：<code>attribute</code>只接收字符串类型的数据，由于<code>comments</code>是一个数组类型，因此我们在传递之前需要使用<code>JSON.stringify</code>一下以及使用数据时需要<code>JSON.parse</code>一下，使用起来有一些不够方便</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 更新comments时需要处理成字符串</span>\nreply.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;comments&quot;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(comments));\n\n<span class=\"hljs-comment\">// 使用时需要解析成数组</span>\n<span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&quot;comments&quot;</span>) {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">renderComments</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(newValue));\n}\n</code></pre>\n<p>那么有没有一种更好的方式来取代这种方式呢？有的，可以使用<code>property</code>来传递数据</p>\n<p><code>property</code>和<code>attribute</code>中文翻译过来意思很接近，但实际上是有不小的区别</p>\n<p>考虑下面这一行代码</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text&quot;</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">&quot;Age:&quot;</span> /&gt;</span>\n</code></pre>\n<p><code>type</code>和<code>value</code>就是<code>input</code>标签的<em>attribute</em></p>\n<p>当浏览器编译完 HTML 代码，会生成与之对应的一个个 DOM 节点，每个 DOM 节点是一个对象，此时它又拥有很多<em>property</em>，例如<code>height</code>、<code>alt</code>、<code>checked</code>等</p>\n<p>对于一个 DOM 节点对象来讲，<code>property</code>就是这个对象上的属性；<code>attribute</code>是该对象对应的 HTML 标签元素上的属性</p>\n<p><code>property</code>和<code>attribute</code>大致上一一对应，但也有些特例，比如上述<code>input</code>标签的<code>value</code>。DOM 节点对象上的<code>value</code>会在输入之后发生变化，假如用户输入的是<code>John</code>，那么此时<code>Input.value</code>的返回值是<code>John</code>，而<code>Input.getAttribute(&#39;value&#39;)</code>的返回值则是<code>Name:</code>。此外还有其他的一些特例，感兴趣的可以去这里<a href=\"https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html/6004028#6004028\">What is the difference between properties and attributes in HTML</a>看看原文</p>\n<p>既然<code>property</code>是对象上的一个属性，那个肯定也可以给它赋一个对象类型的值！接下来就使用<code>property</code>来重构<code>Reply</code>组件</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用 property 重构组件</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>其实修改起来非常方便，代码改动还是比较少的</p>\n<p>首先是最下面给组件更新值的代码需要变动：不再使用<code>setAttribute</code>，而是直接设置<code>comments</code>属性</p>\n<pre><code class=\"hljs language-js\">reply.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;comments&quot;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(comments));\n\n<span class=\"hljs-comment\">// 修改为 ⬇️</span>\n\nreply.<span class=\"hljs-property\">comments</span> = comments;\n</code></pre>\n<p>其次，我们需要一对<code>getter</code>和<code>setter</code>来监听数据变化从而渲染新的值</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reply</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">// 在这里，我们使用_comments来保存comments数据</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_comments</span> = [];\n  }\n  <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">comments</span>() {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_comments</span>;\n  }\n\n  <span class=\"hljs-keyword\">set</span> <span class=\"hljs-title function_\">comments</span>(<span class=\"hljs-params\">newValue</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">_comments</span> = newValue;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">renderComments</span>(newValue);\n  }\n}\n</code></pre>\n<p>同时，删除监听<code>comments</code>属性相关的代码，因为我们这个已经通过<code>setter</code>实现数据监听了</p>\n<p>到这里，我们已经完成重构，实现组件的原本功能了</p>\n<p>不过我们要更新一步！</p>\n<p>既然我们都能传递数组进去了，那么在大胆点，可不可以传递一个函数呢？</p>\n<p>当然可以！！！</p>\n<p>我们可以直接在<code>reply</code>上挂载一个<code>onSubmitComment</code>函数，在<code>Reply</code>内部按钮点击时调用该回调，并将数据传递出来</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 直接在组件实例上挂载一个回调函数</span>\nreply.<span class=\"hljs-property\">onSubmitComment</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  comments.<span class=\"hljs-title function_\">push</span>({\n    <span class=\"hljs-attr\">comment</span>: e,\n    nickName,\n    avatar,\n  });\n  reply.<span class=\"hljs-property\">comments</span> = comments;\n};\n\n<span class=\"hljs-comment\">// 组件内部，点击按钮时调用该函数</span>\nsubmitBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onSubmitComment</span>?.(commentInput.<span class=\"hljs-property\">value</span>);\n  commentInput.<span class=\"hljs-property\">value</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n});\n</code></pre>\n<p>芜湖～ 🎉</p>\n<p>完整代码<a href=\"https://github.com/mrrs878/web-components/blob/main/reply-property.html\">在这里</a></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>attribute</code>只能传递字符串数据，<code>property</code>由于是 DOM 对象上的属性，因此可以传递诸如对象、函数等复杂类型的数据。</p>\n<p>据此，我们可以使用<code>property</code>来将数据直接设置到组件实例上，组件内部新增一对<code>getter</code>和<code>setter</code>来接收数据，而且我们还可以直接在组件实例上挂载一个回调函数，在组件内部可以直接调用该回调。</p>\n<p>此外在处理类似于<code>disable</code>这种类型的<code>attribute</code>时也可以使用<code>property</code>+<code>getter</code>和<code>setter</code>来实现布尔类型属性的设置</p>\n<p>总之，<code>attribute</code>和<code>property</code>搭配使用将极大提高开发效率</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://stackoverflow.com/questions/6003819/what-is-the-difference-between-properties-and-attributes-in-html/6004028#6004028\">What is the difference between properties and attributes in HTML</a></p>\n<p><a href=\"https://itnext.io/handling-data-with-web-components-9e7e4a452e6e\"># Handling data with Web Components</a></p>\n"}},"__N_SSG":true}