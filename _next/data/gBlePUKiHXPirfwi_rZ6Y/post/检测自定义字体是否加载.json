{"pageProps":{"post":{"title":"检测自定义字体是否加载","tags":["web-font","反爬虫","安全"],"categories":"反爬虫","description":"我们可以通过加载自定义字体来实现字体反爬虫，那么如何检测字体是否正常加载呢？\n\n有几个维度的检测：\n\n1. 检测字体是否加载成功\n\n2. 检测内容是否正常渲染\n\n## 检测字体是否加载\n\n最简单的方法是使用浏览器提供的[FontFaceSet API](https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet)来检测，其中要用到的","createDate":"2022-04-18 20:52:22","updateDate":"2022-04-18 21:32:33","body":"<p>我们可以通过加载自定义字体来实现字体反爬虫，那么如何检测字体是否正常加载呢？</p>\n<p>有几个维度的检测：</p>\n<ol>\n<li><p>检测字体是否加载成功</p>\n</li>\n<li><p>检测内容是否正常渲染</p>\n</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">检测字体是否加载</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>最简单的方法是使用浏览器提供的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet\">FontFaceSet API</a>来检测，其中要用到的是<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet/check\">FontFaceSet.check()</a></p>\n<blockquote>\n<p>FontFaceSet 的check()方法会返回是否在给定的字体列表中的所有字体已经被加载并可用。--MDN</p>\n</blockquote>\n<p>示例：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">&quot;12px courier&quot;</span>);\n\n<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">fonts</span>.<span class=\"hljs-title function_\">check</span>(<span class=\"hljs-string\">&quot;12px MyFont&quot;</span>，<span class=\"hljs-string\">&quot;ß&quot;</span>); <span class=\"hljs-comment\">// 如果字体“MyFont”具有ß字符，则返回true。</span>\n</code></pre>\n<p>但这个检测较为简陋，无法检测字体错误的情况（字体正常加载，但不是我们想要的，页面上显示乱码）</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">检测内容是否正常渲染</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>针对这种情况，我们可以使用一些比较骚的操作：</p>\n<ol>\n<li><p>创建一个span标签</p>\n</li>\n<li><p>给标签添加特定字符</p>\n</li>\n<li><p>重置字体样式</p>\n</li>\n<li><p>分别测量在添<code>font-family</code>前后标签大小</p>\n</li>\n<li><p>大小一致 ? 字体加载失败 : 字体加载成功</p>\n</li>\n</ol>\n<p>（这里要创建<code>span</code>标签，如果是<code>div</code>的话宽度默认占满，无法测量真实的大小）</p>\n<p>使用代码表示就是：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">/**\n * 检测字体是否正常渲染\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} font 字体名称\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">Array&lt;string&gt;</span>} phrase 待匹配的字符\n * <span class=\"hljs-doctag\">@return</span> {<span class=\"hljs-type\">boolean</span>} 是否存在该字体\n */</span>\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkFont</span>(<span class=\"hljs-params\">font, phrase</span>) {\n\n  <span class=\"hljs-comment\">/**\n   * 可以使用上述的 FontFaceSet API 作简要的判断，如果字体都不存在，那么肯定渲染失败\n   */</span>\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">fonts</span>) {\n    <span class=\"hljs-keyword\">const</span> fonts = [...<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">fonts</span>];\n    <span class=\"hljs-keyword\">if</span> (fonts.<span class=\"hljs-title function_\">findIndex</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">f</span>) =&gt;</span> f.<span class=\"hljs-property\">family</span> === font) === -<span class=\"hljs-number\">1</span>) {\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;font dose not exist&#x27;</span>);\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    }\n  }\n\n  <span class=\"hljs-comment\">// 创建一个空的 span 标签来填充内容</span>\n  <span class=\"hljs-keyword\">let</span> node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&quot;span&quot;</span>);\n\n  <span class=\"hljs-comment\">// 因为可以同时检测多个字符，因此需要存储一下各个字符的大小</span>\n  <span class=\"hljs-keyword\">const</span> sizes = [];\n\n  <span class=\"hljs-comment\">/**\n   * 计算单个字符的尺寸\n   * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">string</span>} char 待计算的字符\n   */</span>\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">checkChar</span>(<span class=\"hljs-params\">char</span>) {\n    <span class=\"hljs-comment\">// 重置字体</span>\n    node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontFamily</span> = <span class=\"hljs-string\">&quot;sans-serif&quot;</span>;\n    \n    <span class=\"hljs-comment\">// 填充内容</span>\n    node.<span class=\"hljs-property\">innerHTML</span> = char;\n\n    <span class=\"hljs-keyword\">const</span> size = {};\n\n    <span class=\"hljs-comment\">// 先保存未设置字体时的尺寸</span>\n    size.<span class=\"hljs-property\">withoutFont</span> = {\n      <span class=\"hljs-attr\">width</span>: node.<span class=\"hljs-property\">offsetWidth</span>,\n      <span class=\"hljs-attr\">height</span>: node.<span class=\"hljs-property\">offsetHeight</span>,\n    };\n\n    <span class=\"hljs-comment\">// 设置待检测的字体</span>\n    node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontFamily</span> = font + <span class=\"hljs-string\">&quot;, sans-serif&quot;</span>;\n\n    <span class=\"hljs-comment\">// 保存设置字体后的尺寸</span>\n    size.<span class=\"hljs-property\">withFont</span> = {\n      <span class=\"hljs-attr\">width</span>: node.<span class=\"hljs-property\">offsetWidth</span>,\n      <span class=\"hljs-attr\">height</span>: node.<span class=\"hljs-property\">offsetHeight</span>,\n    };\n\n    <span class=\"hljs-comment\">// 保存该字符设置字体/未设置字体时的尺寸，待字符计算完毕后统一计算</span>\n    sizes.<span class=\"hljs-title function_\">push</span>(size);\n  }\n\n  <span class=\"hljs-comment\">// 隐藏该 span 标签</span>\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">position</span> = <span class=\"hljs-string\">&quot;absolute&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">left</span> = <span class=\"hljs-string\">&quot;-10000px&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">top</span> = <span class=\"hljs-string\">&quot;-10000px&quot;</span>;\n\n  <span class=\"hljs-comment\">// 字体大小设置大些误差小（offsetWidth和offsetHeight会四舍五入）</span>\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontSize</span> = <span class=\"hljs-string\">&quot;300px&quot;</span>;\n\n  <span class=\"hljs-comment\">// 重置字体样式</span>\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontFamily</span> = <span class=\"hljs-string\">&quot;sans-serif&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontVariant</span> = <span class=\"hljs-string\">&quot;normal&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontStyle</span> = <span class=\"hljs-string\">&quot;normal&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">fontWeight</span> = <span class=\"hljs-string\">&quot;normal&quot;</span>;\n  node.<span class=\"hljs-property\">style</span>.<span class=\"hljs-property\">letterSpacing</span> = <span class=\"hljs-string\">&quot;0&quot;</span>;\n\n  <span class=\"hljs-comment\">// 插入页面中才会有 offsetWidth 和 offsetHeight</span>\n  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-property\">body</span>.<span class=\"hljs-title function_\">appendChild</span>(node);\n\n  <span class=\"hljs-comment\">// 计算每一个字符的尺寸</span>\n  phrase.<span class=\"hljs-title function_\">forEach</span>(checkChar);\n\n  <span class=\"hljs-comment\">/**\n   * 1. 当 offsetWidth 和 offsetHeight 均不相同时说明字体存在\n   * 2. 有一个字符的尺寸相同就说明字体有误\n   */</span>\n  <span class=\"hljs-keyword\">const</span> res =\n    node &amp;&amp;\n    sizes.<span class=\"hljs-title function_\">reduce</span>(\n      <span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span>\n        acc &amp;&amp;\n        (cur.<span class=\"hljs-property\">withFont</span>.<span class=\"hljs-property\">width</span> !== cur.<span class=\"hljs-property\">withoutFont</span>.<span class=\"hljs-property\">width</span> ||\n          cur.<span class=\"hljs-property\">withFont</span>.<span class=\"hljs-property\">height</span> !== cur.<span class=\"hljs-property\">withoutFont</span>.<span class=\"hljs-property\">height</span>),\n      <span class=\"hljs-literal\">true</span>\n    );\n\n  <span class=\"hljs-comment\">// 做一些善后工作</span>\n  node.<span class=\"hljs-property\">parentNode</span>.<span class=\"hljs-title function_\">removeChild</span>(node);\n  node = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-keyword\">return</span> res;\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">指数退避算法检测内容是否正常渲染</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>由于网络字体的加载需要时间，我们可通过简单地设置一个延时调用上述的<code>checkFont</code>，但可能有更好的方式来实现：<a href=\"https://cloud.google.com/memorystore/docs/redis/exponential-backoff?hl=zh-cn\">指数退避算法</a></p>\n<p>（自己理解）简单来讲就是在不超过所设置的时间范围内，以指数级超市时间定期重试</p>\n<p>示例：</p>\n<ol>\n<li><p>向服务端发送请求</p>\n</li>\n<li><p>失败？等待1秒后重试</p>\n</li>\n<li><p>失败？等待2秒后重试</p>\n</li>\n<li><p>失败？等待4秒后重试</p>\n</li>\n<li><p>失败？等待8秒后重试</p>\n</li>\n<li><p>以此类推，直到达到超时时间</p>\n</li>\n</ol>\n<p>在检测字体是否正常加载时，我们也可以使用该算法来更好地检测</p>\n<p>（也可使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/loadingdone_event\">FontFaceSet: loadingdone event</a>来作为时间点检测）</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">check</span> = (<span class=\"hljs-params\">phrase, options = { timeout: <span class=\"hljs-number\">8192</span> }</span>) =&gt; {\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doCheck</span>(<span class=\"hljs-params\">t</span>) {\n    <span class=\"hljs-keyword\">let</span> tid = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n      <span class=\"hljs-built_in\">clearTimeout</span>(tid);\n      tid = <span class=\"hljs-literal\">null</span>;\n      <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title function_\">checkFont</span>(<span class=\"hljs-string\">&quot;m-font&quot;</span>, phrase);\n      <span class=\"hljs-keyword\">if</span> (res) {\n        <span class=\"hljs-comment\">// success!</span>\n      }\n      <span class=\"hljs-keyword\">if</span> (!res &amp;&amp; (t &lt;&lt; <span class=\"hljs-number\">1</span> &lt; options.<span class=\"hljs-property\">timeout</span>)) {\n        <span class=\"hljs-title function_\">doCheck</span>(t &lt;&lt; <span class=\"hljs-number\">1</span>);\n      }\n      <span class=\"hljs-keyword\">if</span> (!res &amp;&amp; (t &lt;&lt; <span class=\"hljs-number\">1</span>) &gt;= options.<span class=\"hljs-property\">timeout</span>) {\n        <span class=\"hljs-comment\">// parse error!</span>\n      }\n    }, t);\n  }\n\n  <span class=\"hljs-comment\">// 我们可以以64ms为起始时间点</span>\n  <span class=\"hljs-title function_\">doCheck</span>(<span class=\"hljs-number\">2</span> &lt;&lt; <span class=\"hljs-number\">5</span>);\n};\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ol>\n<li><p>可使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet\">FontFaceSet API</a>来做简单的字体是否加载判断，但无法检测字体是否正常渲染</p>\n</li>\n<li><p>不同字体下，大概率各个字符的大小是不一样的，可依次来检测字体是否正常渲染</p>\n</li>\n</ol>\n<p>结束！</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/FontFaceSet\">FontFaceSet API</a></p>\n<p><a href=\"https://stackoverflow.com/questions/65095157/how-can-i-detect-when-a-font-is-downloaded-via-csss-unicode-range-descriptor\">How can I detect when a font is downloaded via CSS&#39;s &quot;unicode-range&quot; descriptor? </a></p>\n<p><a href=\"https://cloud.google.com/memorystore/docs/redis/exponential-backoff?hl=zh-cn\">指数退避算法</a></p>\n"}},"__N_SSG":true}