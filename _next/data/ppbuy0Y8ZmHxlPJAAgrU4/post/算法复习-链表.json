{"pageProps":{"post":{"title":"算法复习-链表","tags":["算法"],"categories":"2021复习","description":"一些公用数据结构/函数\n\n``` js\nclass ListNode {\n  constructor(value, next) {\n    this.value = value;\n    this.next = next;\n  }\n}\nfunction list2array(list) {\n  const array = [];\n  let pointer = list;\n  while (p","createDate":"2021-06-06 05:09:34","updateDate":"2021-06-07 13:09:37","body":"<p>一些公用数据结构/函数</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">ListNode</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">value, next</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">value</span> = value;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">next</span> = next;\n  }\n}\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">list2array</span>(<span class=\"hljs-params\">list</span>) {\n  <span class=\"hljs-keyword\">const</span> array = [];\n  <span class=\"hljs-keyword\">let</span> pointer = list;\n  <span class=\"hljs-keyword\">while</span> (pointer !== <span class=\"hljs-literal\">null</span>) {\n    array.<span class=\"hljs-title function_\">push</span>(pointer.<span class=\"hljs-property\">value</span>);\n    pointer = pointer.<span class=\"hljs-property\">next</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> array;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">array2list</span>(<span class=\"hljs-params\">array</span>) {\n  <span class=\"hljs-keyword\">if</span> (array.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">const</span> list = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(array[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">null</span>);\n  <span class=\"hljs-keyword\">let</span> pointer = list;\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">1</span>; i &lt; array.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    pointer.<span class=\"hljs-property\">next</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(array[i], <span class=\"hljs-literal\">null</span>);\n    pointer = pointer.<span class=\"hljs-property\">next</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> list;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">skipNNodes</span>(<span class=\"hljs-params\">head, n</span>) {\n  <span class=\"hljs-keyword\">let</span> m = n;\n  <span class=\"hljs-keyword\">let</span> pointer = head;\n  <span class=\"hljs-keyword\">while</span> (m &gt; <span class=\"hljs-number\">0</span> &amp;&amp; pointer) {\n    m -= <span class=\"hljs-number\">1</span>;\n    pointer = pointer.<span class=\"hljs-property\">next</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> pointer;\n}\n</code></pre>\n<h2 id=\"合并两个有序链表\">合并两个有序链表</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">mergeTwoLists</span>(<span class=\"hljs-params\">l1, l2</span>) {\n  <span class=\"hljs-keyword\">const</span> arr1 = <span class=\"hljs-title function_\">list2array</span>(l1);\n  <span class=\"hljs-keyword\">const</span> arr2 = <span class=\"hljs-title function_\">list2array</span>(l2);\n  <span class=\"hljs-keyword\">const</span> res = arr1.<span class=\"hljs-title function_\">concat</span>(arr2).<span class=\"hljs-title function_\">sort</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">a, b</span>) =&gt;</span> a - b);\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">array2list</span>(res);\n}\n</code></pre>\n<h2 id=\"判断链表是否有环\">判断链表是否有环</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hasCycle</span>(<span class=\"hljs-params\">list</span>) {\n  <span class=\"hljs-keyword\">const</span> nodeMap = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n  <span class=\"hljs-keyword\">let</span> pointer = list;\n  <span class=\"hljs-keyword\">let</span> pos = <span class=\"hljs-number\">0</span>;\n  <span class=\"hljs-keyword\">if</span> (pointer === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">if</span> (pointer.<span class=\"hljs-property\">next</span> === <span class=\"hljs-literal\">null</span>) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  <span class=\"hljs-keyword\">while</span> (pointer) {\n    <span class=\"hljs-keyword\">if</span> (nodeMap.<span class=\"hljs-title function_\">has</span>(pointer) &amp;&amp; nodeMap.<span class=\"hljs-title function_\">get</span>(pointer) &lt; pos) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n    nodeMap.<span class=\"hljs-title function_\">set</span>(pointer, pos);\n    pointer = pointer.<span class=\"hljs-property\">next</span>;\n    pos += <span class=\"hljs-number\">1</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n}\n</code></pre>\n<h2 id=\"反转链表\">反转链表</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">reverseList</span>(<span class=\"hljs-params\">list</span>) {\n  <span class=\"hljs-keyword\">const</span> arr = <span class=\"hljs-title function_\">list2array</span>(list);\n  <span class=\"hljs-keyword\">const</span> reverseArr = arr.<span class=\"hljs-title function_\">reverse</span>();\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-title function_\">array2list</span>(reverseArr);\n  <span class=\"hljs-keyword\">return</span> res;\n}\n</code></pre>\n<h2 id=\"获取链表中间节点\">获取链表中间节点</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getMiddle</span>(<span class=\"hljs-params\">list</span>) {\n  <span class=\"hljs-keyword\">let</span> pointer2 = list;\n  <span class=\"hljs-keyword\">let</span> pointer1 = list;\n\n  <span class=\"hljs-keyword\">while</span> (pointer2.<span class=\"hljs-property\">next</span> !== <span class=\"hljs-literal\">null</span> &amp;&amp; pointer2.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">next</span> !== <span class=\"hljs-literal\">null</span>) {\n    pointer1 = pointer1.<span class=\"hljs-property\">next</span>;\n    pointer2 = pointer2.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">next</span>;\n  }\n\n  <span class=\"hljs-keyword\">return</span> pointer2.<span class=\"hljs-property\">next</span> &amp;&amp; pointer2.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">next</span> === <span class=\"hljs-literal\">null</span> ? pointer1.<span class=\"hljs-property\">next</span> : pointer1;\n}\n</code></pre>\n<h2 id=\"移除倒数第n个节点\">移除倒数第n个节点</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeNthFromEnd</span>(<span class=\"hljs-params\">head, n</span>) {\n  <span class=\"hljs-keyword\">const</span> arr = [];\n  <span class=\"hljs-keyword\">let</span> pointer = head;\n  <span class=\"hljs-keyword\">while</span> (pointer) {\n    arr.<span class=\"hljs-title function_\">push</span>(pointer);\n    pointer = pointer.<span class=\"hljs-property\">next</span>;\n  }\n  <span class=\"hljs-keyword\">const</span> index = arr.<span class=\"hljs-property\">length</span> - n;\n  <span class=\"hljs-keyword\">if</span> (index === <span class=\"hljs-number\">0</span>) {\n    arr[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">next</span> = <span class=\"hljs-literal\">null</span>;\n    <span class=\"hljs-keyword\">return</span> arr[<span class=\"hljs-number\">1</span>] || [];\n  }\n  arr[index - <span class=\"hljs-number\">1</span>].<span class=\"hljs-property\">next</span> = arr[index].<span class=\"hljs-property\">next</span>;\n  arr[index].<span class=\"hljs-property\">next</span> = <span class=\"hljs-literal\">null</span>;\n\n  <span class=\"hljs-keyword\">return</span> head;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">removeNthFromEndPreform</span>(<span class=\"hljs-params\">head, n</span>) {\n  <span class=\"hljs-keyword\">const</span> preHead = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ListNode</span>(<span class=\"hljs-number\">0</span>);\n  preHead.<span class=\"hljs-property\">next</span> = head;\n  <span class=\"hljs-keyword\">let</span> pointer1 = preHead;\n  <span class=\"hljs-keyword\">let</span> pointer2 = <span class=\"hljs-title function_\">skipNNodes</span>(head, n - <span class=\"hljs-number\">1</span>);\n\n  <span class=\"hljs-keyword\">while</span> (pointer2 &amp;&amp; pointer2.<span class=\"hljs-property\">next</span>) {\n    pointer2 = pointer2.<span class=\"hljs-property\">next</span>;\n    pointer1 = pointer1.<span class=\"hljs-property\">next</span>;\n  }\n  pointer1.<span class=\"hljs-property\">next</span> = pointer1.<span class=\"hljs-property\">next</span>.<span class=\"hljs-property\">next</span>;\n  <span class=\"hljs-keyword\">return</span> preHead.<span class=\"hljs-property\">next</span>;\n}\n</code></pre>\n<h2 id=\"获取两个链表开始相交的节点\">获取两个链表开始相交的节点</h2>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getIntersectionNode</span>(<span class=\"hljs-params\">headA, headB</span>) {\n  <span class=\"hljs-keyword\">let</span> pointerA = headA;\n  <span class=\"hljs-keyword\">let</span> pointerB = headB;\n  <span class=\"hljs-keyword\">while</span> (pointerA || pointerB) {\n    <span class=\"hljs-keyword\">if</span> (pointerA === pointerB) <span class=\"hljs-keyword\">return</span> pointerA;\n    pointerA = pointerA === <span class=\"hljs-literal\">null</span> ? headB : pointerA.<span class=\"hljs-property\">next</span>;\n    pointerB = pointerB === <span class=\"hljs-literal\">null</span> ? headA : pointerB.<span class=\"hljs-property\">next</span>;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">null</span>;\n}\n</code></pre>\n"}},"__N_SSG":true}