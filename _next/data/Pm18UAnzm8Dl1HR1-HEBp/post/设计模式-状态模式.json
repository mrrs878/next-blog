{"pageProps":{"post":{"title":"设计模式-状态模式","tags":["设计模式","状态模式"],"categories":"设计模式","description":"学习一下「状态模式」\n\n## 从一个场景切入\n\n💡 需求：按下按钮，根据当前的状态，电灯会切换到新的状态 off->on/on->off\n\n针对于这个小的需求，第一时间可能会写下这段代码\n\n```ts\nenum State {\n  on,\n  off,\n}\n\nclass Light {\n  state: State;\n\n  constructor() {\n    this.state = St","createDate":"2022-08-27 15:11:28","updateDate":"2022-08-27 16:35:40","body":"<p>学习一下「状态模式」</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">从一个场景切入</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>💡 需求：按下按钮，根据当前的状态，电灯会切换到新的状态 off-&gt;on/on-&gt;off</p>\n<p>针对于这个小的需求，第一时间可能会写下这段代码</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-built_in\">enum</span> <span class=\"hljs-title class_\">State</span> {\n  on,\n  off,\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Light</span> {\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">State</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>;\n  }\n\n  <span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">on</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>;\n    } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">on</span>;\n    }\n  }\n}\n</code></pre>\n<p>测试一下</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">const</span> light = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Light</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>);\n\nlight.<span class=\"hljs-title function_\">press</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">on</span>);\n\nlight.<span class=\"hljs-title function_\">press</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>);\n</code></pre>\n<p>看起来实现了功能，但其实是存在一些隐患（缺陷）的：一段时间后，需求变了，电灯增加了一种状态--强光：在关闭的情况下，第一次打开是正常光，再按一下会切换到强光，再按一下才是关闭。针对于这个变动，我们上面的代码稍作改动也能处理：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-comment\">// ...</span>\n<span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">on</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">on</span>) {\n    <span class=\"hljs-comment\">// 打开的情况下再次按下会切换到强光</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">superLight</span>;\n  } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> === <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">superLight</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-title class_\">State</span>.<span class=\"hljs-property\">off</span>;\n  }\n}\n<span class=\"hljs-comment\">// ...</span>\n</code></pre>\n<p>但这仅仅是增加了一种状态，那如果以后再添加一种弱光，强强光。。。那都要去修改 <code>press</code> 方法，一来该函数将会变得极其臃肿；再者，该设计也违反了开闭原则：每次新增或修改 light 的状态，都需要修改 <code>press</code> 方法，这使得该函数非常不稳定，难以维护</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">使用状态模式改进 💡 程序</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>状态模式的关键是把事物的每种状态都封装成单独的类，跟此种状态有关的行为都被封装在这个类的内部</strong></p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">State</span> {\n  <span class=\"hljs-attr\">light</span>: <span class=\"hljs-title class_\">Light</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">light: Light</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span> = light;\n  }\n\n  <span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;press方法必须被重写&quot;</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OffLightState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span> {\n  <span class=\"hljs-attr\">light</span>: <span class=\"hljs-title class_\">Light</span>;\n\n  <span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;on&quot;</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-property\">onLightState</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">OnLightState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span> {\n  <span class=\"hljs-attr\">light</span>: <span class=\"hljs-title class_\">Light</span>;\n\n  <span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;superLight&quot;</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-property\">superLightState</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SuperLightState</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">State</span> {\n  <span class=\"hljs-attr\">light</span>: <span class=\"hljs-title class_\">Light</span>;\n\n  <span class=\"hljs-title function_\">press</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;off&quot;</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">light</span>.<span class=\"hljs-property\">offLightState</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Light</span> {\n  <span class=\"hljs-attr\">state</span>: <span class=\"hljs-title class_\">State</span>;\n\n  <span class=\"hljs-attr\">offLightState</span>: <span class=\"hljs-title class_\">OffLightState</span>;\n\n  <span class=\"hljs-attr\">superLightState</span>: <span class=\"hljs-title class_\">SuperLightState</span>;\n\n  <span class=\"hljs-attr\">onLightState</span>: <span class=\"hljs-title class_\">OnLightState</span>;\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onLightState</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OnLightState</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">offLightState</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">OffLightState</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">superLightState</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SuperLightState</span>(<span class=\"hljs-variable language_\">this</span>);\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">offLightState</span>;\n  }\n\n  <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-params\">state: State</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">state</span> = state;\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> light = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Light</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">OffLightState</span>);\n\nlight.<span class=\"hljs-property\">state</span>.<span class=\"hljs-title function_\">press</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">OnLightState</span>);\n\nlight.<span class=\"hljs-property\">state</span>.<span class=\"hljs-title function_\">press</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">SuperLightState</span>);\n\nlight.<span class=\"hljs-property\">state</span>.<span class=\"hljs-title function_\">press</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">assert</span>(light.<span class=\"hljs-property\">state</span> <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">OffLightState</span>);\n</code></pre>\n<p>在这里，我们创建了几个不同的 <code>State</code> ，这个状态都有一个 <code>press</code> 方法，代表开关被按下时执行的动作：切换下一个状态</p>\n<p>使用状态模式后，<strong>代码量明显增加</strong>，但这样的好处非常明显：<strong>它可以使每一种状态和它对应的行为之间的关系局部化，这些行为被分散和封装在各自对应的状态类中，便于管理；此外，由于状态之间的切换都被分布在状态类内部，因此我们无需编写过多的 <code>if-else</code> 来控制状态之间的转换</strong></p>\n<p>当我们需要为 light 新增一种状态时，只需要增加一个新的 <code>State</code> 然后改变相关联的状态之前的切换规则即可</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>状态模式定义了状态与行为之间的关系，较为细致的区分了事物内部的状态，并且将跟此种状态相关的行为都封装在这个状态内部（比如切换到新的状态），避免了 Context 无限膨胀，方便增加新的状态和转换。但由于每个状态都需要一个类，较为繁琐，并且由于逻辑分散在各个状态类中，无形中增加了对整体的状态机逻辑的理解难度</p>\n"}},"__N_SSG":true}