{"pageProps":{"post":{"title":"typescript学习-Utility Types","tags":["typescript","UtilityTypes"],"categories":"typescript","description":"## Partial<Type>\n\n返回一个所有 property 都可选的 type\n  \n``` ts\ntype Partial<T> = {\n    [P in keyof T]?: T[P]\n}\n// 使用\ninterface Todo {\n  title: string;\n  description: string;\n}\nconst newTodo: Partial<Todo> =","createDate":"2021-02-25 15:22:38","updateDate":"2021-02-25 23:22:43","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Partial<Type></span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>返回一个所有 property 都可选的 type</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Partial</span>&lt;T&gt; = {\n    [P <span class=\"hljs-keyword\">in</span> keyof T]?: T[P]\n}\n<span class=\"hljs-comment\">// 使用</span>\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Todo</span> {\n  <span class=\"hljs-attr\">title</span>: <span class=\"hljs-built_in\">string</span>;\n  <span class=\"hljs-attr\">description</span>: <span class=\"hljs-built_in\">string</span>;\n}\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-attr\">newTodo</span>: <span class=\"hljs-title class_\">Partial</span>&lt;<span class=\"hljs-title class_\">Todo</span>&gt; = {\n    <span class=\"hljs-attr\">title</span>: <span class=\"hljs-string\">&#x27;title&#x27;</span>\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Required&lt; Type &gt;</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>使 Type 中所有属性必选。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Pick&lt;Type, Keys&gt;</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>从 Type 中挑选出 Keys 中指定 key 在 Type 中存在的类型，组成一个新类型</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">type</span> <span class=\"hljs-title class_\">Pick</span>&lt;T, K <span class=\"hljs-keyword\">extends</span> keyof T&gt; = {\n    [P <span class=\"hljs-keyword\">in</span> K]: T[P]\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Omit&lt;Type, Keys&gt;</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>从排除 Type 的 property 中排除 keys 中指定的 property。Type 中剩下的 properties 形成一个新类型。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Extract&lt;Type, Union&gt;</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>取两个联合类型的交集</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Parameters&lt; Type &gt;</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>返回一个函数类型的参数的类型，值为元祖类型</p>\n"}},"__N_SSG":true}