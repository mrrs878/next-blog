{"pageProps":{"post":{"title":"typescript学习-枚举的妙用","tags":["enum"],"categories":"typescript","description":"> 参考：[使用数字类型作为标志](https://jkchao.github.io/typescript-book-chinese/typings/enums.html#%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%A0%87%E5%BF%97)\n\n枚举的一个很好用途是使用枚举作为标志。","createDate":"2021-09-29 13:42:31","updateDate":"2021-09-30 14:28:46","body":"<blockquote>\n<p>参考：<a href=\"https://jkchao.github.io/typescript-book-chinese/typings/enums.html#%E4%BD%BF%E7%94%A8%E6%95%B0%E5%AD%97%E7%B1%BB%E5%9E%8B%E4%BD%9C%E4%B8%BA%E6%A0%87%E5%BF%97\">使用数字类型作为标志</a></p>\n</blockquote>\n<p>枚举的一个很好用途是使用枚举作为标志。这些标志允许你检查一组条件中的某个条件是否为真。考虑如下代码例子，我们有一组关于<code>animals</code>的属性：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-built_in\">enum</span> <span class=\"hljs-title class_\">AnimalFlags</span> {\n  <span class=\"hljs-title class_\">None</span>        = <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-title class_\">HasClaws</span>    = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-title class_\">CanFly</span>      = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-title class_\">EatsFish</span>    = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-title class_\">Endangered</span>  = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">3</span>\n}\n</code></pre>\n<p>在这里，我们使用了左移的位运算符，将数字 1 的二进制向左移动位置得到数字 0001、0010、0100 和 1000（换成十进制结果是：1, 2, 4, 8）。当你在使用这种标记的时候，这些位运算符 | (或)、&amp; （和）、~ （非）将会是你最好的朋友：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-built_in\">enum</span> <span class=\"hljs-title class_\">AnimalFlags</span> {\n  <span class=\"hljs-title class_\">None</span>        = <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-title class_\">HasClaws</span>    = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">0</span>,\n  <span class=\"hljs-title class_\">CanFly</span>      = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">1</span>,\n  <span class=\"hljs-title class_\">EatsFish</span>    = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">2</span>,\n  <span class=\"hljs-title class_\">Endangered</span>  = <span class=\"hljs-number\">1</span> &lt;&lt; <span class=\"hljs-number\">3</span>,\n  \n  <span class=\"hljs-comment\">// 可以组合标志，用来在枚举类型中定义方便快捷的方式，如下</span>\n  <span class=\"hljs-title class_\">EndangeredFlyingClawedFishEating</span> = <span class=\"hljs-title class_\">HasClaws</span> | <span class=\"hljs-title class_\">CanFly</span> | <span class=\"hljs-title class_\">EatsFish</span> | <span class=\"hljs-title class_\">Endangered</span>\n}\n\n<span class=\"hljs-keyword\">interface</span> <span class=\"hljs-title class_\">Animal</span> {\n  <span class=\"hljs-attr\">flags</span>: <span class=\"hljs-title class_\">AnimalFlags</span>;\n  [<span class=\"hljs-attr\">key</span>: <span class=\"hljs-built_in\">string</span>]: <span class=\"hljs-built_in\">any</span>;\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">printAnimalAbilities</span>(<span class=\"hljs-params\">animal: Animal</span>) {\n  <span class=\"hljs-keyword\">const</span> animalFlags = animal.<span class=\"hljs-property\">flags</span>;\n  <span class=\"hljs-keyword\">if</span> (animalFlags &amp; <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">HasClaws</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;animal has claws&#x27;</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (animalFlags &amp; <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">CanFly</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;animal can fly&#x27;</span>);\n  }\n  <span class=\"hljs-keyword\">if</span> (animalFlags == <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">None</span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&#x27;nothing&#x27;</span>);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> animal = { <span class=\"hljs-attr\">flags</span>: <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">None</span> };\n<span class=\"hljs-title function_\">printAnimalAbilities</span>(animal); <span class=\"hljs-comment\">// nothing</span>\nanimal.<span class=\"hljs-property\">flags</span> |= <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">HasClaws</span>;\n<span class=\"hljs-title function_\">printAnimalAbilities</span>(animal); <span class=\"hljs-comment\">// animal has claws</span>\nanimal.<span class=\"hljs-property\">flags</span> &amp;= ~<span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">HasClaws</span>;\n<span class=\"hljs-title function_\">printAnimalAbilities</span>(animal); <span class=\"hljs-comment\">// nothing</span>\nanimal.<span class=\"hljs-property\">flags</span> |= <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">HasClaws</span> | <span class=\"hljs-title class_\">AnimalFlags</span>.<span class=\"hljs-property\">CanFly</span>;\n<span class=\"hljs-title function_\">printAnimalAbilities</span>(animal); <span class=\"hljs-comment\">// animal has claws, animal can fly</span>\n</code></pre>\n<p>在这里：</p>\n<ul>\n<li>我们使用 |= 来添加一个标志；</li>\n<li>组合使用 &amp;= 和 ~ 来清理一个标志；</li>\n<li>| 来合并标志。</li>\n</ul>\n"}},"__N_SSG":true}