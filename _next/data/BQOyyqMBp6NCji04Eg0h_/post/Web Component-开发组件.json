{"pageProps":{"post":{"title":"Web Component-开发组件","tags":["微前端","WebComponent"],"categories":"微前端","description":"经过前两天的学习，已经基本入门 Web Component ，那么就开始实战，开发第一个组件\n\n不过在此之前，还要介绍另一个特性\n\n## slot\n\n> slot 由其 name 属性标识，并且允许您在模板中定义占位符，当在标记中使用该元素时，该占位符可以填充所需的任何 HTML 标记片段。--MDN\n\n比如我们的`template`是这样的：在需要的地方放置一个指定`name`属性的`slot","createDate":"2022-04-22 09:51:39","updateDate":"2022-04-23 20:40:37","body":"<p>经过前两天的学习，已经基本入门 Web Component ，那么就开始实战，开发第一个组件</p>\n<p>不过在此之前，还要介绍另一个特性</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">slot</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <blockquote>\n<p>slot 由其 name 属性标识，并且允许您在模板中定义占位符，当在标记中使用该元素时，该占位符可以填充所需的任何 HTML 标记片段。--MDN</p>\n</blockquote>\n<p>比如我们的<code>template</code>是这样的：在需要的地方放置一个指定<code>name</code>属性的<code>slot</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeaderTemplate&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">slot</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;my-text&quot;</span>&gt;</span>My default text<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">slot</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n</code></pre>\n<p>在使用的时候，可以这样玩：给元素设置一个<code>slot</code>属性，值为<code>template</code>里<code>slot</code>的<code>name</code></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">slot</span>=<span class=\"hljs-string\">&quot;my-text&quot;</span>&gt;</span>Let&#x27;s have some different text!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">m-header</span>&gt;</span>\n</code></pre>\n<p>这样<code>span</code>会替换<code>template</code>里的<code>slot</code>。使用起来还是挺简单的</p>\n<p>特性介绍完毕，接下来进行今天的主题：组件开发实战</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Reply 组件</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>本次来复制 Ant Design 的 <code>Card</code> 组件</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/reply.png\" alt=\"reply\"></p>\n<p>先观察组件</p>\n<ol>\n<li><p>默认情况下有一个头像、输入框、提交按钮</p>\n</li>\n<li><p>在输入值点击提交按钮后，输入框上方会出现每一条的评论，包括评论人头像、昵称、评论的内容</p>\n</li>\n</ol>\n<p>针对上述功能，简单的实现思路（肯定有更好、更优雅的 😬）：</p>\n<ol>\n<li><p><code>m-reply</code>为受控组件，只负责提交、渲染数据，因此需要一个<code>comments</code>属性，指代待渲染的评论</p>\n</li>\n<li><p>在输入框输入数据后，点击提交，组件会向父组件发送一个消息（自定义事件），并将输入框的内容传递出去，因此父容器需要监听该事件，父组件在在处理好数据后更新<code>comments</code>，<code>m-reply</code>会自动渲染最新的数据</p>\n</li>\n<li><p>对于<code>comments</code>，该属性是一个数组，每一项包含三项数据：评论内容<code>comment</code>、评论人头像<code>avatar</code>、评论人昵称<code>nickName</code></p>\n</li>\n</ol>\n<p>在设计好思路后，开干！</p>\n<p>先完成提交评论的功能，在这里，我们选择自定义事件的方法来实现组件间通信，在点击提交按钮时触发一个自定义事件<code>submitComment</code>，并将评论内容传递出去</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-keyword\">const</span> submitBtn = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#submitBtn&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> commentInput = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#input&#x27;</span>);\n  submitBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;click&#x27;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">// 注意1：触发事件的是this</span>\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&#x27;submitComment&#x27;</span>, {\n      <span class=\"hljs-comment\">// 注意2：需要将数据放在detail属性上</span>\n      <span class=\"hljs-attr\">detail</span>: commentInput.<span class=\"hljs-property\">value</span>,\n    }));\n  });\n}\n</code></pre>\n<p>有两个注意点注意：</p>\n<ol>\n<li><p>触发事件的是<code>this</code>，即当前组件</p>\n</li>\n<li><p>数据需要放置在自定义事件的<code>detail</code>属性上，直接传递数据或者放在其他属性上会接收不到</p>\n</li>\n</ol>\n<p>🚩</p>\n<p>接着是父组件监听该事件并处理数据</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 注意1：需要先获取当前组件，然后添加监听</span>\n<span class=\"hljs-keyword\">const</span> reply = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#reply&quot;</span>);\nreply.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;submitComment&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n  comments.<span class=\"hljs-title function_\">push</span>({\n    <span class=\"hljs-attr\">comment</span>: e.<span class=\"hljs-property\">detail</span>,\n    nickName,\n    avatar,\n  });\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;comments&quot;</span>, comments);\n  <span class=\"hljs-comment\">// 注意2：设置的属性会自动转为字符串，导致组件无法解析数据，因此需要JSON.stringify</span>\n  reply.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;comments&quot;</span>, <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(comments));\n});\n</code></pre>\n<p>同样有两个注意点：</p>\n<ol>\n<li><p>需要先获取当前组件，然后<strong>在当前组件上添加监听</strong></p>\n</li>\n<li><p>组件的属性会自动将设置的值转为字符串类型，因此需要先<code>JSON.stringify</code></p>\n</li>\n</ol>\n<p>最后，完成渲染每一条评论的代码</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-title function_\">renderComments</span>(<span class=\"hljs-params\">comments</span>) {\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Comment</span> = (<span class=\"hljs-params\">{ avatar, nickName, comment }</span>) =&gt; (<span class=\"hljs-string\">`\n    ...\n  `</span>);\n  <span class=\"hljs-keyword\">const</span> commentsContainer = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&#x27;#commentsContainer&#x27;</span>);\n  commentsContainer.<span class=\"hljs-property\">innerHTML</span> = comments.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur</span>) =&gt;</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${acc}</span><span class=\"hljs-subst\">${Comment(cur)}</span>`</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>);\n}\n</code></pre>\n<p>该函数会在<code>attributeChangedCallback</code>监听到<code>comments</code>变化时调用，渲染出最新的评论</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-title function_\">attributeChangedCallback</span>(<span class=\"hljs-params\">name, oldValue, newValue</span>) {\n  <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&#x27;comments&#x27;</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">renderComments</span>(<span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">parse</span>(newValue));\n  }\n}\n</code></pre>\n<p>最后的效果</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/reply.gif\" alt=\"web component reply\"></p>\n<p>🎉</p>\n<p>ps：该组件还有不少待完善的地方：提交按钮没有<code>loading</code>、没有校验输入值，数据安全性较低，存在 XSS 攻击的隐患、写死提交时间等，这些都会在后面慢慢完善</p>\n<p>完整代码<a href=\"https://github.com/mrrs878/web-components/blob/main/reply.html\">在这里</a></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">总结</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>Web Component 可用来开发跨框架组件，特性基本够用，使用起来也挺方便，只是开发体验有待提高，需要不停地使用原生 api 操作 dom；其次，使用自定义事件来实现组件间通信，代码量有点多（可能还有更好的方法我没找到 🤔）。</p>\n<p>总体来说，使用 Web Component 来开发一套组件库也是一种新的的思路，新的选择，值得尝试</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">MDN-Web Components</a></p>\n<p><a href=\"https://github.com/mdn/web-components-examples\">MDN/web-components-examples</a></p>\n"}},"__N_SSG":true}