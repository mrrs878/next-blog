{"pageProps":{"post":{"title":"webpack复习-运行时","tags":["webpack","runtime"],"categories":"2024复习","description":"研究一下 `webpack` 的 运行时\n\nwebpack 运行时指在浏览器或 Node.js 环境中执行打包后的代码时， webpack 提供的一些辅助函数和对象。这些对象和函数帮助代码在运行时正确地加载和执行模块、处理依赖关系等。主要包括一下函数和对象\n\n- **webpack_require** 用来加载模块\n\n- **webpack_modules** 用来存储各个模块的定义与实现\n\n-","createDate":"2024-04-25 19:34:54","updateDate":"2024-04-26 20:04:54","body":"<p>研究一下 <code>webpack</code> 的 运行时</p>\n<p>webpack 运行时指在浏览器或 Node.js 环境中执行打包后的代码时， webpack 提供的一些辅助函数和对象。这些对象和函数帮助代码在运行时正确地加载和执行模块、处理依赖关系等。主要包括一下函数和对象</p>\n<ul>\n<li><p><strong>webpack_require</strong> 用来加载模块</p>\n</li>\n<li><p><strong>webpack_modules</strong> 用来存储各个模块的定义与实现</p>\n</li>\n<li><p><strong>webpack_exports</strong> 用来保存模块的导出对象</p>\n</li>\n</ul>\n<p>分别针对如下代码讨论 <code>ESM</code> 和 <code>CommonJS</code> 构建输出</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// foo.js</span>\n<span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-string\">&quot;foo&quot;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hi&quot;</span>);\n}\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  sayHi,\n};\n\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">foo</span> = foo;\n\n<span class=\"hljs-comment\">// index.js</span>\n<span class=\"hljs-keyword\">const</span> { foo, sayHi } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./foo.js&quot;</span>);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo);\n\n<span class=\"hljs-title function_\">sayHi</span>();\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">CommonJS</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>执行 <code>npx webpack</code> 后，构建产物如下</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">var</span> __webpack_modules__ = {\n    <span class=\"hljs-string\">&quot;./foo.js&quot;</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">module</span>, <span class=\"hljs-built_in\">exports</span></span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">const</span> foo = <span class=\"hljs-string\">&quot;foo&quot;</span>;\n      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hi&quot;</span>);\n      }\n      <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n        foo,\n        sayHi,\n      };\n      <span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">foo</span> = foo;\n    },\n  };\n  <span class=\"hljs-keyword\">var</span> __webpack_module_cache__ = {};\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">__webpack_require__</span>(<span class=\"hljs-params\">moduleId</span>) {\n    <span class=\"hljs-keyword\">var</span> cachedModule = __webpack_module_cache__[moduleId];\n    <span class=\"hljs-keyword\">if</span> (cachedModule !== <span class=\"hljs-literal\">undefined</span>) {\n      <span class=\"hljs-keyword\">return</span> cachedModule.<span class=\"hljs-property\">exports</span>;\n    }\n    <span class=\"hljs-keyword\">var</span> <span class=\"hljs-variable language_\">module</span> = (__webpack_module_cache__[moduleId] = {\n      <span class=\"hljs-attr\">exports</span>: {},\n    });\n    __webpack_modules__[moduleId](<span class=\"hljs-variable language_\">module</span>, <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>, __webpack_require__);\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span>;\n  }\n  <span class=\"hljs-keyword\">var</span> __webpack_exports__ = {};\n  (<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> { foo, sayHi } = <span class=\"hljs-title function_\">__webpack_require__</span>(<span class=\"hljs-comment\">/*! ./foo.js */</span> <span class=\"hljs-string\">&quot;./foo.js&quot;</span>);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(foo);\n    <span class=\"hljs-title function_\">sayHi</span>();\n  })();\n})();\n</code></pre>\n<p>简单梳理一下</p>\n<ol>\n<li><p>初始化一个 <code>__webpack_modules__</code> 的对象，用于存放各个模块的定义和实现</p>\n</li>\n<li><p>定义化一个 <code>__webpack_module_cache__</code> 对象，用于缓存加载过的模块</p>\n</li>\n<li><p>定义一个 <code>__webpack_require__</code> 函数</p>\n</li>\n<li><p>执行 <code>entry</code> 代码</p>\n</li>\n</ol>\n<p>其中核心是 <code>__webpack_require__</code> 函数，在执行 <code>__webpack_require__</code> 时，其内部会执行 <code>__webpack_modules__</code> 中的模块，在执行时，会将 <code>module</code> 和 <code>module.exports</code> 以及 <code>__webpack_require__</code> 作为参数传递给模块代码，这将作为代码中的 <code>module</code> 和 <code>exports</code> 以及 <code>require</code> 。这样，代码中便可正确使用这些对象</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">ESM</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>ESM 和 CommonJS 的运行时核心流程一致， 但在一些实现上差异较大，同样是上面的代码，当构建为 <code>ESM</code> 格式时，产物如下</p>\n<pre><code class=\"hljs language-js\">(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-string\">&quot;use strict&quot;</span>;\n  <span class=\"hljs-keyword\">var</span> __webpack_modules__ = {\n    <span class=\"hljs-string\">&quot;./foo.js&quot;</span>: <span class=\"hljs-function\">(<span class=\"hljs-params\">\n      __unused_webpack___webpack_module__,\n      __webpack_exports__,\n      __webpack_require__\n    </span>) =&gt;</span> {\n      __webpack_require__.<span class=\"hljs-title function_\">r</span>(__webpack_exports__);\n      __webpack_require__.<span class=\"hljs-title function_\">d</span>(__webpack_exports__, {\n        <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-function\">() =&gt;</span> foo,\n        <span class=\"hljs-attr\">sayHi</span>: <span class=\"hljs-function\">() =&gt;</span> sayHi,\n      });\n\n      <span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-string\">&quot;foo&quot;</span>;\n\n      <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sayHi</span>(<span class=\"hljs-params\"></span>) {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hi&quot;</span>);\n        foo += <span class=\"hljs-string\">&quot;hi&quot;</span>;\n      }\n    },\n  };\n  <span class=\"hljs-keyword\">var</span> __webpack_module_cache__ = {};\n  <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">__webpack_require__</span>(<span class=\"hljs-params\">moduleId</span>) {\n    <span class=\"hljs-comment\">//</span>\n  }\n  (<span class=\"hljs-function\">() =&gt;</span> {\n    __webpack_require__.<span class=\"hljs-property\">d</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">exports</span>, definition</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">var</span> key <span class=\"hljs-keyword\">in</span> definition) {\n        <span class=\"hljs-keyword\">if</span> (\n          __webpack_require__.<span class=\"hljs-title function_\">o</span>(definition, key) &amp;&amp;\n          !__webpack_require__.<span class=\"hljs-title function_\">o</span>(<span class=\"hljs-built_in\">exports</span>, key)\n        ) {\n          <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-built_in\">exports</span>, key, {\n            <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n            <span class=\"hljs-attr\">get</span>: definition[key],\n          });\n        }\n      }\n    };\n  })();\n  (<span class=\"hljs-function\">() =&gt;</span> {\n    __webpack_require__.<span class=\"hljs-property\">o</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">obj, prop</span>) =&gt;</span>\n      <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">hasOwnProperty</span>.<span class=\"hljs-title function_\">call</span>(obj, prop);\n  })();\n  (<span class=\"hljs-function\">() =&gt;</span> {\n    __webpack_require__.<span class=\"hljs-property\">r</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-built_in\">exports</span></span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-title class_\">Symbol</span> !== <span class=\"hljs-string\">&quot;undefined&quot;</span> &amp;&amp; <span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">toStringTag</span>) {\n        <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-title class_\">Symbol</span>.<span class=\"hljs-property\">toStringTag</span>, { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-string\">&quot;Module&quot;</span> });\n      }\n      <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-string\">&quot;__esModule&quot;</span>, { <span class=\"hljs-attr\">value</span>: <span class=\"hljs-literal\">true</span> });\n    };\n  })();\n  <span class=\"hljs-keyword\">var</span> __webpack_exports__ = {};\n  (<span class=\"hljs-function\">() =&gt;</span> {\n    __webpack_require__.<span class=\"hljs-title function_\">r</span>(__webpack_exports__);\n    <span class=\"hljs-keyword\">var</span> _foo_js__WEBPACK_IMPORTED_MODULE_0__ = <span class=\"hljs-title function_\">__webpack_require__</span>(\n      <span class=\"hljs-comment\">/*! ./foo.js */</span> <span class=\"hljs-string\">&quot;./foo.js&quot;</span>\n    );\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(_foo_js__WEBPACK_IMPORTED_MODULE_0__.<span class=\"hljs-property\">foo</span>);\n    (<span class=\"hljs-number\">0</span>, _foo_js__WEBPACK_IMPORTED_MODULE_0__.<span class=\"hljs-property\">sayHi</span>)();\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(_foo_js__WEBPACK_IMPORTED_MODULE_0__.<span class=\"hljs-property\">foo</span>);\n  })();\n})();\n</code></pre>\n<p>主要差异在于</p>\n<ol start=\"0\">\n<li>给 <code>__webpack_require__</code> 挂载了几个函数</li>\n</ol>\n<ul>\n<li><p><strong>webpack_require</strong>.d </p>\n</li>\n<li><p><strong>webpack_require</strong>.r</p>\n</li>\n<li><p><strong>webpack_require</strong>.o</p>\n</li>\n</ul>\n<ol>\n<li>模块导出</li>\n</ol>\n<p>在 <code>ESM</code> 规范中，导出的数据是对值的引用，如下面代码所示</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> b = <span class=\"hljs-number\">1</span>;\n<span class=\"hljs-keyword\">let</span> obj = {\n  <span class=\"hljs-attr\">b</span>: <span class=\"hljs-number\">1</span>,\n};\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">increaseB</span>(<span class=\"hljs-params\"></span>) {\n  b += <span class=\"hljs-number\">1</span>;\n  obj.<span class=\"hljs-property\">b</span> += <span class=\"hljs-number\">1</span>;\n}\n<span class=\"hljs-keyword\">export</span> { b, increaseB, obj };\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b, obj); <span class=\"hljs-comment\">// 1 { b: 1 }</span>\n<span class=\"hljs-title function_\">increaseB</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(b, obj); <span class=\"hljs-comment\">// 2 { b: 2 }</span>\n</code></pre>\n<p>因此，不能直接在 <code>export</code> 对象上直接添加属性， <code>webpack</code> 的做法是这样的</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// __webpack_require__.d</span>\n<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">defineProperty</span>(<span class=\"hljs-built_in\">exports</span>, <span class=\"hljs-string\">&#x27;foo&#x27;</span>, {\n  <span class=\"hljs-attr\">enumerable</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">get</span>: <span class=\"hljs-function\">() =&gt;</span> foo,\n});\n</code></pre>\n<p>这样，每次引用 <code>foo</code> 变量时，都能拿到最新的数据</p>\n"}},"__N_SSG":true}