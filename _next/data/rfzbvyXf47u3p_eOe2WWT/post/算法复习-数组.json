{"pageProps":{"post":{"title":"算法复习-数组","tags":["算法"],"categories":"2021复习","description":"## 数组\n\nJavaScript 中， `Array` 继承自 `Object` ，或者说它就是一个特殊的对象，内部是以 `key-value` 形式存储数据，所以 JavaScript 中的数组可以存放不同类型的值。它有两种存储方式，**快数组**与**慢数组**，初始化空数组时，使用快数组，快数组使用连续的内存空间，当数组长度达到最大时， `Array` 会进行动态的扩容，以存储更多的元素","createDate":"2021-06-05 10:37:05","updateDate":"2024-04-11 20:15:49","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">数组</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>JavaScript 中， <code>Array</code> 继承自 <code>Object</code> ，或者说它就是一个特殊的对象，内部是以 <code>key-value</code> 形式存储数据，所以 JavaScript 中的数组可以存放不同类型的值。它有两种存储方式，<strong>快数组</strong>与<strong>慢数组</strong>，初始化空数组时，使用快数组，快数组使用连续的内存空间，当数组长度达到最大时， <code>Array</code> 会进行动态的扩容，以存储更多的元素，相对慢数组，性能要好得多。当数组中 hole 太多时，会转变成慢数组，即以哈希表的方式（ <code>key-value</code> 的形式）存储数据，以节省内存空间。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">合并两数组</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">first</span> = (<span class=\"hljs-params\">arr</span>) =&gt; arr[<span class=\"hljs-number\">0</span>];\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">last</span> = (<span class=\"hljs-params\">arr</span>) =&gt; arr[arr.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>];\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">combineOrderedArrays</span>(<span class=\"hljs-params\">arr1, arr2</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(arr1) || !<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(arr2)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;parameter must be an array&#x27;</span>);\n  <span class=\"hljs-keyword\">if</span> (arr1.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> arr2;\n  <span class=\"hljs-keyword\">if</span> (arr2.<span class=\"hljs-property\">length</span> === <span class=\"hljs-number\">0</span>) <span class=\"hljs-keyword\">return</span> arr1;\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">first</span>(arr1) &gt;= <span class=\"hljs-title function_\">last</span>(arr2)) <span class=\"hljs-keyword\">return</span> arr1.<span class=\"hljs-title function_\">concat</span>(arr2);\n  <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">first</span>(arr2) &gt;= <span class=\"hljs-title function_\">last</span>(arr1)) <span class=\"hljs-keyword\">return</span> arr2.<span class=\"hljs-title function_\">concat</span>(arr1);\n\n  <span class=\"hljs-keyword\">let</span> index1 = arr1.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">let</span> index2 = arr2.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">let</span> index = arr1.<span class=\"hljs-property\">length</span> + arr2.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>;\n  <span class=\"hljs-keyword\">const</span> res = [...arr1];\n  <span class=\"hljs-keyword\">while</span> (index2 &gt;= <span class=\"hljs-number\">0</span>) {\n    <span class=\"hljs-keyword\">if</span> (index1 &lt; <span class=\"hljs-number\">0</span>) {\n      res[index] = arr2[index2];\n      index -= <span class=\"hljs-number\">1</span>;\n      index2 -= <span class=\"hljs-number\">1</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (arr2[index2] &gt; arr1[index1]) {\n        res[index] = arr2[index2];\n        index2 -= <span class=\"hljs-number\">1</span>;\n      } <span class=\"hljs-keyword\">else</span> {\n        res[index] = arr1[index1];\n        index1 -= <span class=\"hljs-number\">1</span>;\n      }\n      index -= <span class=\"hljs-number\">1</span>;\n    }\n  }\n\n  <span class=\"hljs-keyword\">return</span> res;\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">数组两数之和</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sumOfTwoNumbers</span>(<span class=\"hljs-params\">src, target</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(src)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;src must be an Array&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; src.<span class=\"hljs-property\">length</span>; i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-keyword\">const</span> abs = target - src[i];\n    <span class=\"hljs-keyword\">if</span> (tmp.<span class=\"hljs-title function_\">has</span>(abs)) <span class=\"hljs-keyword\">return</span> [tmp.<span class=\"hljs-title function_\">get</span>(abs), i];\n    tmp.<span class=\"hljs-title function_\">set</span>(src[i], i);\n  }\n  <span class=\"hljs-keyword\">return</span> [];\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">数组交集</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">intersection</span>(<span class=\"hljs-params\">arr1, arr2</span>) {\n  <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(arr1) || !<span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(arr2)) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">TypeError</span>(<span class=\"hljs-string\">&#x27;parameters must be both of Arrays&#x27;</span>);\n  <span class=\"hljs-keyword\">const</span> tmp = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>(arr1);\n  <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  arr2.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">item</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (tmp.<span class=\"hljs-title function_\">has</span>(item)) res.<span class=\"hljs-title function_\">add</span>(item);\n  });\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(res);\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://github.com/sisterAn/JavaScript-Algorithms/issues/2\">前端进阶算法2：从Chrome V8源码看JavaScript数组（附赠腾讯面试题）</a></p>\n"}},"__N_SSG":true}