{"pageProps":{"post":{"title":"算法复习-化归思想","tags":["算法","化归"],"categories":"2024复习","description":"文章灵感来自 leetcode 一篇题解[全网耗时最低解题思路:化归(48ms，100%)](https://leetcode.cn/problems/isomorphic-strings/solutions/1623468/by-martin-wv-6fet)\n\n简单来说就是将数据格式进行转后，然后进行下一步操作，比如这道题[205.同构字符串](https://leetcode.cn/pro","createDate":"2024-06-07 18:27:44","updateDate":"2024-06-07 20:07:42","body":"<p>文章灵感来自 leetcode 一篇题解<a href=\"https://leetcode.cn/problems/isomorphic-strings/solutions/1623468/by-martin-wv-6fet\">全网耗时最低解题思路:化归(48ms，100%)</a></p>\n<p>简单来说就是将数据格式进行转后，然后进行下一步操作，比如这道题<a href=\"https://leetcode.cn/problems/isomorphic-strings\">205.同构字符串</a></p>\n<pre><code>给定两个字符串 s 和 t ，判断它们是否是同构的。\n\n如果 s 中的字符可以按某种映射关系替换得到 t ，那么这两个字符串是同构的。\n\n每个出现的字符都应当映射到另一个字符，同时不改变字符的顺序。不同字符不能映射到同一个字符上，相同字符只能映射到同一个字符上，字符可以映射到自己本身。\n\n示例 1:\n\n输入：s = &quot;egg&quot;, t = &quot;add&quot;\n输出：true\n示例 2：\n\n输入：s = &quot;foo&quot;, t = &quot;bar&quot;\n输出：false\n示例 3：\n\n输入：s = &quot;paper&quot;, t = &quot;title&quot;\n输出：true\n</code></pre>\n<p>经过对题目的分析，判断两个字符串是否是「同构」需要判断 <code>s</code> 和 <code>t</code> 每个位置上的字符是否都一一对应，即 <code>s</code> 的任意一个字符被 <code>t</code> 中唯一的字符对应，同时 <code>t</code> 的任意一个字符被 <code>s</code> 中唯一的字符对应。这也被称为「双射」的关系。传统的做法是在遍历时存储两个映射，然后对比映射关系是否一致:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> isIsomorphic = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s, t</span>) {\n  <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-property\">length</span> !== t.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n\n  <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-property\">length</span> &lt; <span class=\"hljs-number\">2</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> map = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Map</span>();\n  <span class=\"hljs-keyword\">const</span> set = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Set</span>();\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>; i &lt; s.<span class=\"hljs-property\">length</span>; i++) {\n    <span class=\"hljs-keyword\">if</span> (map.<span class=\"hljs-title function_\">has</span>(s[i])) {\n      <span class=\"hljs-keyword\">if</span> (map.<span class=\"hljs-title function_\">get</span>(s[i]) !== t[i]) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n    } <span class=\"hljs-keyword\">else</span> {\n      <span class=\"hljs-keyword\">if</span> (set.<span class=\"hljs-title function_\">has</span>(t[i])) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n      map.<span class=\"hljs-title function_\">set</span>(s[i], t[i]);\n      set.<span class=\"hljs-title function_\">add</span>(t[i]);\n    }\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n};\n</code></pre>\n<p>但这种写法有些许难懂，我们可以用另一种方法来判断两个字符串是否「同构」-即将字符串转换为相同的表示结构再进行对比</p>\n<pre><code>egg -&gt; 122\nabb -&gt; 122\n</code></pre>\n<p>这样，我们只需要对比转换后的结果 <code>122</code> 和 <code>122</code> 是否一致就好了</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> isIsomorphic = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">s, t</span>) {\n  <span class=\"hljs-keyword\">if</span> (s.<span class=\"hljs-property\">length</span> !== t.<span class=\"hljs-property\">length</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">false</span>;\n  }\n  <span class=\"hljs-keyword\">if</span> (s === t) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-literal\">true</span>;\n  }\n\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">p</span> = (<span class=\"hljs-params\">s</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> m = {};\n    <span class=\"hljs-keyword\">return</span> s.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur, index</span>) =&gt;</span> {\n      <span class=\"hljs-keyword\">if</span> (!m[cur]) {\n        m[cur] = index + <span class=\"hljs-number\">1</span>;\n      }\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${acc}</span><span class=\"hljs-subst\">${m[cur]}</span>`</span>;\n    }, <span class=\"hljs-string\">&quot;&quot;</span>);\n  };\n\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">p</span>(s) === <span class=\"hljs-title function_\">p</span>(t);\n};\n</code></pre>\n<p>这种方法还可以在以下题目中使用</p>\n<p><a href=\"https://leetcode.cn/problems/word-pattern\">290.单词规律</a></p>\n<p>通过将 <code>pattern</code> 和 <code>s</code> 分别转换为同样的格式，对别结果即可</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">parse</span> = (<span class=\"hljs-params\">words</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> r = {};\n  <span class=\"hljs-keyword\">return</span> words.<span class=\"hljs-title function_\">reduce</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">acc, cur, index</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (!r[cur]) {\n      r[cur] = index + <span class=\"hljs-number\">1</span>;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-string\">`<span class=\"hljs-subst\">${acc}</span><span class=\"hljs-subst\">${r[cur]}</span>`</span>;\n  }, []);\n};\n\n<span class=\"hljs-keyword\">const</span> r1 = <span class=\"hljs-title function_\">parse</span>(pattern.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;&quot;</span>));\n<span class=\"hljs-keyword\">const</span> r2 = <span class=\"hljs-title function_\">parse</span>(s.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot; &quot;</span>).<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">w</span>) =&gt;</span> <span class=\"hljs-string\">`_<span class=\"hljs-subst\">${w}</span>`</span>));\n\n<span class=\"hljs-keyword\">return</span> r1 === r2;\n</code></pre>\n"}},"__N_SSG":true}