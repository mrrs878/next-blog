{"pageProps":{"post":{"title":"JavaScript复习-JavaScript的执行过程","tags":["JavaScript","上下文","词法环境"],"categories":"2021复习","description":"JavaScript 代码在执行时，首先创建一个**全局可执行上下文（`GlobalContext`）**，每当执行到一个函数调用时都会创建一个**可执行上下文（`ExecutionContext`）EC**。当然程序可能存在很多函数调用，那么就会创建很多 EC，所以 JavaScript 引擎创建了**执行上下文栈（`ExecutionContextStack`）ECS**来管理执行上下文。当","createDate":"2021-05-28 02:22:06","updateDate":"2024-04-03 20:36:52","body":"<p>JavaScript 代码在执行时，首先创建一个<strong>全局可执行上下文（<code>GlobalContext</code>）</strong>，每当执行到一个函数调用时都会创建一个<strong>可执行上下文（<code>ExecutionContext</code>）EC</strong>。当然程序可能存在很多函数调用，那么就会创建很多 EC，所以 JavaScript 引擎创建了<strong>执行上下文栈（<code>ExecutionContextStack</code>）ECS</strong>来管理执行上下文。当函数调用完成，JavaScript 会退出这个执行环境并把这个环境销毁，回到上一个执行环境...。这个过程反复执行，直到执行栈中的代码全部执行完毕。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">执行上下文栈</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>可以借助以下代码理解</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-string\">&quot;Hello World!&quot;</span>;\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">first</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Inside first function&quot;</span>);\n  <span class=\"hljs-title function_\">second</span>();\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Again inside first function&quot;</span>);\n}\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">second</span>(<span class=\"hljs-params\"></span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Inside second function&quot;</span>);\n}\n\n<span class=\"hljs-title function_\">first</span>();\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;Inside Global Execution Context&quot;</span>);\n</code></pre>\n<p><img src=\"/img/ecs.png\" alt=\"ecs\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">执行上下文</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>简而言之，执行上下文就是对当前js代码被解析和执行所依赖的环境的抽象概念，执行上下文包含了当前执行的代码、变量和函数等信息。</p>\n<p>执行上下文的创建阶段主要负责三件事：</p>\n<ol>\n<li><code>this</code></li>\n<li>Lexical Environment</li>\n<li>Variable Environment</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">词法环境</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>js采用的是词法作用域（静态作用域），因此代码的书写顺序/位置决定了作用域</p>\n<p>词法环境（Lexical Environment）：作用于词法分析阶段。包含两部分：</p>\n<ol>\n<li>Environment Record（环境记录）是一个以全部局部变量为属性的对象（以及其他如 this 值的信息）。</li>\n<li>对 outer lexical environment（外部词法环境）的引用，通常关联词法上的外面一层代码（花括号外一层）。</li>\n</ol>\n<p><code>Environment Record</code> 包含两种类型 <strong>声明性环境记录</strong> 和 <strong>对象环境记录</strong> 。后者出现在全局词法环境中。</p>\n<p>词法环境是在代码定义的时候决定的，跟代码在哪⾥调⽤没有关系</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 全局执⾏上下⽂</span>\n<span class=\"hljs-title class_\">GlobalExecutionContext</span> = {\n  <span class=\"hljs-comment\">// 词法环境</span>\n  <span class=\"hljs-title class_\">LexicalEnvironment</span>: {\n    <span class=\"hljs-comment\">// 环境记录</span>\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Object&quot;</span>, <span class=\"hljs-comment\">// 全局环境</span>\n      <span class=\"hljs-comment\">// ... 标识符绑定在这⾥</span>\n      <span class=\"hljs-attr\">outer</span>: &lt;<span class=\"hljs-literal\">null</span>&gt;, <span class=\"hljs-comment\">// 对外部环境的引⽤</span>\n    }\n  }\n}\n<span class=\"hljs-comment\">// 函数执⾏上下⽂</span>\n<span class=\"hljs-title class_\">FunctionExecutionContext</span> = {\n  <span class=\"hljs-title class_\">LexicalEnvironment</span>: {\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Declarative&quot;</span>,<span class=\"hljs-comment\">// 函数环境</span>\n      <span class=\"hljs-comment\">// ... 标识符绑定在这⾥</span>\n      <span class=\"hljs-comment\">// 对全局环境或外部函数环境的引⽤</span>\n      <span class=\"hljs-attr\">outer</span>: <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Global</span> <span class=\"hljs-attr\">or</span> <span class=\"hljs-attr\">outer</span> <span class=\"hljs-attr\">function</span> <span class=\"hljs-attr\">environment</span> <span class=\"hljs-attr\">reference</span>&gt;</span>,\n    }\n  }\n}</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">词法环境与闭包</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <blockquote>\n<p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure） --MDN</p>\n</blockquote>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">变量环境</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>为了继续去<strong>适配</strong>早期 JavaScript 的<code>var</code>等，ES6 增加了<strong>变量环境（Variable Environment）</strong>。变量环境也是一个词法环境，其环境记录器包含有变量声明语句</p>\n<p>在 ES6 中，词法环境和变量环境的区别在于前者用于存储函数声明和变量(<code>let</code>和<code>const</code>)绑定，而后者仅用于存储变量(<code>var</code>)绑定，同时变量环境同时会将变量初始化为 <code>undefined</code> 这就是 <strong>变量提升</strong></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">示例</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">20</span>;\n<span class=\"hljs-keyword\">const</span> b = <span class=\"hljs-number\">30</span>;\n<span class=\"hljs-keyword\">var</span> c;\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-params\">e, f</span>) {\n  <span class=\"hljs-keyword\">var</span> g = <span class=\"hljs-number\">20</span>;\n  <span class=\"hljs-keyword\">return</span> e * f * g;\n}\nc = <span class=\"hljs-title function_\">multiply</span>(<span class=\"hljs-number\">20</span>, <span class=\"hljs-number\">30</span>);\n</code></pre>\n<p>词法构成</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 全局执⾏上下⽂</span>\n<span class=\"hljs-title class_\">GlobalExecutionContext</span> = {\n  <span class=\"hljs-title class_\">ThisBinding</span>: &lt; <span class=\"hljs-title class_\">Global</span> <span class=\"hljs-title class_\">Object</span> &gt; ,\n  <span class=\"hljs-comment\">// 词法环境</span>\n  <span class=\"hljs-title class_\">LexicalEnvironment</span>: {\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Object&quot;</span>,\n      <span class=\"hljs-comment\">// 标识符绑定，let、const、函数声明</span>\n      <span class=\"hljs-attr\">a</span>: &lt; uninitialized &gt; ,\n      <span class=\"hljs-attr\">b</span>: &lt; uninitialized &gt; ,\n      <span class=\"hljs-attr\">multiply</span>: &lt; func &gt;\n    }\n    <span class=\"hljs-attr\">outer</span>: &lt; <span class=\"hljs-literal\">null</span> &gt;\n  },\n  <span class=\"hljs-comment\">// 变量环境</span>\n  <span class=\"hljs-title class_\">VariableEnvironment</span>: {\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Object&quot;</span>,\n      <span class=\"hljs-comment\">// 标识符绑定，var 声明</span>\n      <span class=\"hljs-attr\">c</span>: <span class=\"hljs-literal\">undefined</span>,\n    }\n    <span class=\"hljs-attr\">outer</span>: &lt; <span class=\"hljs-literal\">null</span> &gt;\n  }\n}\n\n<span class=\"hljs-comment\">// 函数执⾏上下⽂</span>\n<span class=\"hljs-title class_\">FunctionExecutionContext</span> = {\n  <span class=\"hljs-title class_\">ThisBinding</span>: &lt; <span class=\"hljs-title class_\">Global</span> <span class=\"hljs-title class_\">Object</span> &gt; ,\n  <span class=\"hljs-title class_\">LexicalEnvironment</span>: {\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Declarative&quot;</span>,\n      <span class=\"hljs-comment\">// 标识符绑定</span>\n      <span class=\"hljs-title class_\">Arguments</span>: {\n        <span class=\"hljs-number\">0</span>: <span class=\"hljs-number\">20</span>,\n        <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">30</span>,\n        <span class=\"hljs-attr\">length</span>: <span class=\"hljs-number\">2</span>\n      },\n    },\n    <span class=\"hljs-attr\">outer</span>: &lt; <span class=\"hljs-title class_\">GlobalLexicalEnvironment</span> &gt;\n  },\n  <span class=\"hljs-title class_\">VariableEnvironment</span>: {\n    <span class=\"hljs-title class_\">EnvironmentRecord</span>: {\n      <span class=\"hljs-title class_\">Type</span>: <span class=\"hljs-string\">&quot;Declarative&quot;</span>,\n      <span class=\"hljs-comment\">// 在这⾥绑定标识符</span>\n      <span class=\"hljs-attr\">g</span>: <span class=\"hljs-literal\">undefined</span>\n    },\n    <span class=\"hljs-attr\">outer</span>: &lt; <span class=\"hljs-title class_\">GlobalLexicalEnvironment</span> &gt;\n  }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">MDN-闭包</a></p>\n<p><a href=\"https://hondrytravis.github.io/docs/typescript/javascript_workflow/\">JS | 执行调度过程</a></p>\n<p><a href=\"https://github.com/yued-fe/y-translation/blob/master/en/understanding-execution-context-and-execution-stack-in-javascript.md\">理解 Javascript 执行上下文和执行栈</a></p>\n"}},"__N_SSG":true}