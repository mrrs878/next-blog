{"pageProps":{"post":{"title":"前端架构&软实力-预加载&懒加载","tags":["预加载&懒加载"],"categories":"前端架构&软实力","description":"# 预加载\n\n## 实现思路\n\n`new`一个新的`Imgnode`，给`Imgnode`的`src`赋值为真正的`src`；该`Imgnode`在加载完毕后相应的图片资源就会在本地缓存。\n\n```js\nfunction  preLoad (...src) {\n\tsrc.forEach(item  => {\n\t\tconst  imgNode = new Image()\n\t\timgNode.sr","createDate":"2020-04-24 21:17:04","updateDate":"2021-02-20 17:16:23","body":"<h1 id=\"预加载\">预加载</h1>\n<h2 id=\"实现思路\">实现思路</h2>\n<p><code>new</code>一个新的<code>Imgnode</code>，给<code>Imgnode</code>的<code>src</code>赋值为真正的<code>src</code>；该<code>Imgnode</code>在加载完毕后相应的图片资源就会在本地缓存。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">function</span>  <span class=\"hljs-title function_\">preLoad</span> (...src) {\n    src.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span>  =&gt;</span> {\n        <span class=\"hljs-keyword\">const</span>  imgNode = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Image</span>()\n        imgNode.<span class=\"hljs-property\">src</span> = realSrc\n    })\n}\n</code></pre>\n<h1 id=\"懒加载\">懒加载</h1>\n<h2 id=\"实现思路-1\">实现思路</h2>\n<p>首先设置一个临时属性 <code>data-src</code>，当前元素是否出现在视口时使用 <code>src</code> 代替 <code>data-src</code>。</p>\n<ol>\n<li><p><code>window.onscroll</code> + <code>clientTop</code>，<code>offsetTop</code>，<code>clientHeight</code> <code>scrollTop</code> + 节流 👎</p>\n<p>不容易判断元素的位置</p>\n</li>\n<li><p><code>window.onscroll</code> + <code>Element.getBoundingClientRect()</code> + 节流👎</p>\n<p><code>getBoundingClientRect</code>会触发回流</p>\n</li>\n<li><p><code>IntersectionObserver</code>👍</p>\n<pre><code class=\"hljs language-js\">&lt;img  style=<span class=\"hljs-string\">&quot;width: 200px;&quot;</span>  id=<span class=\"hljs-string\">&quot;img&quot;</span>  data-src=<span class=\"hljs-string\">&quot;./assets/yoda.jpg&quot;</span>  alt=<span class=\"hljs-string\">&quot;&quot;</span>  srcset=<span class=\"hljs-string\">&quot;&quot;</span>&gt;\n\n<span class=\"hljs-keyword\">const</span>  observer = <span class=\"hljs-keyword\">new</span>  <span class=\"hljs-title class_\">IntersectionObserver</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">changes</span>=&gt;</span> {\n    changes.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">change</span>  =&gt;</span> {\n        <span class=\"hljs-comment\">// change.isIntersecting 判断当前元素是否出现在视口中</span>\n        <span class=\"hljs-keyword\">if</span> (change.<span class=\"hljs-property\">isIntersecting</span>) {\n            <span class=\"hljs-keyword\">const</span>  img = change.<span class=\"hljs-property\">target</span>\n            img.<span class=\"hljs-property\">src</span> = img.<span class=\"hljs-property\">dataset</span>.<span class=\"hljs-property\">src</span>\n            <span class=\"hljs-title class_\">Reflect</span>.<span class=\"hljs-title function_\">deleteProperty</span>(img.<span class=\"hljs-property\">dataset</span>, <span class=\"hljs-string\">&quot;src&quot;</span>)\n            observer.<span class=\"hljs-title function_\">unobserve</span>(img)\n        }\n    })\n})\nobserver.<span class=\"hljs-title function_\">observe</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#img&quot;</span>))\n</code></pre>\n</li>\n<li><p><code>img</code>的<code>lazy</code>属性 👎</p>\n<p>兼容性差，<a href=\"https://www.jianguoyun.com/static/stackedit/%5Bhttps://www.zhangxinxu.com/wordpress/2019/09/native-img-loading-lazy/%5D(https://www.zhangxinxu.com/wordpress/2019/09/native-img-loading-lazy/)\">具体实践</a></p>\n<p><code>&lt;img loading=&quot;lazy&quot; src=&quot;http://blog.p18c.top/imgs/avatar.png&quot; alt=&quot;&quot; srcset=&quot;&quot;&gt;</code></p>\n</li>\n</ol>\n<h1 id=\"预加载-vs-懒加载\">预加载 VS 懒加载</h1>\n<p>|      | 预加载                             | 懒加载                                      |\n| </p>\n"}},"__N_SSG":true}