{"pageProps":{"post":{"title":"JavaScript-执行机制","tags":["JavaScript","执行机制","EventLoop"],"categories":"JavaScript","description":"# **JavaScript 执行与运行**\n\n执行和运行不太相同，在不同环境下，比如 Node、浏览器下，JavaScript 的执行结果是不一样的；而运行大多指的是基于 JavaScript 引擎，如 V8，结果是一致的\n\n# **关于 JavaScript**\n\n众所周知，JavaScript 是一门**单线程**、**异步执行**的语言，虽然在 HTML5 中提出了 **web wor","createDate":"2019-06-30 11:15:28","updateDate":"2021-02-05 10:30:04","body":"\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\"><strong>JavaScript 执行与运行</strong></span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>执行和运行不太相同，在不同环境下，比如 Node、浏览器下，JavaScript 的执行结果是不一样的；而运行大多指的是基于 JavaScript 引擎，如 V8，结果是一致的</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\"><strong>关于 JavaScript</strong></span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>众所周知，JavaScript 是一门<strong>单线程</strong>、<strong>异步执行</strong>的语言，虽然在 HTML5 中提出了 <strong>web workers</strong>(可以理解为<strong>浏览器</strong>为 JavaScript 开的“外挂”，下一篇会谈)，但 JavaScript 是单线程运行的这一核心仍未改变，所有<strong>多线程</strong>都是通过单线程模拟出来的，都是“纸老虎”</p>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">JavaScript 中的异步--event loop</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p>JavaScript 中的异步主要通过 event loop 进行模拟，那么什么是 event loop 呢？当我们执行 JS 代码的时候其实就是往执行栈中放入函数，那么遇到异步代码的时候该怎么办？其实当遇到异步的代码时，会被挂起并在需要执行的时候加入到 Task（有多种 Task） 队列中。一旦执行栈为空，Event Loop 就会从 Task 队列中拿出需要执行的代码并放入执行栈中执行，所以本质上来说 JS 中的异步还是同步行为。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">浏览器中的 event loop</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/browser_event_loop.png\" alt=\"浏览器中的event loop\"></p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/browser_event_loop2.png\" alt=\"浏览器中的event loop\">\n不同的任务源会被分配到不同的 Task 队列中，任务源可以分为 微任务（microtask） 和 宏任务（macrotask）。在 ES6 规范中，microtask 称为 jobs，macrotask 称为 task。\n微任务包括 process.nextTick ，promise ，MutationObserver。\n宏任务包括 script ，setTimeout ，setInterval ，setImmediate ，I/O ，UI rendering。</p>\n<p><strong>宏任务中包括了 script ，浏览器会先执行一个宏任务，接下来有异步代码的话才会先执行微任务。</strong></p>\n<p>Event Loop 执行顺序如下所示：</p>\n<ul>\n<li>首先执行同步代码，这属于宏任务</li>\n<li>当执行完所有同步代码后，执行栈为空，查询是否有异步代码需要执行</li>\n<li>执行所有微任务</li>\n<li>当执行完所有微任务后，如有必要会渲染页面</li>\n<li>然后开始下一轮 Event Loop，执行宏任务中的异步代码，也就是 setTimeout(宏任务) 中的回调函数</li>\n</ul>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">3</span>);\n  });\n});\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">4</span>);\n  <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">5</span>);\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n});\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">6</span>);\n});\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">7</span>);\n\n<span class=\"hljs-comment\">// 执行结果：1 4 7 5 2 3 6</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Node.js 中的 event loop</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>Node 的 Event Loop 分为 6 个阶段，它们会按照顺序反复运行。每当进入某一个阶段的时候，都会从对应的回调队列中取出函数去执行。当<strong>队列为空</strong>或者<strong>执行的回调函数数量到达系统设定的阈值</strong>，就会进入下一阶段。\n<img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/node_event_loop.png\" alt=\"Node.js中的event loop\"></p>\n<ul>\n<li>timer\ntimers 阶段会执行 setTimeout 和 setInterval 回调，并且是由 <strong>poll</strong> 阶段控制的。\n同样，在 Node 中定时器指定的时间也不是准确时间，只能是尽快执行。</li>\n<li>I/O\nI/O 阶段会处理一些上一轮循环中的少数未执行的 I/O 回调</li>\n<li>idle, prepare\nidle, prepare 阶段内部实现，这里就忽略不讲了。</li>\n<li>poll\npoll 是一个至关重要的阶段，这一阶段中，系统会做两件事情<ul>\n<li>回到 timer 阶段执行回调</li>\n<li>执行 I/O 回调\n并且在进入该阶段时如果没有设定了 timer 的话，会发生以下两件事情</li>\n<li>如果 poll 队列不为空，会遍历回调队列并同步执行，直到队列为空或者达到系统限制</li>\n<li>如果 poll 队列为空时，会有两件事发生<ul>\n<li>如果有 setImmediate 回调需要执行，poll 阶段会停止并且进入到 check 阶段执行回调</li>\n<li>如果没有 setImmediate 回调需要执行，会等待回调被加入到队列中并立即执行回调，这里同样会有个超时时间设置防止一直等待下去\n当然设定了 timer 的话且 poll 队列为空，则会判断是否有 timer 超时，如果有的话会回到 timer 阶段执行回调。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>check\ncheck 阶段执行 setImmediate</li>\n<li>close callbacks\nclose callbacks 阶段执行 close 事件\n对于 microtask 来说，它会在以上每个阶段完成前清空 microtask 队列，下图中的 Tick 就代表了 microtask\n<img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/node_event_loop2.png\" alt=\"Node中的event loop\"></li>\n</ul>\n"}},"__N_SSG":true}