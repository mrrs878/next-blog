{"pageProps":{"post":{"title":"React.js学习-useContext性能优化","tags":["React.js","useContext"],"categories":"React.js","description":"`useContext`在 React 中主要作为`useState`的替代品，用于在复杂组件间传递数据，但错误地使用也会导致一些性能问题\n\n先说结论：由于`Context`的限制，每当`Context`中的数据发生变化时，通过`useContext`使用该`Context`的组件及其子组件都会触发重渲。对此，可通过拆分`Context`，减少`Context`的作用域，减少重渲的范围\n\n下面会","createDate":"2022-05-19 21:41:41","updateDate":"2022-05-19 23:07:41","body":"<p><code>useContext</code>在 React 中主要作为<code>useState</code>的替代品，用于在复杂组件间传递数据，但错误地使用也会导致一些性能问题</p>\n<p>先说结论：由于<code>Context</code>的限制，每当<code>Context</code>中的数据发生变化时，通过<code>useContext</code>使用该<code>Context</code>的组件及其子组件都会触发重渲。对此，可通过拆分<code>Context</code>，减少<code>Context</code>的作用域，减少重渲的范围</p>\n<p>下面会以一个简单的计数器作为示例</p>\n<h2 id=\"一个简单的-🌰\">一个简单的 🌰</h2>\n<p>在这里，我们创建了一个<code>CounterContext</code>，全局共享了<code>state</code>和一些<code>action</code>，页面中<code>Header</code>组件和<code>Counter</code>组件中都使用了<code>CounterContext</code>来取值，而且<code>Header</code>和<code>Counter</code>分别有一个<code>Headerer</code>和<code>Counterer</code>子组件</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/react@18.1.0/umd/react.development.js&quot;</span>\n      <span class=\"hljs-attr\">crossorigin</span>\n    &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>\n      <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/npm/react-dom@18.1.0/umd/react-dom.development.js&quot;</span>\n      <span class=\"hljs-attr\">crossorigin</span>\n    &gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://unpkg.com/babel-standalone@6/babel.min.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-keyword\">const</span> {\n        useContext,\n        useReducer,\n        createContext,\n        useCallback,\n        useState,\n        memo,\n        useMemo,\n      } = <span class=\"hljs-title class_\">React</span>;\n\n      <span class=\"hljs-keyword\">const</span> initialState = {\n        <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span>,\n      };\n\n      <span class=\"hljs-keyword\">const</span> initialDispatch = {};\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateContext</span> = <span class=\"hljs-title function_\">createContext</span>(initialState);\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Store</span> = (<span class=\"hljs-params\">{ children }</span>) =&gt; {\n        <span class=\"hljs-keyword\">const</span> [state, setState] = <span class=\"hljs-title function_\">useState</span>({ <span class=\"hljs-attr\">count</span>: <span class=\"hljs-number\">0</span> });\n\n        <span class=\"hljs-keyword\">const</span> increment = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n          <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> ({\n            ...state,\n            <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> + <span class=\"hljs-number\">1</span>,\n          }));\n        }, []);\n\n        <span class=\"hljs-keyword\">const</span> decrement = <span class=\"hljs-title function_\">useCallback</span>(<span class=\"hljs-function\">() =&gt;</span> {\n          <span class=\"hljs-title function_\">setState</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">state</span>) =&gt;</span> ({\n            ...state,\n            <span class=\"hljs-attr\">count</span>: state.<span class=\"hljs-property\">count</span> - <span class=\"hljs-number\">1</span>,\n          }));\n        }, []);\n\n        <span class=\"hljs-keyword\">const</span> value = <span class=\"hljs-title function_\">useMemo</span>(\n          <span class=\"hljs-function\">() =&gt;</span> ({ state, decrement, increment }),\n          [state, increment, decrement]\n        );\n\n        <span class=\"hljs-keyword\">return</span> (\n          <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StateContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">state</span>, <span class=\"hljs-attr\">increment</span>, <span class=\"hljs-attr\">decrement</span> }}&gt;</span>\n            {children}\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StateContext.Provider</span>&gt;</span></span>\n        );\n      };\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Header</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-keyword\">const</span> { state } = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">StateContext</span>);\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;rerender Header&quot;</span>);\n\n        <span class=\"hljs-keyword\">return</span> (\n          <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>{state.count}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Headerer</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n      };\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Counter</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-keyword\">const</span> { increment, decrement } = <span class=\"hljs-title function_\">useContext</span>(<span class=\"hljs-title class_\">StateContext</span>);\n\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;rerender Counter&quot;</span>);\n\n        <span class=\"hljs-keyword\">return</span> (\n          <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">className</span>=<span class=\"hljs-string\">&quot;counter&quot;</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{increment}</span>&gt;</span>+<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{decrement}</span>&gt;</span>-<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counterer</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n        );\n      };\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Headerer</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;rerender Headerer&quot;</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Headerer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n      };\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MHeaderer</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">Headerer</span>);\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Counterer</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n        <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;rerender Counterer&quot;</span>);\n\n        <span class=\"hljs-keyword\">return</span> <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span>&gt;</span>Counterer<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span></span>;\n      };\n\n      <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">App</span> = (<span class=\"hljs-params\"></span>) =&gt; (\n        <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Store</span>&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Header</span> /&gt;</span>\n          <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">Counter</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">Store</span>&gt;</span></span>\n      );\n\n      <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-title class_\">ReactDOM</span>.<span class=\"hljs-title function_\">createRoot</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#app&quot;</span>));\n      root.<span class=\"hljs-title function_\">render</span>(<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">App</span> /&gt;</span></span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>代码跑起来后页面显示正常，操作后数据也正常更新，但当我们打开控制台后，会发现打印的数据有点不正常</p>\n<p>刷新页面，初次渲染时打印数据是正常的</p>\n<pre><code class=\"hljs language-sh\">rerender Header\nrerender Headerer\nrerender Counter\nrerender Counterer\n</code></pre>\n<p>点击 ➕ 或 ➖ 后</p>\n<pre><code class=\"hljs language-sh\">rerender Header\nrerender Headerer\nrerender Counter\nrerender Counterer\n<span class=\"hljs-comment\"># &lt;------点击按钮-------&gt;</span>\nrerender Header\nrerender Headerer\nrerender Counter\nrerender Counterer\n</code></pre>\n<p>发现<code>Header</code>和<code>Counter</code>及其子组件都触发更新了，好家伙，直呼好家伙</p>\n<p>针对这个简单的 demo，我的<code>Counter</code>只是想用来渲染可更新数据的两个按钮，没必要重渲吧。我的<code>Headerer</code>和<code>Counterer</code>也只是想展示两个 UI，为啥也更新了</p>\n<p>原因开头已经表述过了，但具体的解决方（代）案（码）是什么呢</p>\n<blockquote>\n<p>talk is cheap, show me the code</p>\n</blockquote>\n<h2 id=\"未使用到-context-的\">未使用到 Context 的</h2>\n<p>对于像<code>Headerer</code>和<code>Counterer</code>这种没有直接使用到<code>Context</code>的，可通过寻常的解法：<code>memo</code>搞定</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">MHeaderer</span> = <span class=\"hljs-title function_\">memo</span>(<span class=\"hljs-title class_\">Headerer</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Header</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">MHeaderer</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>这样当再次重渲时就会跳过<code>Headerer</code>和<code>Counterer</code></p>\n<h2 id=\"使用到-context-的\">使用到 Context 的</h2>\n<p>针对于像<code>Counter</code>这种直接使用到<code>Context</code>的，<code>memo</code>已经搞不定了，不过由于<code>state</code>和<code>setState</code>并不强制绑定，我们可通过将其拆分到两个<code>Context</code>来避免不必要的重渲，即：</p>\n<p>分别创建两个<code>Context</code>，来将<code>state</code>和<code>setState</code>共享到全局</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">StateContext</span> = <span class=\"hljs-title function_\">createContext</span>(initialState);\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">DispatchContext</span> = <span class=\"hljs-title function_\">createContext</span>(initialDispatch);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">Store</span> = (<span class=\"hljs-params\">{ children }</span>) =&gt; {\n  <span class=\"hljs-keyword\">const</span> dispatch = <span class=\"hljs-title function_\">useMemo</span>(\n    <span class=\"hljs-function\">() =&gt;</span> ({ decrement, increment }),\n    [increment, decrement]\n  );\n\n  <span class=\"hljs-keyword\">return</span> (\n    <span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">StateContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{state}</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">DispatchContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{dispatch}</span>&gt;</span>\n        {children}\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">DispatchContext.Provider</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">StateContext.Provider</span>&gt;</span></span>\n  );\n};\n</code></pre>\n<p>在这里，<code>DispatchContext</code>的<code>value</code>必须使用<code>useMemo</code>缓存一下：<code>value</code>是一个对象，触发<code>state</code>更新后<code>Store</code>组件会重渲，如果不缓存，<code>value</code>也会改变，导致使用到<code>DispatchContext</code>的组件也会重渲，拆分了个寂寞。。。因此拆分后一定要记得打印一下日志，看有没有效果</p>\n"}},"__N_SSG":true}