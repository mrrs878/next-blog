{"pageProps":{"post":{"title":"函数式编程-柯里化/组合","tags":["tags"],"categories":"函数式编程","description":"# 柯里化(curry)\n\n只传递给函数一个参数，让它返回一个函数去处理剩下的参数\n\n```javascript\nconst _ = require(\"ramda\");\nconst accounting = require(\"accounting\");\n\nfunction match(reg, str) {\n  return str.match(reg);\n}\nlet match_ = _.c","createDate":"2019-10-15 15:24:40","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"柯里化curry\">柯里化(curry)</h1>\n<p>只传递给函数一个参数，让它返回一个函数去处理剩下的参数</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> _ = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;ramda&quot;</span>);\n<span class=\"hljs-keyword\">const</span> accounting = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;accounting&quot;</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">match</span>(<span class=\"hljs-params\">reg, str</span>) {\n  <span class=\"hljs-keyword\">return</span> str.<span class=\"hljs-title function_\">match</span>(reg);\n}\n<span class=\"hljs-keyword\">let</span> match_ = _.<span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">reg, str</span>) =&gt;</span> str.<span class=\"hljs-title function_\">match</span>(reg));\n<span class=\"hljs-keyword\">let</span> replace = _.<span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">reg, replacement, str</span>) =&gt;</span> str.<span class=\"hljs-title function_\">replace</span>(reg, replacement));\n<span class=\"hljs-keyword\">let</span> filter = _.<span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">f, any</span>) =&gt;</span> any.<span class=\"hljs-title function_\">filter</span>(f));\n<span class=\"hljs-keyword\">let</span> map = _.<span class=\"hljs-title function_\">curry</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">f, any</span>) =&gt;</span> any.<span class=\"hljs-title function_\">map</span>(f));\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;no curry&quot;</span>, <span class=\"hljs-title function_\">match</span>(<span class=\"hljs-regexp\">/\\s+/g</span>, <span class=\"hljs-string\">&quot;hello world&quot;</span>));\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;width curry:&quot;</span>, <span class=\"hljs-title function_\">match_</span>(<span class=\"hljs-regexp\">/\\s+/g</span>)(<span class=\"hljs-string\">&quot;hello world&quot;</span>)); <span class=\"hljs-comment\">// width curry: [ &#x27; &#x27; ]</span>\n\n<span class=\"hljs-keyword\">let</span> hasSpace = <span class=\"hljs-title function_\">match_</span>(<span class=\"hljs-regexp\">/\\s+/g</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">hasSpace</span>(<span class=\"hljs-string\">&quot;hello world&quot;</span>)); <span class=\"hljs-comment\">// [ &#x27; &#x27; ]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">match_</span>(<span class=\"hljs-regexp\">/\\s+/g</span>)(<span class=\"hljs-string\">&quot;spaceless&quot;</span>)); <span class=\"hljs-comment\">// null</span>\n\n<span class=\"hljs-keyword\">let</span> findSpace = <span class=\"hljs-title function_\">filter</span>(hasSpace);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">findSpace</span>([<span class=\"hljs-string\">&quot;hello world&quot;</span>, <span class=\"hljs-string\">&quot;spaceless&quot;</span>])); <span class=\"hljs-comment\">// [ &#x27;hello world&#x27; ]</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">filter</span>(<span class=\"hljs-title function_\">match_</span>(<span class=\"hljs-regexp\">/\\s+/g</span>))([<span class=\"hljs-string\">&quot;hello world&quot;</span>, <span class=\"hljs-string\">&quot;spaceless&quot;</span>])); <span class=\"hljs-comment\">// [ &#x27;hello world&#x27; ]</span>\n\n<span class=\"hljs-keyword\">let</span> noVowels = <span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[aeiou]/gi</span>);\n<span class=\"hljs-keyword\">let</span> censored = <span class=\"hljs-title function_\">noVowels</span>(<span class=\"hljs-string\">&quot;*&quot;</span>);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">censored</span>(<span class=\"hljs-string\">&quot;hello world&quot;</span>)); <span class=\"hljs-comment\">// h*ll* w*rld</span>\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/[aeiou]/gi</span>)(<span class=\"hljs-string\">&quot;*&quot;</span>)(<span class=\"hljs-string\">&quot;hello world&quot;</span>)); <span class=\"hljs-comment\">// h*ll* w*rld</span>\n</code></pre>\n<h1 id=\"组合compose\">组合(compose)</h1>\n<p>将多个函数结合产生另一个函数</p>\n<ul>\n<li>多个函数执行的过程中(<strong>由右致左</strong>)</li>\n<li>上一个函数的执行结果是下一个函数的参数</li>\n<li>compose 的分组满足结合律, compose(f, g, h) === compose(compose(f, g), h) === compose(f, compose(g, h))</li>\n</ul>\n<p>((y → z), (x → y), …, (o → p), ((a, b, …, n) → o)) → ((a, b, …, n) → z)</p>\n<pre><code class=\"hljs language-javascript\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">CARS</span> = [\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Ferrari FF&quot;</span>, <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">660</span>, <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">700000</span>, <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">true</span> },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Spyker C12 Zagato&quot;</span>,\n    <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">650</span>,\n    <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">648000</span>,\n    <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">false</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Jaguar XKR-S&quot;</span>,\n    <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">550</span>,\n    <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">132000</span>,\n    <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">false</span>\n  },\n  { <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Audi R8&quot;</span>, <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">525</span>, <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">114200</span>, <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">false</span> },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Aston Martin One-77&quot;</span>,\n    <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">750</span>,\n    <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">1850000</span>,\n    <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">true</span>\n  },\n  {\n    <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;Pagani Huayra&quot;</span>,\n    <span class=\"hljs-attr\">horsepower</span>: <span class=\"hljs-number\">700</span>,\n    <span class=\"hljs-attr\">dollar_value</span>: <span class=\"hljs-number\">1300000</span>,\n    <span class=\"hljs-attr\">in_stock</span>: <span class=\"hljs-literal\">false</span>\n  }\n];\n\n<span class=\"hljs-keyword\">const</span> isLastInStock = _.<span class=\"hljs-title function_\">compose</span>(\n  _.<span class=\"hljs-title function_\">prop</span>(<span class=\"hljs-string\">&quot;in_stock&quot;</span>),\n  _.<span class=\"hljs-property\">last</span>\n);\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">isLastInStock</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n\n<span class=\"hljs-keyword\">const</span> firstName = _.<span class=\"hljs-title function_\">compose</span>(\n  _.<span class=\"hljs-title function_\">prop</span>(<span class=\"hljs-string\">&quot;name&quot;</span>),\n  _.<span class=\"hljs-property\">head</span>\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">firstName</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_average</span>(<span class=\"hljs-params\">xs</span>) {\n  <span class=\"hljs-keyword\">return</span> _.<span class=\"hljs-title function_\">reduce</span>(_.<span class=\"hljs-property\">add</span>, <span class=\"hljs-number\">0</span>, xs) / xs.<span class=\"hljs-property\">length</span>;\n}\n<span class=\"hljs-keyword\">var</span> averageDollarValue = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cars</span>) {\n  <span class=\"hljs-keyword\">var</span> dollar_values = _.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">c</span>) {\n    <span class=\"hljs-keyword\">return</span> c.<span class=\"hljs-property\">dollar_value</span>;\n  }, cars);\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-title function_\">_average</span>(dollar_values);\n};\n\n<span class=\"hljs-keyword\">const</span> averageDollarValue_ = _.<span class=\"hljs-title function_\">compose</span>(\n  _average,\n  _.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> item.<span class=\"hljs-property\">dollar_value</span>)\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">averageDollarValue_</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">_underscore</span>(<span class=\"hljs-params\">word</span>) {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(word);\n}\n<span class=\"hljs-keyword\">const</span> sanitizeNames = _.<span class=\"hljs-title function_\">compose</span>(\n  _.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span>\n    _.<span class=\"hljs-title function_\">compose</span>(\n      _.<span class=\"hljs-property\">toLower</span>,\n      _.<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\W+/g</span>, <span class=\"hljs-string\">&quot;_&quot;</span>),\n      _.<span class=\"hljs-title function_\">prop</span>(<span class=\"hljs-string\">&quot;name&quot;</span>)\n    )(item)\n  )\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">sanitizeNames</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n\n<span class=\"hljs-keyword\">const</span> availablePrices = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cars</span>) {\n  <span class=\"hljs-keyword\">var</span> available_cars = _.<span class=\"hljs-title function_\">filter</span>(_.<span class=\"hljs-title function_\">prop</span>(<span class=\"hljs-string\">&quot;in_stock&quot;</span>), cars);\n  <span class=\"hljs-keyword\">return</span> available_cars\n    .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">x</span>) {\n      <span class=\"hljs-keyword\">return</span> accounting.<span class=\"hljs-title function_\">formatMoney</span>(x.<span class=\"hljs-property\">dollar_value</span>);\n    })\n    .<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;, &quot;</span>);\n};\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">availablePrices</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n\n<span class=\"hljs-keyword\">const</span> availablePrices_ = _.<span class=\"hljs-title function_\">compose</span>(\n  _.<span class=\"hljs-title function_\">join</span>(<span class=\"hljs-string\">&quot;, &quot;</span>),\n  _.<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">item</span> =&gt;</span> accounting.<span class=\"hljs-title function_\">formatMoney</span>(item.<span class=\"hljs-property\">dollar_value</span>)),\n  _.<span class=\"hljs-title function_\">filter</span>(_.<span class=\"hljs-title function_\">prop</span>(<span class=\"hljs-string\">&quot;in_stock&quot;</span>))\n);\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title function_\">availablePrices_</span>(<span class=\"hljs-variable constant_\">CARS</span>));\n</code></pre>\n<h1 id=\"pointfree\">pointfree</h1>\n<p>pointfree 模式指的是函数无须提及将要操作的数据是什么样的</p>\n<p>```javascript\n// 非pointfree </p>\n"}},"__N_SSG":true}