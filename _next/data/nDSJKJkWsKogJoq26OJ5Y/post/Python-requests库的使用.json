{"pageProps":{"post":{"title":"Python-requests库的使用","tags":["Python"],"categories":"Python","description":"# Python-requests库的使用\nurllib 的用法中有一些不方便的地方，比如处理网页验证和Cooki es 时，需要写 Opener 和 Handler 来处理。 为了更加方便地实现这些操作，就有了更为强大的库requests ，有了它 ， Cookies 、登录验证、代理设置等操作都变得极为简单。\n\n## 一切以官网为主\nhttp://docs.python-requests.o","createDate":"2018-11-14 11:41:55","updateDate":"10/1/2021, 3:34:43 AM","body":"<h1 id=\"python-requests库的使用\">Python-requests库的使用</h1>\n<p>urllib 的用法中有一些不方便的地方，比如处理网页验证和Cooki es 时，需要写 Opener 和 Handler 来处理。 为了更加方便地实现这些操作，就有了更为强大的库requests ，有了它 ， Cookies 、登录验证、代理设置等操作都变得极为简单。</p>\n<h2 id=\"一切以官网为主\">一切以官网为主</h2>\n<p><a href=\"http://docs.python-requests.org/en/master/\">http://docs.python-requests.org/en/master/</a></p>\n<h2 id=\"基本用法\">基本用法</h2>\n<h3 id=\"一个简单的例子\">一个简单的例子</h3>\n<p>urllib库中的 urlopen()法实际上是以GET方式请求网页，而requests中相应的方法就是get()\n方法。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://www.baidu.com&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(response))\n<span class=\"hljs-built_in\">print</span>(response.status_code)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(response.text))\n<span class=\"hljs-built_in\">print</span>(response.text)\n<span class=\"hljs-built_in\">print</span>(response.cookies)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JShz6r.png\" alt=\"enter image description here\"></p>\n<h3 id=\"get请求\">GET请求</h3>\n<h4 id=\"基本实例\">基本实例</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;simple test&#x27;</span>)\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://httpbin.org/get&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(response.text)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;params test&#x27;</span>)\ndata = {<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;germey&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-number\">22</span>}\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://httpbin.org/get&#x27;</span>, params=data)\n<span class=\"hljs-built_in\">print</span>(response.text)\n\n<span class=\"hljs-comment\"># 将json格式解析为字典格式</span>\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;json() test&#x27;</span>)\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://httpbin.org/get&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(response.text))\n<span class=\"hljs-built_in\">print</span>(response.json())\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-built_in\">type</span>(response.json()))\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JShDOJ.png\" alt=\"enter image description here\">\n<img src=\"https://t1.picb.cc/uploads/2018/11/14/JShYg1.png\" alt=\"enter image description here\">\n<img src=\"https://t1.picb.cc/uploads/2018/11/14/JShEP0.png\" alt=\"enter image description here\"></p>\n<h4 id=\"抓取网页\">抓取网页</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests, re\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;抓取网页测试&#x27;</span>)\nheaders = {<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&#x27;</span>}\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://www.zhihu.com/explore&#x27;</span>, headers = headers)\npattern = re.<span class=\"hljs-built_in\">compile</span>(<span class=\"hljs-string\">&#x27;explore-feed.*?question_link.*?&gt;(.*?)&lt;/a&gt;&#x27;</span>, re.S)\ntitle = re.findall(pattern, response.text)\n<span class=\"hljs-built_in\">print</span>(title)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSvydu.png\" alt=\"enter image description here\"></p>\n<h4 id=\"抓取二进制数据\">抓取二进制数据</h4>\n<p>图片、音频、视频这些文件本质上都是由二进制码组成的，由于有特定的保存格式和对应的解析方式， 我们才可以看到这些形形色色的多媒体 。 所以，想要抓取它们，就要拿到它们的二进制码。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;抓取二进制数据测试&#x27;</span>)\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://github.com/favicon.ico&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(response.text)\n<span class=\"hljs-built_in\">print</span>(response.content)  <span class=\"hljs-comment\"># Content of the response, in bytes</span>\n<span class=\"hljs-keyword\">with</span> <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;favicon.ico&#x27;</span>, <span class=\"hljs-string\">&#x27;wb&#x27;</span>) <span class=\"hljs-keyword\">as</span> f:\n    f.write(response.content)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSvJuD.png\" alt=\"enter image description here\"></p>\n<h4 id=\"添加headers\">添加headers</h4>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;添加headers测试&#x27;</span>)\nheaders = {<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&#x27;</span>}\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://www.zhihu.com/explore&#x27;</span>, headers = headers)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSvgsi.png\" alt=\"enter image description here\"></p>\n<h3 id=\"post请求\">POST请求</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\ndata = {<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;germy&#x27;</span>, <span class=\"hljs-string\">&#x27;age&#x27;</span>: <span class=\"hljs-string\">&#x27;22&#x27;</span>}\nresponse = requests.post(<span class=\"hljs-string\">&#x27;https://httpbin.org/post&#x27;</span>, data=data)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSvt6L.png\" alt=\"enter image description here\"></p>\n<h3 id=\"响应\">响应</h3>\n<p>发送请求后，得到的自然就是响应 。 在上面的实例中，我们使用 text 和 content 获取了响应的内容。 此外，还有很多属性和方法可以用来获取其他信息，比如状态码、响应头、 Cookies 等。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;响应测试&#x27;</span>)\nheaders = {<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&#x27;</span>}\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://www.jianshu.com&#x27;</span>, headers = headers)\n<span class=\"hljs-built_in\">print</span>(response.headers)\n<span class=\"hljs-built_in\">print</span>(response.cookies)\n<span class=\"hljs-comment\"># print(response.status_code)</span>\nexit() <span class=\"hljs-keyword\">if</span> <span class=\"hljs-keyword\">not</span> response.status_code == requests.codes.ok <span class=\"hljs-keyword\">else</span> <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;request successfully&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(response.content)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSx5ST.png\" alt=\"enter image description here\"></p>\n<h2 id=\"高级用法\">高级用法</h2>\n<h3 id=\"文件上传\">文件上传</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\nfiles = {<span class=\"hljs-string\">&#x27;file&#x27;</span>: <span class=\"hljs-built_in\">open</span>(<span class=\"hljs-string\">&#x27;favicon.ico&#x27;</span>, <span class=\"hljs-string\">&#x27;rb&#x27;</span>)}\nresponse = requests.post(<span class=\"hljs-string\">&#x27;https://httpbin.org/post&#x27;</span>, files = files)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSxvT1.png\" alt=\"enter image description here\"></p>\n<h3 id=\"会话维持\">会话维持</h3>\n<p>在 requests 中，如果直接利用 get()、post()等方法的确可以做到模拟网页的请求，但是这实际上是相当于不同的会话，也就是说相当于用了两个浏览器打开了不同的页面，其实解决这个问题的主要方法就是维持同一个会话 ， 也就是相当于打开一个新的浏览器选项卡而不是新开一个浏览器 。 但是又不想每次设置 cookies ，那该怎么办呢？这时候就有了新的利器--Session 对象 。利用它，我们可以方便地维护一个会话，而且不用担心cookies的问题，它会帮我们自动处理好。利用 Session ，可以做到模拟同一个会话而不用担心 Cookies 的问题。 它通常用于模拟登录成功之后再进行下一步的操作。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;session测试&#x27;</span>)\nsession = requests.Session()\nsession.get(<span class=\"hljs-string\">&#x27;https://httpbin.org/cookies/set/number/123456789&#x27;</span>)\nresponse = session.get(<span class=\"hljs-string\">&#x27;https://httpbin.org/cookies&#x27;</span>)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"https://t1.picb.cc/uploads/2018/11/14/JSLtir.png\" alt=\"enter image description here\"></p>\n<h3 id=\"ssl证书验证\">SSL证书验证</h3>\n<p>如果请求一个 HTTPS 站点，但是证书验证错误的页面时，就会报这样的错误，那么如何避免这个错误呢？很简单，把 verify 参数设置为False 即可。当然，我们也可以指定一个本地证书用作客户端证书，这可以是单个文件（包含密钥和证书）或一个包含两个文件路径的元组。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">import</span> logging\n<span class=\"hljs-keyword\">from</span> requests.packages <span class=\"hljs-keyword\">import</span> urllib3\n\nurllib3.disable_warnings()  <span class=\"hljs-comment\"># 忽略警告</span>\nlogging.captureWarnings(true)  <span class=\"hljs-comment\"># 捕获警告</span>\nresponse = requests.get(url, **verify = false**)  <span class=\"hljs-comment\"># 设置verify</span>\nresponse = requests.get(url, cert = (crt_path, key_path))  <span class=\"hljs-comment\"># 设置证书文件地址</span>\n<span class=\"hljs-built_in\">print</span>(response)\n</code></pre>\n<h3 id=\"代理设置\">代理设置</h3>\n<p>对于某些网站，在测试的时候请求几次 ， 能正常获取内容。 但是一旦开始大规模爬取，对于大规模且频繁的请求，网站可能会弹出验证码，或者跳转到登录认证页面 ， 更甚者可能会直接封禁客户端的 IP ，导致一定时间段内无法访问 。那么，为了防止这种情况发生，我们需要设置代理来解决这个问题，这就需要用到 proxies 参数。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\nproxies = {<span class=\"hljs-string\">&#x27;http&#x27;</span>: <span class=\"hljs-string\">&#x27;...&#x27;</span>\n           <span class=\"hljs-string\">&#x27;https&#x27;</span>: <span class=\"hljs-string\">&#x27;...&#x27;</span>\n           ...\n           }\nresponse = requests.get(url, proxies = proxies)\n</code></pre>\n<h3 id=\"超时设置\">超时设置</h3>\n<p>在本机网络状况不好或者服务器网络响应太慢甚至无响应时，我们可能会等待特别久的时间才可能收到响应，甚至到最后收不到响应而报错。 为了防止服务器不能及时响应，应该设置一个超时时间 ，即超过了这个时间还没有得到响应，那就报错。 这需要用到 timeout 参数。 这个时间的计算是发归请求到服务器返回响应的时间。实际上，请求分两个阶段，即连接()connect )和读取(read )。如果想永久等待，可以直接将 timeout 设置为 None(默认) 。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;有timeout异常捕获&#x27;</span>)\n<span class=\"hljs-keyword\">try</span>:\n    response = requests.get(<span class=\"hljs-string\">&#x27;https://www.baidu.com&#x27;</span>, timeout = <span class=\"hljs-number\">0.01</span>)\n    <span class=\"hljs-built_in\">print</span>(response.status_code)\n<span class=\"hljs-keyword\">except</span> requests.exceptions.Timeout:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;Timeout&#x27;</span>)\n<span class=\"hljs-keyword\">except</span> requests.exceptions.ConnectionError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;ConnextionError&#x27;</span>)\n<span class=\"hljs-keyword\">except</span> requests.exceptions.HTTPError:\n    <span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;HTTPError&#x27;</span>)\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;无timeout异常捕获&#x27;</span>)\nresponse = requests.get(<span class=\"hljs-string\">&#x27;https://www.baidu.com&#x27;</span>, timeout = (<span class=\"hljs-number\">0.01</span>, <span class=\"hljs-number\">0.01</span>))\n<span class=\"hljs-built_in\">print</span>(response.status_code)\n</code></pre>\n<p><img src=\"http://hellomrrs-imgs.oss-cn-shanghai.aliyuncs.com/18-11-14/91035917.jpg\" alt=\"enter image description here\"></p>\n<h3 id=\"身份认证\">身份认证</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> requests\n<span class=\"hljs-keyword\">from</span> requests.auth <span class=\"hljs-keyword\">import</span> HTTPBasicAuth\n\nresponse = requests.get(url, auth=HTTPBasicAuth(username, userpassword))\nresponse = requests,get(url, auth=(username, userpassword))\n</code></pre>\n<h3 id=\"prepared-request\">prepared request</h3>\n<p>前面介绍 urllib 时，我们可以将请求表示为数据结构，其中各个参数都可以通过一个 Request 对象来表示 。 这在 requests 里同样可以做到，这个数据结构就叫 Prepared Request。有了 Request 这个对象，就可以将请求当作独立的对象来看待，这样在进行队列调度时会非常方便。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">from</span> requests <span class=\"hljs-keyword\">import</span> Request, Session\n\n<span class=\"hljs-built_in\">print</span>(<span class=\"hljs-string\">&#x27;prepared request测试&#x27;</span>)\nurl = <span class=\"hljs-string\">&#x27;https://httpbin.org/post&#x27;</span>\ndata = {<span class=\"hljs-string\">&#x27;name&#x27;</span>: <span class=\"hljs-string\">&#x27;germey&#x27;</span>}\nheaders = {<span class=\"hljs-string\">&#x27;User-Agent&#x27;</span>: <span class=\"hljs-string\">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0&#x27;</span>}\n\nsession = Session()\nrequest = Request(<span class=\"hljs-string\">&#x27;POST&#x27;</span>, url, data = data, headers = headers)\nprepped = session.prepare_request(request)\nresponse = session.send(prepped)\n<span class=\"hljs-built_in\">print</span>(response.status_code)\n<span class=\"hljs-built_in\">print</span>(response.text)\n</code></pre>\n<p><img src=\"http://hellomrrs-imgs.oss-cn-shanghai.aliyuncs.com/18-11-14/46350763.jpg\" alt=\"enter image description here\"></p>\n"}},"__N_SSG":true}