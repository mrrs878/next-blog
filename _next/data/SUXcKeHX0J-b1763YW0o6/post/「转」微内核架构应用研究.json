{"pageProps":{"post":{"title":"「转」微内核架构应用研究","tags":["微内核"],"categories":"软件架构","description":"转载自: https://yunsong0922.github.io/2018/12/09/微内核架构应用研究/\n\n**微内核架构（Microkernel Architecture）也叫 Plugin Architecture，是一种基于插件的架构方式，通过编写精简的微内核来支撑以 plugin 的方式来添加更多丰富的功能**。微内核架构在我们常用的应用和框架里面非常常见，比如工具有 Intel","createDate":"2022-07-28 21:23:31","updateDate":"2022-05-16 22:38:14","body":"<p>转载自: <a href=\"https://yunsong0922.github.io/2018/12/09/%E5%BE%AE%E5%86%85%E6%A0%B8%E6%9E%B6%E6%9E%84%E5%BA%94%E7%94%A8%E7%A0%94%E7%A9%B6/\">https://yunsong0922.github.io/2018/12/09/微内核架构应用研究/</a></p>\n<p><strong>微内核架构（Microkernel Architecture）也叫 Plugin Architecture，是一种基于插件的架构方式，通过编写精简的微内核来支撑以 plugin 的方式来添加更多丰富的功能</strong>。微内核架构在我们常用的应用和框架里面非常常见，比如工具有 IntelliJ、Chrome、Sublime、Photoshop 等， 前端框架有 jQuery、Babel、Webpack 等，基本比较流行的应用和框架都采用了微内核架构，虽然具体技术实现不同，但从思想上，它们都利用了插件机制带来的扩展性和灵活性。</p>\n<p>微内核架构具体来说是什么样子的架构？为何具有如此大的威力？有哪些框架在使用它和架构以及如何使用的？下面的内容会进行具体的介绍。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">1、什么是微内核架构？</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>微内核架构包含两个核心概念：内核系统和插件模块</strong>。应用的逻辑被切分到内核系统和插件模块中，以提供很好的扩展性、灵活性和逻辑隔离性。<strong>内核系统是将系统所要完成的业务逻辑进行高度的抽象，在高度抽象概念的基础上以实现通用业务逻辑。插件模块是独立的组件，包含特定的处理逻辑和自定义代码，旨在增强或扩展微核心以产生额外的业务功能</strong>。通常，插件模块应独立于其他插件模块，当然也可以设计需要其他插件的插件。无论哪种方式，将插件之间的通信保持在最低限度以避免依赖性问题非常重要。</p>\n<p>内核系统在运行时候需要知道可用的插件，并获取它们的引用。比较常见的方式是微内核实现一种类<strong>注册表</strong>的机制，插件会注册到注册表中，从而微内核在适当的时机完成对插件的调用。微内核和插件之间的具体通信协议在架构模式层面并没做具体限制，可以是在同一个进程内，也可以是分布式的，可以通过 Socket 通信，也可以通过 HTTP 通信。关键的是<strong>插件可以扩展微内核，并且各个插件之间的功能各自独立</strong>。</p>\n<p><img src=\"/img/microkernel-architecture-0.png\" alt=\"微内核架构示意图\"></p>\n<p>下面让我们看看现有的框架是如何实现微内核架构的。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">2、 微内核架构的前端应用</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">2.1、 jQuery 的微内核架构实现</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>jQuery 是前端流行的综合性框架，为前端的发展做出了不朽的贡献，在 MV* 框架流行之前，jQuery 扛起了整个前端大旗。为什么 jQuery 能如此流行呢？其中一个重要的原因是 jQuery 的简单和非常容易扩展。jQuery 的插件规则非常简单，几乎没有具体的规则，这是它能在整个社区中实现的难以置信的多样性的原因之一。</p>\n<p>我们可以简单地<strong>通过向 jQuery 的 jQuery.fn 对象添加一个新的函数属性来编写一个插件</strong></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// 方法 1</span>\n(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">$</span>){\n  $.fn.<span class=\"hljs-property\">myPlugin</span>=<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n    <span class=\"hljs-comment\">//our plugin logic</span>\n  };\n})(jQuery);\n\n<span class=\"hljs-comment\">// 方法 2</span>\njQuery.<span class=\"hljs-title function_\">extend</span>({\n  <span class=\"hljs-attr\">myPlugin</span>: <span class=\"hljs-title function_\">funtion</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-comment\">//our plugin logic</span>\n  }\n})\n</code></pre>\n<p>这里我们通过两种方法，生成了 myPlugin myPlugin 中可以做任何我们想做的事情。</p>\n<p>具体插件使用方法如下</p>\n<pre><code class=\"hljs language-js\">$(<span class=\"hljs-string\">&quot;#elem&quot;</span>).<span class=\"hljs-title function_\">myPlugin</span>({\n  <span class=\"hljs-attr\">key</span>: <span class=\"hljs-string\">&quot;value&quot;</span>,\n});\n</code></pre>\n<p>这么简单的插件机制，jQuery 是如何实现的呢？jQuery 采用了原型设计模式</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// jQuery 入口函数</span>\n<span class=\"hljs-keyword\">var</span> jQuery = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">selector, context</span>) {\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> jQuery.<span class=\"hljs-title function_\">init</span>(selector, context);\n};\n\n<span class=\"hljs-comment\">// jQuery 核心原型定义，也是 jQuery plugin 的扩展接口</span>\njQuery.<span class=\"hljs-property\">fn</span> = jQuery.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n  <span class=\"hljs-attr\">hello</span>: <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">hello</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;hello world&quot;</span>);\n  },\n  <span class=\"hljs-comment\">//... 其他定义</span>\n};\n\n<span class=\"hljs-comment\">// 另一种扩展 plugin 的便捷方法，接收一个对象</span>\njQuery.<span class=\"hljs-property\">extend</span> = jQuery.<span class=\"hljs-property\">fn</span>.<span class=\"hljs-property\">extend</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">targetObj</span>) {\n  <span class=\"hljs-comment\">// 克隆 targetObj</span>\n};\n\n<span class=\"hljs-comment\">// jQuery 真正的实例化构造函数</span>\n<span class=\"hljs-keyword\">var</span> init = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">selector, context</span>) {\n  <span class=\"hljs-comment\">// init dom elements</span>\n};\ninit.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = jQuery.<span class=\"hljs-property\">fn</span>;\njQuery.<span class=\"hljs-property\">init</span> = init;\n$ = jQuery;\n</code></pre>\n<p>我们所有的扩展其实赋值给了 jQuery.prototype，这样在生成真正的 jQuery 对象的时候，相应的扩展就都可以使用了。jQuery 中自带的大量函数都是基于这种方式实现的。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">2.2、 Webpack 的微内核架构实现</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>Webpack 是前端领域熟知的打包框架，可以将各种资源打包到 js 文件中，统一进行管理。Webpack 之所以能灵活的加载各种类型的资源，并将这些资源以灵活的形式进行打包，得益于 Webpack 优雅的微内核架构设计。</p>\n\n      <h4>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">概念和架构设计</span>\n        <span class=\"suffix\"></span>\n      </h4>\n    <p>Webpack 的整体概念设计包括 Compiler、Loader 和 Plugin，</p>\n<ul>\n<li><p>Compiler - 从业务上来讲， Webpack 本质上就是一个编译器，Compiler 实现了核心的微内核架构，将 Loader 和 Plugin 合理的组织在一起</p>\n</li>\n<li><p>Loader - 顾名思义是不同类型的资源加载器，比如 css-loader，babel-loader</p>\n</li>\n<li><p>Plugin - Compiler 在整个编译过程中，以 Hook 的形式暴露出了一系列回调，以供开发者编写 Plugin 来接收 Hook 并处理</p>\n</li>\n</ul>\n<p>三者的关系如下图</p>\n<p><img src=\"/img/microkernel-architecture-1.png\" alt=\"webpack微内核架构中compiler、plugin、loader之间的关系\"></p>\n\n      <h4>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Loader 设计</span>\n        <span class=\"suffix\"></span>\n      </h4>\n    <p>Loader 和 Compiler 之间的关系非常灵活。Compiler 根据文件后缀筛选出相应的 Loader 来加载文件，比如用 css-loader 来加载 css 文件，用 babel-loader 来加载 jsx 文件。</p>\n<p>Loader 接收 Compiler 传递过来的字符串形式的文件，经过编译和转换成为 javascript 之后将结果返还给 webpack 的 Compiler。Compiler 会从返回的结果中解析需要继续加载的 module，继续逐级加载，直至加载完成整个 module 依赖图。这个记载过程中可能会遇到各种各样的资源类型，会分别找到相应的 Loader 来加载。</p>\n\n      <h4>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Tapable Plugin Framework</span>\n        <span class=\"suffix\"></span>\n      </h4>\n    <p>在讲 Webpack 的 Plugin 实现之前，需要提一下 webpack 中衍生出来的 <a href=\"https://github.com/webpack/tapable\">Tapable Plugin Framework</a>。<strong>Tapable 是 webpack 插件架构的核心，极大简化了 webpack 的整体架构</strong>。虽然它在为 webpack 服务，但庆幸的是 Tapable 的优雅抽象使得我们能用它来编写其他微内核架构。</p>\n<p>这里简单介绍一下 Tapable 的核心概念，更多细节可以参考 <a href=\"https://github.com/webpack/tapable\">Tapable Github</a></p>\n<p><strong>Tapable 中核心概念包括 Hook 和 Tap 。 Hook 是 Compiler 编译过程中主动释放出的接口，Tap 可以为理解 HookHandler</strong>。这看起来很像是 Event 和 EventHandler 的关系，但细细思考和看代码之后，其实差距还挺大的。</p>\n<p>在整个执行过程中，Tap 执行后会返回结果，并且这个返回结果会在后续的编译处理中使用，不论 Tap 是同步执行还是异步执行。而 Event 和 EventHandler 的关系，EventHandler 更像是 Event 发生后的一种副作用，不论是语义和编程模型都和 Hook 与 Tap 不同。</p>\n<p>Tapable 提供了多种类型的 Hook，以方便进行数据处理和收集。按照执行类型可以分为：<code>Sync</code>、<code>AsyncSeries</code>、<code>AsyncParallel</code>。按照返回结果可以分为: Basic、Waterfall、Bail、Loop。这使得 Compiler 的编程模型得到了极大简化。更多细节这里就不赘述了，如果想要了解更多请移步 <a href=\"https://github.com/webpack/tapable\">Tapable Github</a> 和 <a href=\"https://www.npmjs.com/package/@types/tapable\">Tapable Type Definition</a></p>\n\n      <h4>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Plugin 设计</span>\n        <span class=\"suffix\"></span>\n      </h4>\n    <p>在讲完了 Loader 和 Tapable 之后，Plugin 的逻辑也就更好理解了，Compiler 使用 Loader 加载完成 javascript 之后，会在 Compiler 中调用各种 Hook 来完成核心的打包编译逻辑，而这些核心的打包和处理逻辑全都是 Plugin 实现了 Hook 回调来完成的。下面举一个例子：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">SyncHook</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;tapable&quot;</span>);\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Car</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hooks</span> = {\n      <span class=\"hljs-attr\">accelerate</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SyncHook</span>([<span class=\"hljs-string\">&quot;newSpeed&quot;</span>]),\n      <span class=\"hljs-attr\">brake</span>: <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">SyncHook</span>(),\n    };\n  }\n\n  <span class=\"hljs-title function_\">setSpeed</span>(<span class=\"hljs-params\">newSpeed</span>) {\n    <span class=\"hljs-comment\">// 实现真正的加速</span>\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">hooks</span>.<span class=\"hljs-property\">accelerate</span>.<span class=\"hljs-title function_\">call</span>(newSpeed);\n  }\n}\n\n<span class=\"hljs-keyword\">const</span> myCar = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Car</span>();\n\n<span class=\"hljs-comment\">// Use the tap method to add a plugin</span>\nmyCar.<span class=\"hljs-property\">hooks</span>.<span class=\"hljs-property\">accelerate</span>.<span class=\"hljs-title function_\">tap</span>(<span class=\"hljs-string\">&quot;LoggerPlugin&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">newSpeed</span>) =&gt;</span>\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`Accelerating to <span class=\"hljs-subst\">${newSpeed}</span>`</span>)\n);\n\nmyCar.<span class=\"hljs-title function_\">setSpeed</span>(<span class=\"hljs-number\">13</span>);\n\n<span class=\"hljs-comment\">// 打印出 Accelerating to 13</span>\n</code></pre>\n"}},"__N_SSG":true}