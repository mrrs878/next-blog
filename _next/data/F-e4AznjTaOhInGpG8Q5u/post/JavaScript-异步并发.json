{"pageProps":{"post":{"title":"JavaScript-异步并发","tags":["异步","并发","队列","Promise.all"],"categories":"JavaScript","description":"来源于一道面试题\n\n_请实现如下的函数：可以批量请求数据，所有的 URL 地址在 urls 参数中，同时可以通过 max 参数控制请求的并发度，当所有请求结束后，需要执行 callback 回调函数。发送请求的函数直接使用 fetch 即可_\n\n划出重点：请求数据、控制请求的并发度\n\n## Promise.all\n\n第一眼想到 `Promise.all` 实现，于是开写，但写着写着发现不对劲，这","createDate":"2022-05-08 21:58:54","updateDate":"2022-05-08 22:39:51","body":"<p>来源于一道面试题</p>\n<p><em>请实现如下的函数：可以批量请求数据，所有的 URL 地址在 urls 参数中，同时可以通过 max 参数控制请求的并发度，当所有请求结束后，需要执行 callback 回调函数。发送请求的函数直接使用 fetch 即可</em></p>\n<p>划出重点：请求数据、控制请求的并发度</p>\n<h2 id=\"promiseall\">Promise.all</h2>\n<p>第一眼想到 <code>Promise.all</code> 实现，于是开写，但写着写着发现不对劲，这样貌似不算并发，或者说没有达到要求的并发度控制: <code>Promise.all</code>只能在当前所有<code>promises</code>请求完毕后才能开启下一次请求，这样并不能吃满 <code>max</code> 并发度，需要变换策略</p>\n<h2 id=\"闭包--循环--递归\">闭包 + 循环 + 递归</h2>\n<p>可以使用闭包+循环+递归来解决：循环控制并发度，递归来发送所有请求</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">request</span> = (<span class=\"hljs-params\">...args</span>) =&gt; <span class=\"hljs-title function_\">fetch</span>(...args).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> res.<span class=\"hljs-title function_\">json</span>());\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">minIn2</span> = (<span class=\"hljs-params\">a, b</span>) =&gt; (a &gt; b ? b : a);\n\n<span class=\"hljs-keyword\">const</span> macAddresses = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">10</span>)\n  .<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n  .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =&gt;</span> <span class=\"hljs-string\">`http://localhost:8080/<span class=\"hljs-subst\">${index}</span>`</span>);\n\n<span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">sendRequest</span>(<span class=\"hljs-params\">urls, max, callback</span>) {\n  <span class=\"hljs-keyword\">const</span> res = [];\n  <span class=\"hljs-keyword\">let</span> i = <span class=\"hljs-number\">0</span>;\n\n  <span class=\"hljs-keyword\">async</span> <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">doRequest</span>(<span class=\"hljs-params\">url</span>) {\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">const</span> r = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">request</span>(url);\n      res.<span class=\"hljs-title function_\">push</span>(r);\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      res.<span class=\"hljs-title function_\">push</span>(e);\n    } <span class=\"hljs-keyword\">finally</span> {\n      <span class=\"hljs-keyword\">if</span> (res.<span class=\"hljs-property\">length</span> === urls.<span class=\"hljs-property\">length</span>) {\n        <span class=\"hljs-title function_\">callback</span>(res);\n      }\n      <span class=\"hljs-keyword\">if</span> (i === urls.<span class=\"hljs-property\">length</span>) {\n        <span class=\"hljs-keyword\">return</span>;\n      }\n      <span class=\"hljs-title function_\">doRequest</span>(urls[i++]);\n    }\n  }\n\n  <span class=\"hljs-keyword\">for</span> (; i &lt; <span class=\"hljs-title function_\">minIn2</span>(max, urls.<span class=\"hljs-property\">length</span>); i += <span class=\"hljs-number\">1</span>) {\n    <span class=\"hljs-title function_\">doRequest</span>(urls[i]);\n  }\n}\n\n<span class=\"hljs-title function_\">sendRequest</span>(macAddresses, <span class=\"hljs-number\">3</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res);\n});\n</code></pre>\n<p>这里面有个关键的变量<code>i</code>，该变量维护了当前完成到哪个请求</p>\n<p>这个回答在面试时应该可以应付第一波攻势，但如果对方进一步发问，如果我的 urls 不是预先制定好的，我可以通过调用多次 <code>sendRequest</code> 来发送请求，那这应该怎么实现呢</p>\n<h2 id=\"队列\">队列</h2>\n<p>针对于进一步发问，这时候就没有那么简单了，因为我们同时还要维护所有urls，这样的话我们可以引入队列来解决，即：相较于上面的<code>i</code>，这里使用一个队列来维护当前完成到哪个请求</p>\n<ol>\n<li><p>使用一个<code>queue</code>来保存所有的请求</p>\n</li>\n<li><p>入队后立即出队</p>\n</li>\n<li><p>在出队过程中先判断有没有达到最大并发度，如果有直接退出出队逻辑，若没有，则执行当前节点，完毕后继续出队即重复当前逻辑</p>\n</li>\n</ol>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Queue</span> {\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\">{ concurrency = <span class=\"hljs-number\">1</span>, onCompleted } = {}</span>) {\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span> = [];\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span> = [];\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">concurrency</span> = concurrency;\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">onCompleted</span> = onCompleted;\n  }\n\n  <span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-params\">promise</span>) {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-title function_\">push</span>({\n        promise,\n        resolve,\n        reject,\n      });\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dequeue</span>();\n    });\n  }\n\n  <span class=\"hljs-title function_\">dequeue</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span>.<span class=\"hljs-property\">length</span> === <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">concurrency</span>) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">const</span> item = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">queue</span>.<span class=\"hljs-title function_\">shift</span>();\n    <span class=\"hljs-keyword\">if</span> (!item) {\n      <span class=\"hljs-keyword\">return</span>;\n    }\n\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span>.<span class=\"hljs-title function_\">push</span>(item.<span class=\"hljs-property\">promise</span>);\n      item\n        .<span class=\"hljs-title function_\">promise</span>()\n        .<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">value</span>) =&gt;</span> {\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span>.<span class=\"hljs-title function_\">shift</span>();\n          item.<span class=\"hljs-title function_\">resolve</span>(value);\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dequeue</span>();\n        })\n        .<span class=\"hljs-title function_\">catch</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">e</span>) =&gt;</span> {\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span>.<span class=\"hljs-title function_\">shift</span>();\n          item.<span class=\"hljs-title function_\">reject</span>(e);\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dequeue</span>();\n        });\n    } <span class=\"hljs-keyword\">catch</span> (e) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">pendingPromises</span>.<span class=\"hljs-title function_\">shift</span>();\n      item.<span class=\"hljs-title function_\">reject</span>(e);\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dequeue</span>();\n    }\n  }\n}\n</code></pre>\n<p>该队列每个节点为一个返回 Promise 的函数，因此使用时需要注意一下</p>\n<p>使用的话可以这样：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">request</span> = (<span class=\"hljs-params\">...args</span>) =&gt; <span class=\"hljs-title function_\">fetch</span>(...args).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">res</span>) =&gt;</span> res.<span class=\"hljs-title function_\">json</span>());\n\n<span class=\"hljs-keyword\">const</span> macAddresses = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-number\">10</span>)\n  .<span class=\"hljs-title function_\">fill</span>(<span class=\"hljs-string\">&quot;&quot;</span>)\n  .<span class=\"hljs-title function_\">map</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">_, index</span>) =&gt;</span> <span class=\"hljs-string\">`http://localhost:8080/<span class=\"hljs-subst\">${index}</span>`</span>);\n\n<span class=\"hljs-keyword\">const</span> queue = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Queue</span>({\n  <span class=\"hljs-attr\">concurrency</span>: <span class=\"hljs-number\">3</span>,\n  <span class=\"hljs-attr\">onCompleted</span>: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;completed&quot;</span>);\n  },\n});\n\nmacAddresses.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">address</span>) =&gt;</span> {\n  queue.<span class=\"hljs-title function_\">enqueue</span>(<span class=\"hljs-keyword\">async</span> () =&gt; {\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">request</span>(address);\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(address, res);\n  });\n});\n</code></pre>\n<h2 id=\"p-queue\">p-queue</h2>\n<p>上面实现的 Queue 还不够完善，npm 上有个非常完善的库<a href=\"https://www.npmjs.com/package/p-queue\">p-queue</a></p>\n"}},"__N_SSG":true}