{"pageProps":{"post":{"title":"JavaScript复习-执行机制","tags":["JavaScript","执行机制","EventLoop"],"categories":"2021复习","description":"众所周知，JavaScript是一门**单线程**、**异步执行**的语言。虽然在HTML5中提出了`web worker`（可以理解为**浏览器**为JavaScript开的*外挂*），但JavaScript是单线程运行的这一核心仍未改变，所有多线程都是通过单线程**模拟**出来的\n\n## JavaScript的执行与运行\n\n执行与运行不太一样，在不同环境下，比如Node.js、浏览器下，J","createDate":"2021-05-13 10:25:45","updateDate":"2021-06-10 11:03:31","body":"<p>众所周知，JavaScript是一门<strong>单线程</strong>、<strong>异步执行</strong>的语言。虽然在HTML5中提出了<code>web worker</code>（可以理解为<strong>浏览器</strong>为JavaScript开的<em>外挂</em>），但JavaScript是单线程运行的这一核心仍未改变，所有多线程都是通过单线程<strong>模拟</strong>出来的</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">JavaScript的执行与运行</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>执行与运行不太一样，在不同环境下，比如Node.js、浏览器下，JavaScript的执行结果是不一样的；而运行大多是指基于JavaScript引擎，如V8，结果是一致的</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">JavaScript中的异步</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>JavaScript中的异步主要通过event loop进行模拟，当我们执行JavaScript代码的时候其实就是往执行栈里放入函数，那么遇到异步代码怎么办？其实当遇到异步代码时，会被挂起并在需要执行的时候加入到<strong>task</strong>（有多种task）队列中。一旦执行栈为空，event loop就会从task中拿到需要执行的代码并放入执行栈中执行，所以本质上说JavaScript的异步还是同步行为</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">浏览器中的event loop</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>来自不同的<strong>任务源</strong>的任务会被分配到不同的task队列中，任务源可以分为<strong>微任务(micro task)</strong> 和 <strong>宏任务(macro task)<strong>。在ES6规范中，微任务被称为</strong>jobs</strong>，宏任务被称为<strong>task</strong></p>\n<p>微任务包括：<code>precess.nextTick</code>、<code>Promise</code>、<code>Mutation Observer</code></p>\n<p>宏任务包括：<code>script</code>、<code>setTimeout</code>、<code>setInterval</code>、<code>I/O</code>、<code>UI Rendering</code></p>\n<p><strong>宏任务中包含了 <code>script</code> ，因此浏览器会先执行一个宏任务，接下来由异步代码的话才会先执行微任务</strong></p>\n<p><strong>Promise的构造函数是同步执⾏，<code>then()</code>是异步执行</strong></p>\n<p>event loop 执行顺序</p>\n<ol>\n<li>先执行宏任务</li>\n<li>当执行完后<strong>执行栈为空</strong>，查询是否有异步代码需要执行</li>\n<li><strong>执行所有微任务</strong></li>\n<li>当执行完所有微任务，如有需要会渲染页面</li>\n<li>然后开始下一轮循环</li>\n</ol>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/browser_event_loop.png\" alt=\"event loop\"></p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">1</span>);\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">2</span>);\n  <span class=\"hljs-title class_\">Promise</span>.<span class=\"hljs-title function_\">resolve</span>().<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">3</span>);\n  });\n});\n<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Promise</span>(<span class=\"hljs-function\">(<span class=\"hljs-params\">resolve, reject</span>) =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">4</span>);\n  <span class=\"hljs-title function_\">resolve</span>(<span class=\"hljs-number\">5</span>);\n}).<span class=\"hljs-title function_\">then</span>(<span class=\"hljs-function\"><span class=\"hljs-params\">data</span> =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(data);\n});\n<span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">6</span>);\n});\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-number\">7</span>);\n\n<span class=\"hljs-comment\">// 1 4 7 5 2 3 6</span>\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Node.js中的event loop</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><strong>v11之后和浏览器保持一致</strong></p>\n<p>Node.js中的event loop分为6个阶段，它们会按照循序反复运行。每当进入到某一个阶段的时候都会从对应的回调队列中取出函数去执行，当<strong>队列为空</strong>或者<strong>执行的回调函数数量达到系统设定的阈值</strong>，就会进入到下一阶段</p>\n<p>Node.js的event loop中，执行宏队列的回调任务有6个阶段：</p>\n<p><img src=\"http://mrrsblog.oss-cn-shanghai.aliyuncs.com/node_event_loop.png\" alt=\"event loop\"></p>\n<ol>\n<li><p>timers</p>\n<p> <strong>timers</strong>阶段会执行<code>setTimeout</code>、<code>setInterval</code>回调，并且是由<strong>pool</strong>阶段控制的。</p>\n</li>\n<li><p>I/O</p>\n<p> <strong>I/O</strong>阶段会处理一些上一轮循环中少许未执行的I/O回调</p>\n</li>\n<li><p>idle, prepare</p>\n</li>\n<li><p>poll</p>\n<p> 计算应该阻塞并轮询I / O的时间，然后处理轮询队列中的事件</p>\n<ul>\n<li>如果poll队列不为空，遍历队列并同步执行回调，直到队列为空或达到系统限制</li>\n<li>如果poll队列为空，<ol>\n<li>如果有setImmediate回调需要执行，poll阶段会停止并进入<strong>check阶段</strong></li>\n<li>如果没有，会等待回调被加入队列中并立即执行回调，这里同样有个超时时间防止一直等待下去</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>check</p>\n<p> 执行<code>setImmediate</code>回调</p>\n</li>\n<li><p>colse callbacks</p>\n<p> 执行close事件</p>\n<p> 当发生以下任一情况时会触发 &#39;close&#39; 事件：</p>\n<ul>\n<li>调用 <code>rl.close()</code> 方法，且 <code>readline.Interface</code> 实例放弃对 <code>input</code> 流和 <code>output</code> 流的控制；</li>\n<li><code>input</code> 流接收到其 <code>end</code> 事件；</li>\n<li><code>input</code> 流接收到 <code>&lt;ctrl&gt;-D</code> 以发信号传输结束<code>（EOT）</code>；</li>\n<li><code>input</code> 流接收到 <code>&lt;ctrl&gt;-C</code> 以发信号 <code>SIGINT</code>，并且 <code>readline.Interface</code> 实例上没有注册 &#39;SIGINT&#39; 事件监听器。</li>\n</ul>\n</li>\n</ol>\n"}},"__N_SSG":true}