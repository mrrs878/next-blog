{"pageProps":{"post":{"title":"webpack学习-HMR","tags":["webpack","HMR"],"categories":"webpack","description":"## WHAT\n\nHMR: (hot module replacement)热模块替换/模块热替换，见名思意，即无需刷新在内存环境中即可替换掉过旧模块。与 Live Reload 相对应\n\n> PS: Live Reload，当代码进行更新后，在浏览器自动刷新以获取最新前端代码\n\n`*.css`: 可以使用 HMR 功能，因为`style-loader`内部实现了\n\n`*.js`: 默认不能使用","createDate":"2022-02-09 20:41:29","updateDate":"2022-05-20 19:38:52","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHAT</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>HMR: (hot module replacement)热模块替换/模块热替换，见名思意，即无需刷新在内存环境中即可替换掉过旧模块。与 Live Reload 相对应</p>\n<blockquote>\n<p>PS: Live Reload，当代码进行更新后，在浏览器自动刷新以获取最新前端代码</p>\n</blockquote>\n<p><code>*.css</code>: 可以使用 HMR 功能，因为<code>style-loader</code>内部实现了</p>\n<p><code>*.js</code>: 默认不能使用 HMR 功能 --&gt; 需要修改 js 代码，添加支持 HMR 功能的代码</p>\n<p>注意: HMR 功能对<code>js</code>的处理，只能处理非入口<code>js</code>文件的其他文件</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// js文件开启HMR</span>\n<span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {\n  <span class=\"hljs-comment\">// 需要检测的文件</span>\n  <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>(<span class=\"hljs-string\">&quot;path/to/HMRFile.js&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-comment\">/*\n     * HMRFile文件关键逻辑\n     */</span>\n  });\n\n  <span class=\"hljs-comment\">// 或者简单得传个空函数</span>\n  <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>(<span class=\"hljs-function\">() =&gt;</span> {});\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHY</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>一个模块发生变化，只会重新打包这一个模块(而不是打包所有模块)极大提升构建速度</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">HOW</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    \n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">关于 chunk 和 module</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>chunk 就是若干 module 打成的包，一个 chunk 应该包括多个 module，一般来说最终会形成一个 file。而 js 以外的资源，webpack 会通过各种 loader 转化成一个 module，这个模块会被打包到某个 chunk 中，并不会形成一个单独的 chunk。</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">关于 HMR 和 webpack-dev-server, webpack-hot-middleware, webpack-dev-middleware 之间的关系</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p><code>webpack-dev-server</code> 实现了封装好的的 HMR，除了配置文件和命令行参数外，较难定制开发</p>\n<p><code>webpack-hot-middleware</code> / <code>webpack-dev-middleware</code> 可搭配服务端框架实现个性化的 HMR 服务</p>\n<p>两者的区别在于</p>\n<ol>\n<li><p><code>webpack-dev-server</code> 使用 websocket 来作为客户端/服务端之间的通信方式，后者使用<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/EventSource\">EventSource</a></p>\n</li>\n<li><p>通信过程中使用的事件名不同。前者使用 <code>hash</code> 和 <code>ok</code> ，后者使用 <code>build</code> 和 <code>sync</code></p>\n</li>\n</ol>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">HMR原理</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>webpack-dev-server hmr流程图</p>\n<p><img src=\"/img/webpack-hmr-0.jpeg\" alt=\"webpack-dev-server hmr流程图\"></p>\n<p>在<code>webpack的</code>运行时使用<code>__webpack__modules__</code>维护所有的模块</p>\n<p>而热模块替换的原理，即通过<code>chunk</code>的方式加载最新的<code>modules</code>，找到<code>__webpack__modules__</code>中对应的模块逐一替换，并删除其上下缓存。</p>\n<p>其精简数据结构用以下代码表示:</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack 运行时代码</span>\n<span class=\"hljs-keyword\">const</span> __webpack_modules = [\n  <span class=\"hljs-function\">(<span class=\"hljs-params\"><span class=\"hljs-variable language_\">module</span>, <span class=\"hljs-built_in\">exports</span>, __webpack_require__</span>) =&gt;</span> {\n    <span class=\"hljs-title function_\">__webpack_require__</span>(<span class=\"hljs-number\">0</span>);\n  },\n  <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;这是一号模块&quot;</span>);\n  },\n];\n\n<span class=\"hljs-comment\">// HMR Chunk 代码</span>\n<span class=\"hljs-comment\">// JSONP 异步加载的所需要更新的 modules，并在 __webpack_modules__ 中进行替换</span>\nself[<span class=\"hljs-string\">&quot;webpackHotUpdate&quot;</span>](<span class=\"hljs-number\">0</span>, {\n  <span class=\"hljs-number\">1</span>: <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;这是最新的一号模块&quot;</span>);\n  },\n});\n</code></pre>\n<p>其下为更具体更完整的流程，每一步都涉及众多，有兴趣的可阅读<code>webpack-dev-server</code>及开发环境<code>webpack</code>运行时的源码。</p>\n<ol>\n<li><p><code>webpack-dev-server</code>将打包输出<code>bundle</code>使用内存型文件系统控制，而非真实的文件系统。此时使用的是<a href=\"https://github.com/streamich/memfs\">memfs</a>模拟 node.js fs API</p>\n</li>\n<li><p>每当文件发生变更时，<code>webpack</code>将会重新编译，<code>webpack-dev-server</code>将会监控到此时文件变更事件，并找到其对应的<code>module</code>。此时使用的是<a href=\"https://github.com/paulmillr/chokidar\">chokidar</a>监控文件变更</p>\n</li>\n<li><p><code>webpack-dev-server</code>将会把变更模块通知到浏览器端，此时使用<code>websocket</code>与浏览器进行交流。此时使用的是<a href=\"https://github.com/websockets/ws\">ws</a></p>\n</li>\n<li><p>浏览器根据<code>websocket</code>接收到<code>hash</code>，并通过<code>hash</code>以<a href=\"https://en.wikipedia.org/wiki/JSONP\">JSONP</a>的方式请求更新模块的<code>chunk</code></p>\n</li>\n<li><p>浏览器加载<code>chunk</code>，并使用新的模块对旧模块进行热替换，并删除其缓存</p>\n</li>\n</ol>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">各大框架中的 HMR</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p>react, <a href=\"https://github.com/facebook/react/blob/main/packages/react-refresh/README.md\">react-refresh</a></p>\n</li>\n<li><p>vue, <a href=\"https://www.npmjs.com/package/vue-loader\">vue-loader</a></p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://github.com/shfshanyue/Daily-Question/issues/79\">【Q078】webpack 中什么是 HMR，原理是什么 #79</a></p>\n"}},"__N_SSG":true}