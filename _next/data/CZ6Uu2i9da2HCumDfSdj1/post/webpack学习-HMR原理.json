{"pageProps":{"post":{"title":"webpack学习-HMR 原理","tags":["webpack","HMR","webpack-dev-server"],"categories":"webpack","description":"研究一下`webpack-dev-server`的 HMR 原理\n\n基于 webpack5 单页应用构建流程分析\n\n## 如何使用\n\n在配置文件中添加\n\n```js\nmodule.exports = {\n  devServer: {\n    hot: true,\n  },\n};\n```\n\n后，即可启用`webpack-dev-server`的 HMR 功能，只是启用，还需要在业务代码中告诉`we","createDate":"2022-05-24 17:56:32","updateDate":"2022-05-20 19:38:52","body":"<p>研究一下<code>webpack-dev-server</code>的 HMR 原理</p>\n<p>基于 webpack5 单页应用构建流程分析</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">如何使用</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在配置文件中添加</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">devServer</span>: {\n    <span class=\"hljs-attr\">hot</span>: <span class=\"hljs-literal\">true</span>,\n  },\n};\n</code></pre>\n<p>后，即可启用<code>webpack-dev-server</code>的 HMR 功能，只是启用，还需要在业务代码中告诉<code>webpack-dev-server</code>如何更新代码</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>) {\n  <span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">hot</span>.<span class=\"hljs-title function_\">accept</span>([<span class=\"hljs-string\">&quot;./content.js&quot;</span>], <span class=\"hljs-function\">() =&gt;</span> {\n    <span class=\"hljs-title function_\">render</span>();\n  });\n}\n</code></pre>\n<p>这样，在<code>content.js</code>发生改变后，会执行回调函数，即重新<code>render</code></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">流程</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>核心流程总结如下</p>\n<p>包括<code>webpack-dev-server</code>和<code>webpack.HotModuleReplacementPlugin</code></p>\n<ol>\n<li><p><code>webpack-dev-server</code>会启动静态文件服务器，用于返回打包后的资源，该服务器使用<a href=\"https://github.com/webpack/memory-fs\">memory-fs</a>模拟原生文件系统</p>\n</li>\n<li><p><code>webpack-dev-server</code>会修改<code>entry</code>，将<code>webpack.HotModuleReplacementPlugin</code>的一些运行时代码注入到 chunk 中，并开启<code>webpack</code>的<code>watch</code>模式</p>\n</li>\n<li><p>客户端请求文件后，会和<code>webpack-dev-server</code>建立一个<code>ws</code>服务</p>\n</li>\n<li><p>文件发生变动后，<code>webpack-dev-server</code>会重新打包文件，生成两个额外文件：<code>chunkId.hash.hot-update.json</code>和<code>chunkId.hash.hot-update.js</code>，同时会通过<code>ws</code>向客户端发送消息，告知客户端有最新的代码</p>\n</li>\n<li><p>客户端收到消息后先请求<code>chunkId.hash.hot-update.json</code>，然后通过返回值去请求<code>chunkId.hash.hot-update.js</code></p>\n</li>\n<li><p>增量更新客户端代码并重新执行<code>module.hot.accept</code>传递进来的回调函数</p>\n</li>\n</ol>\n<p>其中<code>webpack-dev-server</code>和<code>webpack.HotModuleReplacementPlugin</code>分别完成的工作包括</p>\n<p><code>webpack-dev-server</code>:</p>\n<ul>\n<li><p>启动一个<code>express</code>服务器，返回打包后的文件</p>\n</li>\n<li><p>修改<code>compiler.outputFileSystem</code>为<code>memory-fs</code></p>\n</li>\n<li><p>建立一个<code>ws</code>服务</p>\n</li>\n<li><p>修改<code>entry</code>文件，将一些代码添加到 chunk 中（和服务端建立<code>ws</code>，处理各种消息等）</p>\n</li>\n</ul>\n<p><code>webpack.HotModuleReplacementPlugin</code>:</p>\n<ul>\n<li><p>代码变动后生成<code>chunkId.hash.hot-update.json</code>和<code>chunkId.hash.hot-update.js</code></p>\n</li>\n<li><p>请求新模块，热更代码等</p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">原理</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>将分为以下几个模块分析</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">建立 HMR 服务</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>创建一个 websocket 服务：在代码变动并编译完成后，向客户端发送两个消息<code>{ type: &quot;hash&quot;, data: &quot;xxx&quot; }</code>和<code>{ type: &quot;ok&quot; }</code></p>\n<p><img src=\"/img/webpack-hmr-1.png\" alt=\"hmr websocket消息\"></p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">更新 compiler</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p><code>webpack-dev-server</code>会更新配置文件中的<code>entry</code>，将<code>webpack-dev-server/lib/client.js</code>打包进 chunk 中</p>\n<p><code>webpack-dev-server/lib/client.js</code>会在客户端执行，并和 HMR Server 建立连接，接收消息</p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">注入运行时</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p><code>webpack.HotModuleReplacementPlugin</code>会注入一些运行时代码</p>\n<p><img src=\"/img/webpack-hmr-2.png\" alt=\"hmr 运行时\"></p>\n<p>此时，构建产物中即包含了所有运行 HMR 所需的客户端运行时与接口。这些 HMR 运行时会在浏览器执行一套基于 WebSocket 消息的时序框架，如图：</p>\n<p><img src=\"/img/webpack-hmr-3.png\" alt=\"hmr 运行时\"></p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">增量构建</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>除注入客户端代码外，<code>webpack.HotModuleReplacementPlugin</code>还会在代码发生变动后生成两个文件<code>chunkId.hash.hot-update.json</code>和<code>chunkId.hash.hot-update.js</code>，稍后<code>webpack-dev-server</code>会向客户端发送<code>hash</code>和<code>ok</code>消息</p>\n<p><img src=\"/img/webpack-hmr-1.png\" alt=\"hmr 运行时\"></p>\n\n      <h3>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">应用更新</span>\n        <span class=\"suffix\"></span>\n      </h3>\n    <p>客户端在接收到<code>webpack-dev-server</code>中<code>ws</code>服务发送的<code>hash</code>和<code>ok</code>消息后，会根据最新的<code>hash</code>获取<code>chunkId.hash.hot-update.json</code>文件，然后根据文件中提及到的<code>chunk</code>，再去请求<code>chunkId.hash-hot.update.js</code></p>\n<p><img src=\"/img/webpack-hmr-4.png\" alt=\"hmr 运行时\"></p>\n<p><em>注意，在 Webpack 4 及之前，热更新文件以模块为单位，即所有发生变化的模块都会生成对应的热更新文件； Webpack 5 之后热更新文件以 chunk 为单位，如上例中，main chunk 下任意文件的变化都只会生成 main.[hash].hot-update.js 更新文件。</em></p>\n<p><code>chunkId.hash-hot.update.js</code>拿到后会将代码更新到<code>__webpack_require__.c</code>中，并且执行<code>module.hot.accept</code>回调</p>\n<p>至此，热更新完毕</p>\n"}},"__N_SSG":true}