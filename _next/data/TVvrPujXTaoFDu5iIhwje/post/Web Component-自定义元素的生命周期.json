{"pageProps":{"post":{"title":"Web Component-自定义元素的生命周期","tags":["微前端","WebComponent"],"categories":"微前端","description":"在之前大概了解了 Web Component，知道是怎么玩的，不过在查阅资料后发现之前有些错误\n\n## Node.cloneNode 的局限性\n\n在之前，使用的是`template.content.cloneNode(true);`来创建出一个新的节点，这种方法有一些局限性：会复制原节点的所有属性及属性值，其中就包括`id`，这样页面中就有多个`id`一样的元素了\n\n> 拷贝它所有的属性以及属性","createDate":"2022-04-21 21:06:23","updateDate":"2022-01-08 22:40:37","body":"<p>在之前大概了解了 Web Component，知道是怎么玩的，不过在查阅资料后发现之前有些错误</p>\n<h2 id=\"nodeclonenode-的局限性\">Node.cloneNode 的局限性</h2>\n<p>在之前，使用的是<code>template.content.cloneNode(true);</code>来创建出一个新的节点，这种方法有一些局限性：会复制原节点的所有属性及属性值，其中就包括<code>id</code>，这样页面中就有多个<code>id</code>一样的元素了</p>\n<blockquote>\n<p>拷贝它所有的属性以及属性值,当然也就包括了属性上绑定的事件(比如 onclick=&quot;alert(1)&quot;),但不会拷贝那些使用 addEventListener()方法或者 node.onclick = fn 这种用 JavaScript 动态绑定的事件. --mdn</p>\n</blockquote>\n<p>MDN 同样也给出警告</p>\n<blockquote>\n<p>注意:为了防止一个文档中出现两个 ID 重复的元素,使用 cloneNode()方法克隆的节点在需要时应该指定另外一个与原 ID 值不同的 ID</p>\n</blockquote>\n<p>而且，生成的节点的<code>ownerDocument</code>仍然指向源节点的<code>ownerDocument</code></p>\n<p>既然这个方法有一定的局限性，那么有没有更好的方法呢？有的！</p>\n<h2 id=\"documentimportnode\">document.importNode</h2>\n<blockquote>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/importNode\">document.importNode</a>将外部文档的一个节点拷贝一份,然后可以把这个拷贝的节点插入到当前文档中</p>\n</blockquote>\n<p>使用方式</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// deep参数表示是否递归复制源节点的所有子节点</span>\n<span class=\"hljs-keyword\">const</span> node = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">importNode</span>(externalNode, deep);\n</code></pre>\n<p>注意：</p>\n<p>新生成节点的 <code>parentNode</code> 是 <code>null</code>，因为它还没有插入当前文档的文档树中，<strong>属于游离状态</strong>，因此无法对其进行操作</p>\n<p>这样的话我们就可以很方便的修改新节点的<code>ownerDocument</code>（在<code>append</code>之后自动指向当前<code>document</code>）</p>\n<p>试试新的 api 来创建<em>组件</em></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">super</span>();\n      <span class=\"hljs-comment\">// ...</span>\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">importNode</span>(template.<span class=\"hljs-property\">content</span>, <span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-comment\">/**\n       * 注意，要先将节点插入到shadowRoot后才能对其进行操作\n       */</span>\n      shadowRoot.<span class=\"hljs-title function_\">appendChild</span>(content);\n      <span class=\"hljs-comment\">// ...</span>\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<h2 id=\"htmlelement-的生命周期\">HTMLElement 的生命周期</h2>\n<p>在之前，我们都是将各种操作直接写在构造函数里，这显然有些臃肿，那么有没有一些办法可以将这些逻辑分发出去呢？有的！</p>\n<p>在<code>HTMLElement</code>内，有一些<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\">生命周期</a></p>\n<ul>\n<li><p><code>connectedCallback</code>，当 <code>custom element</code> 首次被插入文档 DOM 时被调用</p>\n</li>\n<li><p><code>disconnectedCallback</code>，当 <code>custom element</code>从文档 DOM 中删除时被调用</p>\n</li>\n<li><p><code>adoptedCallback</code>， 当 <code>custom element</code>被移动到新的文档时被调用</p>\n</li>\n<li><p><code>attributeChangedCallback</code>，当 <code>custom element</code>增加、删除、修改自身属性时被调用</p>\n</li>\n</ul>\n<p>据此，我们可以重构一下之前的<em>组件</em></p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n  <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n    <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">observedAttributes</span>() {\n      <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;title&quot;</span>];\n    }\n    <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">super</span>();\n      <span class=\"hljs-comment\">// 会自动向this上挂载一个shadowRoot</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attachShadow</span>({ <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;open&quot;</span> });\n      <span class=\"hljs-keyword\">const</span> template = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#mHeaderTemplate&quot;</span>);\n      <span class=\"hljs-comment\">// const content = template.content.cloneNode(true);</span>\n      <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">importNode</span>(template.<span class=\"hljs-property\">content</span>, <span class=\"hljs-literal\">true</span>);\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">appendChild</span>(content);\n    }\n\n    <span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-keyword\">const</span> loginBtn = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#login&quot;</span>);\n      loginBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;title&quot;</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);\n      });\n    }\n\n    <span class=\"hljs-title function_\">attributeChangedCallback</span>(<span class=\"hljs-params\">name, oldValue, newValue</span>) {\n      <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&quot;title&quot;</span>) {\n        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#content&quot;</span>).<span class=\"hljs-property\">innerText</span> = newValue;\n      }\n    }\n  }\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre>\n<p>在这里，我们使用<code>attributeChangedCallback</code>来监听<em>组件</em>属性变化，在<code>title</code>属性发生变化时，更新元素的值。该回调会返回三个参数：</p>\n<ul>\n<li><p><code>name</code>，变化的属性的名字</p>\n</li>\n<li><p><code>oldValue</code>，属性之前的值</p>\n</li>\n<li><p><code>newValue</code>，要设置的值</p>\n</li>\n</ul>\n<p>（react 写的多了，有点梦回 vue 的感觉 🤔）</p>\n<p>此外有一点要注意：</p>\n<p>需要在<code>static get observedAttributes</code>函数里声明一下要监听的属性名</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">observedAttributes</span>() {\n  <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;title&quot;</span>];\n}\n</code></pre>\n<p>完整代码</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeaderTemplate&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"language-css\">\n        <span class=\"hljs-selector-pseudo\">:host</span> {\n          <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">32px</span>;\n        }\n\n        <span class=\"hljs-selector-class\">.content</span> {\n          <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#f00</span>;\n        }\n      </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">span</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;content&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;content&quot;</span>&gt;</span>我是头部<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">span</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;login&quot;</span>&gt;</span>login<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-header</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;mHeader&quot;</span> <span class=\"hljs-attr\">title</span>=<span class=\"hljs-string\">&quot;hello&quot;</span> /&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">MHeader</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">HTMLElement</span> {\n        <span class=\"hljs-keyword\">static</span> <span class=\"hljs-keyword\">get</span> <span class=\"hljs-title function_\">observedAttributes</span>() {\n          <span class=\"hljs-keyword\">return</span> [<span class=\"hljs-string\">&quot;title&quot;</span>];\n        }\n        <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-variable language_\">super</span>();\n          <span class=\"hljs-comment\">// 会自动向this上挂载一个shadowRoot</span>\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">attachShadow</span>({ <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&quot;open&quot;</span> });\n          <span class=\"hljs-keyword\">const</span> template = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#mHeaderTemplate&quot;</span>);\n          <span class=\"hljs-comment\">// const content = template.content.cloneNode(true);</span>\n          <span class=\"hljs-keyword\">const</span> content = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">importNode</span>(template.<span class=\"hljs-property\">content</span>, <span class=\"hljs-literal\">true</span>);\n          <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">appendChild</span>(content);\n        }\n\n        <span class=\"hljs-title function_\">connectedCallback</span>(<span class=\"hljs-params\"></span>) {\n          <span class=\"hljs-keyword\">const</span> loginBtn = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#login&quot;</span>);\n          loginBtn.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;click&quot;</span>, <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&quot;title&quot;</span>, <span class=\"hljs-string\">&quot;登录成功&quot;</span>);\n          });\n        }\n\n        <span class=\"hljs-title function_\">attributeChangedCallback</span>(<span class=\"hljs-params\">name, oldValue, newValue</span>) {\n          <span class=\"hljs-keyword\">if</span> (name === <span class=\"hljs-string\">&quot;title&quot;</span>) {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#content&quot;</span>).<span class=\"hljs-property\">innerText</span> = newValue;\n          }\n        }\n      }\n\n      <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">customElements</span>.<span class=\"hljs-title function_\">define</span>(<span class=\"hljs-string\">&quot;m-header&quot;</span>, <span class=\"hljs-title class_\">MHeader</span>);\n\n      <span class=\"hljs-keyword\">const</span> mHeader = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#mHeader&quot;</span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2 id=\"总结\">总结</h2>\n<p>由于<code>Node.cloneNode</code>仍默认保留新节点的<code>ownerDocument</code>，因此使用起来没法放开，有些需要注意的地方。不过我们可以使用<code>document.importNode</code>来实现相同的功能，该API创建的节点处于游离状态，在进行<code>append</code>操作后会自动修正<code>ownerDocument</code>的指向</p>\n<p>通过使用<code>custom elements</code>提供的生命周期函数，我们可以很方便地监听属性变化来做一些逻辑，但还是那句话书写起来有些不够便捷，需要用到原生 dom 操作 api，没准 jQuery 会借着 Web Components 再重新活跃起来</p>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components\">MDN-Web Components</a></p>\n<p><a href=\"https://github.com/mdn/web-components-examples\">MDN/web-components-examples</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Node/cloneNode\">Node.cloneNode(deep)</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Document/importNode\">document.importNode</a></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Web_Components/Using_custom_elements#%E4%BD%BF%E7%94%A8%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0\">使用 custom elements</a></p>\n"}},"__N_SSG":true}