{"pageProps":{"post":{"title":"Web Component-Lit","tags":["微前端","WebComponent","Attribute","Property"],"categories":"微前端","description":"在前几篇中，我们基于原生的 Web Components 开发了一个`Reply`组件，大概长这样\n\n![web component reply](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa68a485f5242f5b5e1eb75dfc801c1~tplv-k3u1fbpfcp-zoom-1.image)\n\n功能是完成了，不过这些","createDate":"2022-04-26 20:49:40","updateDate":"2022-04-26 22:54:37","body":"<p>在前几篇中，我们基于原生的 Web Components 开发了一个<code>Reply</code>组件，大概长这样</p>\n<p><img src=\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2fa68a485f5242f5b5e1eb75dfc801c1~tplv-k3u1fbpfcp-zoom-1.image\" alt=\"web component reply\"></p>\n<p>功能是完成了，不过这些都是裸用 Web Components，有不少缺陷：</p>\n<ol>\n<li><p>性能问题。由于我们没有任何 dom diff 的操作，接收到数据后直接渲染一个节点及其子节点，过于简单粗暴</p>\n</li>\n<li><p>数据传输问题。我们在上一篇处理数据中提到使用<code>property</code>来处理父子组件交互问题，但这样就没法给子组件传递初始属性</p>\n</li>\n<li><p>效率。可以看到，仅仅是一个简单的<code>Reply</code>组件，就写了很多琐碎的 dom 操作，如果组件复杂一点，代码量肯定会激增</p>\n</li>\n<li><p>and so on</p>\n</li>\n</ol>\n<p>好在现在有一个库，可以帮助我们解决这些基础问题，使得我们可以专注于处理业务需求</p>\n<p><a href=\"https://lit.dev/\">Lit</a></p>\n<h2 id=\"lit-是什么\">Lit 是什么</h2>\n<blockquote>\n<p>Lit is a simple library for building fast, lightweight web components.</p>\n</blockquote>\n<p>奥，用来创建 Web Components 的一个库</p>\n<p>官网上非常醒目地表达出其特点：Simple、Fast、Web Components，而且还对这三个特点做了说明</p>\n<p>Simple：基于原生 Web Components，添加了一些响应式、声明式模版语法和其它一些特性</p>\n<p>Fast：构建后体积非常小，5KB，而且没有虚拟DOM\\增量更新</p>\n<p>Web Components：基于原生 Web Components，可以和各种框架、平台无缝衔接</p>\n<p>看起来还是挺有意思的，可以试用一下</p>\n<p>这是官网给出的示例</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> { html, css, <span class=\"hljs-title class_\">LitElement</span> } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;lit&quot;</span>;\n<span class=\"hljs-keyword\">import</span> { customElement, property } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;lit/decorators.js&quot;</span>;\n\n@<span class=\"hljs-title function_\">customElement</span>(<span class=\"hljs-string\">&quot;simple-greeting&quot;</span>)\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">SimpleGreeting</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">LitElement</span> {\n  <span class=\"hljs-keyword\">static</span> styles = css`<span class=\"language-css\">\n    <span class=\"hljs-selector-tag\">p</span> {\n      <span class=\"hljs-attribute\">color</span>: blue;\n    }\n  `</span>;\n\n  @<span class=\"hljs-title function_\">property</span>()\n  name = <span class=\"hljs-string\">&quot;Somebody&quot;</span>;\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> html`<span class=\"language-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello, </span><span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.name}</span><span class=\"language-xml\">!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>`</span>;\n  }\n}\n\n&lt;simple-greeting name=<span class=\"hljs-string\">&quot;World&quot;</span>&gt;&lt;/simple-greeting&gt;;\n</code></pre>\n<p>开起来还是挺简单的，那么就先试用一下，使用 Lit 来重构 Reply 组件</p>\n<h2 id=\"使用-lit-重构-reply-组件\">使用 Lit 重构 Reply 组件</h2>\n<p>配置开发环境的过程就略过了，直接进入编码环节</p>\n<p>先将目光移到上述的示例，该示例创建了一个<code>simple-greeting</code>组件</p>\n<p>首先，使用<code>customElement</code>注解，定义了一个组件<code>simple-greeting</code>，这个对标<code>customElements.define</code></p>\n<p>接着，使用<code>css</code>函数创建样式，这个对标<code>template&gt;style</code></p>\n<p>然后，使用<code>property</code>声明了一个属性，这个对标原生的<code>setAttribute/getAttribute</code></p>\n<p>最后，使用<code>html</code>函数创建了一个 dom 模版</p>\n<p>按照上面的步骤，可以很简单地修改我们的代码</p>\n<pre><code class=\"hljs language-jsx\"><span class=\"hljs-keyword\">import</span> {\n  <span class=\"hljs-title class_\">LitElement</span>,\n  css,\n  html,\n} <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;https://cdn.jsdelivr.net/gh/lit/dist@2.2.2/all/lit-all.min.js&quot;</span>;\n\n<span class=\"hljs-keyword\">class</span> <span class=\"hljs-title class_\">Reply</span> <span class=\"hljs-keyword\">extends</span> <span class=\"hljs-title class_ inherited__\">LitElement</span> {\n  <span class=\"hljs-keyword\">static</span> styles = css`<span class=\"language-css\">`</span>;\n\n  <span class=\"hljs-keyword\">static</span> properties = {\n    <span class=\"hljs-attr\">placeholder</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-title class_\">String</span> },\n  };\n\n  <span class=\"hljs-title function_\">constructor</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-variable language_\">super</span>();\n    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">avatar</span> = <span class=\"hljs-string\">&quot;https://joeschmoe.io/api/v1/random&quot;</span>;\n  }\n\n  <span class=\"hljs-title function_\">onSubmit</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">const</span> comment = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">shadowRoot</span>.<span class=\"hljs-title function_\">querySelector</span>(<span class=\"hljs-string\">&quot;#input&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> res = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">dispatchEvent</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">CustomEvent</span>(<span class=\"hljs-string\">&quot;submit-comment&quot;</span>));\n  }\n\n  <span class=\"hljs-title function_\">render</span>(<span class=\"hljs-params\"></span>) {\n    <span class=\"hljs-keyword\">return</span> html`<span class=\"language-xml\">\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;reply-c&quot;</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">&quot;comments-c&quot;</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;commentsContainer&quot;</span>&gt;</span>\n          </span><span class=\"hljs-subst\">${<span class=\"hljs-variable language_\">this</span>.comments.map(\n            (comment) =&gt;\n              html`<span class=\"language-xml\">\n                <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">m-comment</span>\n                  <span class=\"hljs-attr\">.avatar</span>=<span class=\"hljs-string\">&quot;</span></span></span><span class=\"hljs-subst\">${comment.avatar}</span><span class=\"language-xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">&quot;</span>\n                  <span class=\"hljs-attr\">.nickName</span>=<span class=\"hljs-string\">&quot;</span></span></span><span class=\"hljs-subst\">${comment.nickName}</span><span class=\"language-xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">&quot;</span>\n                  <span class=\"hljs-attr\">.comment</span>=<span class=\"hljs-string\">&quot;</span></span></span><span class=\"hljs-subst\">${comment.comment}</span><span class=\"language-xml\"><span class=\"hljs-tag\"><span class=\"hljs-string\">&quot;</span>\n                /&gt;</span>\n              `</span>\n          )}</span><span class=\"language-xml\">\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    `</span>;\n  }\n}\n</code></pre>\n<p>可以看到，我们代码里已经没有监听<code>comments</code>的逻辑，Lit 会帮我们做监听，变化时自动重渲</p>\n<p>总体改造起来还是挺顺利的，有点 React + Vue 组合起来的感觉，只是在<code>App</code>里向<code>Reply</code>组件传递<code>comments</code>属性时耗费点时间，由于没看清官网的文档，一直使用的是<code>&lt;m-reply comments=${comments} /&gt;</code>来传递，导致<code>Reply</code>组件一直接受不到值，最后翻看官网的示例，发现传递复杂类型的值时需要在前面加一个<code>.</code>（有点坑，整个改造时间有将近一半时间卡在这里 😭）</p>\n<p>开发体验一般，欠缺一些没有语法提示和高亮</p>\n<p>完整代码在<a href=\"https://github.com/mrrs878/web-components/blob/main/reply-lit.html\">这里</a>（在这里，为了更进一步体现组件化的思想，我们创建了三个组件<code>App</code>、<code>Reply</code>、<code>Comment</code>。<code>App</code>是根组件，用来创建页面，并将之前的<code>Reply</code>组件拆分为<code>Reply</code> + <code>Comment</code>）</p>\n<h2 id=\"总结\">总结</h2>\n<p>使用起来有利有弊，性能较裸写肯定有提升，但开发体验还待提高，值得尝试一下</p>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://lit.dev/docs/\">Lit</a></p>\n"}},"__N_SSG":true}