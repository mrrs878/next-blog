{"pageProps":{"post":{"title":"Docker-基于Travis、Github搭建CI&CD自动化部署之自动部署","tags":["Docker实战","自动部署"],"categories":"Docker","description":"> CentOS@7.5\n\n# 创建travis用户，配置免密登录\n\n```shell script\nuseradd travis\n\npasswd travis\n\nvim /etc/sudoers\n# 找到#Allow root to run any commands anywhere这一段注释，在下面新增一行：\ntravis  ALL=(ALL)   ALL\n\nsu travis\n\ncd ~","createDate":"2020-08-11 10:32:00","updateDate":"2020-10-16 15:07:00","body":"<blockquote>\n<p><a href=\"mailto:&#67;&#x65;&#110;&#x74;&#x4f;&#x53;&#64;&#x37;&#46;&#53;\">&#67;&#x65;&#110;&#x74;&#x4f;&#x53;&#64;&#x37;&#46;&#53;</a></p>\n</blockquote>\n<h1 id=\"创建travis用户，配置免密登录\">创建travis用户，配置免密登录</h1>\n<pre><code class=\"hljs language-shell\">useradd travis\n\npasswd travis\n\nvim /etc/sudoers\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">找到<span class=\"hljs-comment\">#Allow root to run any commands anywhere这一段注释，在下面新增一行：</span></span>\ntravis  ALL=(ALL)   ALL\n\nsu travis\n\ncd ~\n\nssh-keygen -t rsa\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">passphase一定要为空</span>\n\nchmod 700 ~/.ssh/\nchmod 600 ~/.ssh/*\n\ncd .ssh/\ncat id_rsa.pub &gt;&gt; authorized_keys\ncat authorized_keys\n</code></pre>\n<h1 id=\"安装ruby\">安装Ruby</h1>\n<pre><code class=\"hljs language-shell\">yum install gcc-c++ patch readline readline-devel zlib zlib-devel \\\n   libyaml-devel libffi-devel openssl-devel make \\\n   bzip2 autoconf automake libtool bison iconv-devel sqlite-devel\n\ncurl -sSL https://rvm.io/mpapis.asc | gpg --import -\ncurl -L get.rvm.io | bash -s stable\n\nsource /etc/profile.d/rvm.sh\nrvm reload\n\nrvm install 2.4.4\n\nrvm use 2.4.2 --default\n</code></pre>\n<h2 id=\"安装travis\">安装Travis</h2>\n<pre><code class=\"hljs language-shell\">gem install travis\n</code></pre>\n<h2 id=\"添加加密的私钥至代码仓库\">添加加密的私钥至代码仓库</h2>\n<p><strong>切换至travis用户，在~目录下拉取代码</strong></p>\n<pre><code class=\"hljs language-shell\">su travis\n\ntravis login\n\ntravis encrypt-file ~/.ssh/id_rsa --add\n</code></pre>\n<p>此时<code>.travis.yml</code>会添加配置项</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">before_install:</span>\n\n<span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">openssl</span> <span class=\"hljs-string\">aes-256-cbc</span> <span class=\"hljs-string\">-K</span> <span class=\"hljs-string\">$encrypted_f91baf41390f_key</span> <span class=\"hljs-string\">-iv</span> <span class=\"hljs-string\">$encrypted_f91baf41390f_iv</span>\n\n  <span class=\"hljs-string\">-in</span> <span class=\"hljs-string\">id_ras_deploy.enc</span> <span class=\"hljs-string\">-out</span> <span class=\"hljs-string\">~/.ssh/id_ras_deploy</span> <span class=\"hljs-string\">-d</span>\n</code></pre>\n<p>*<em>注意<del>/.ssh有可能为</del>/.ssh需要去掉\\*</em></p>\n<p>解释下解密命令中<code>-in</code>和<code>-out</code>参数:</p>\n<ul>\n<li>in 参数指定待解密的文件，位于仓库的根目录(Travis执行任务时会先把代码拉到Travis自己的服务器上，并进入仓库更目录)</li>\n<li>out 参数指定解密后的密钥存放在<strong>Travis服务器</strong>的~/.ssh/id_rsa</li>\n</ul>\n<h2 id=\"配置after_success钩子\">配置after_success钩子</h2>\n<p>项目根目录下创建<code>update.sh</code></p>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\">#</span><span class=\"language-bash\">!/bin/bash</span>\n\necho &quot;pulling image...&quot;\ndocker pull mrrs878/blog:latest\n\necho &quot;stopping old app&quot;\ndocker container stop blog\n\necho &quot;remove old container&quot;\ndocker container rm blog\n\necho &quot;crete new container&quot;\ndocker container create --name blog -p 8081:80 mrrs878/blog:latest\n\necho &quot;starting new app&quot;\ndocker container start blog\n\necho &quot;awesome, you succeeded!&quot;\n</code></pre>\n<p><code>.travis.yml</code>添加<code>after_success</code>配置项</p>\n<pre><code class=\"hljs language-yaml\"><span class=\"hljs-attr\">after_success:</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">chmod</span> <span class=\"hljs-number\">600</span> <span class=\"hljs-string\">~/.ssh/id_rsa</span>\n  <span class=\"hljs-bullet\">-</span> <span class=\"hljs-string\">ssh</span> <span class=\"hljs-string\">travis@服务器ip</span> <span class=\"hljs-string\">-o</span> <span class=\"hljs-string\">StrictHostKeyChecking=no</span> <span class=\"hljs-string\">&#x27;cd ~/blog &amp;&amp; sh ./update.sh&#x27;</span>\n</code></pre>\n<h2 id=\"已存项目迁移\">已存项目迁移</h2>\n<ol>\n<li>docker hub新建仓库</li>\n<li>复制<code>.dockerignore/.travis.yml/Dockerfile/nginx.conf/update.sh</code>到项目根目录</li>\n<li>修改<code>.travis.yml</code>相关配置（项目名称）</li>\n<li>修改<code>update.sh</code>相关配置（项目目录）</li>\n<li>提交代码</li>\n<li>登录服务器，切换至Travis账户</li>\n<li>切换至<code>~</code>目录拉取项目代码</li>\n<li>使用<code>travis encrypt-file ~/.ssh/id_rsa --add</code>生成密钥。*<em>注意<del>/.ssh有可能为</del>/.ssh需要去掉\\*</em></li>\n<li>前往Travis控制台开启监控</li>\n<li>手动触发第一次构建</li>\n</ol>\n<h1 id=\"ref\">Ref</h1>\n<p><a href=\"https://blog.csdn.net/zzzcl112/article/details/80531792\">centos7 安装rvm及ruby</a></p>\n<p><a href=\"https://segmentfault.com/a/1190000018687703\">手摸手教你搭建 Travis CI 持续集成和自动化部署</a></p>\n<p><a href=\"https://blog.csdn.net/weixin_34088838/article/details/91367043\">Travis-CI自动化测试并部署至自己的CentOS服务器</a></p>\n"}},"__N_SSG":true}