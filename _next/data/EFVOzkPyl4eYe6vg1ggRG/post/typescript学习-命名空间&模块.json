{"pageProps":{"post":{"title":"typescript学习-命名空间&模块","tags":["namespace"],"categories":"typescript","description":"## 模块\n\nTypeScript 与 ES6 一样，任何包含顶级 `import` 或者 `export` 的文件都被当成一个模块。相反地，如果一个文件不带有顶级的 `import` 或者 `export` 声明，那么它的内容被视为全局可见的。\n\n例如我们在在一个 TypeScript 项目下任意文件中（不带有 `export` / `import` ）声明一个变量 `a` 。然后在另一个文","createDate":"2021-10-08 03:28:30","updateDate":"2021-10-08 16:36:57","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">模块</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>TypeScript 与 ES6 一样，任何包含顶级 <code>import</code> 或者 <code>export</code> 的文件都被当成一个模块。相反地，如果一个文件不带有顶级的 <code>import</code> 或者 <code>export</code> 声明，那么它的内容被视为全局可见的。</p>\n<p>例如我们在在一个 TypeScript 项目下任意文件中（不带有 <code>export</code> / <code>import</code> ）声明一个变量 <code>a</code> 。然后在另一个文件同样声明一个变量 <code>a</code> ，这时候会出现错误信息：</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/namespace-0.png\" alt=\"重复声明\"></p>\n<p>如果需要解决这个问题，则通过import或者export引入模块系统即可，具体不再赘述。</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">命名空间</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>命名空间一个最明确的目的就是解决重名问题</p>\n<p>命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的</p>\n<p>这样，在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中</p>\n<p>TypeScript 中命名空间使用 <code>namespace</code> 来定义，语法格式如下：</p>\n<pre><code class=\"hljs language-ts\"><span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title class_\">Util</span> {\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sum</span> = (<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) =&gt; a + b;\n}\n\n<span class=\"hljs-keyword\">namespace</span> <span class=\"hljs-title class_\">Tools</span> {\n  <span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">sub</span> = (<span class=\"hljs-params\">a: <span class=\"hljs-built_in\">number</span>, b: <span class=\"hljs-built_in\">number</span></span>) =&gt; a - b;\n}\n\n<span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-title class_\">Tools</span>.<span class=\"hljs-title function_\">sub</span>(<span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>));\n</code></pre>\n<p>命名空间本质上是一个对象，作用是将一系列相关的<strong>全局变量</strong>组织到一个对象的属性，上述代码编译后如下：</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Util</span>;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Util</span>) {\n    <span class=\"hljs-title class_\">Util</span>.<span class=\"hljs-property\">sum</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) { <span class=\"hljs-keyword\">return</span> a + b; };\n})(<span class=\"hljs-title class_\">Util</span> || (<span class=\"hljs-title class_\">Util</span> = {}));\n<span class=\"hljs-keyword\">var</span> <span class=\"hljs-title class_\">Tools</span>;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">Tools</span>) {\n    <span class=\"hljs-title class_\">Tools</span>.<span class=\"hljs-property\">sub</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">a, b</span>) { <span class=\"hljs-keyword\">return</span> a - b; };\n})(<span class=\"hljs-title class_\">Tools</span> || (<span class=\"hljs-title class_\">Tools</span> = {}));\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">区别</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p>命名空间是位于全局命名空间下的一个普通的带有名字的  JavaScript  对象，使用起来十分容易。但就像其它的全局命名空间污染一样，它<strong>很难去识别组件之间的依赖关系</strong>，尤其是在大型的应用中</p>\n</li>\n<li><p>像命名空间一样，模块可以包含代码和声明。不同的是模块可以声明它的依赖</p>\n</li>\n<li><p>在正常的TS项目开发过程中并不建议用命名空间，但<strong>通常在通过 d.ts 文件标记 js 库类型</strong>的时候使用命名空间，主要作用是给编辑器/IDE编写代码的时候参考使用</p>\n</li>\n</ul>\n"}},"__N_SSG":true}