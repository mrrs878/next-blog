{"pageProps":{"post":{"title":"webpack学习-ModuleFederation","tags":["webpack","ModuleFederation"],"categories":"webpack","description":"学习webpack@5.73.0的 ModuleFederation\n\n## WHAT\n\nwebpack 提供的一种跨项目模块共享机制\n\n先通过一个 🌰 了解一下\n\n![webpack ModuleFederation](/img/webpack-mf-0.png)\n\n如图所示，分别创建了两个项目 `host` 和 `remote`\n\n- `remote` 中创建了两个组件 `Button`","createDate":"2022-06-11 18:51:42","updateDate":"2022-06-12 22:51:42","body":"<p>学习<a href=\"mailto:&#119;&#x65;&#x62;&#x70;&#x61;&#99;&#x6b;&#x40;&#x35;&#46;&#55;&#51;&#x2e;&#x30;\">&#119;&#x65;&#x62;&#x70;&#x61;&#99;&#x6b;&#x40;&#x35;&#46;&#55;&#51;&#x2e;&#x30;</a>的 ModuleFederation</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHAT</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>webpack 提供的一种跨项目模块共享机制</p>\n<p>先通过一个 🌰 了解一下</p>\n<p><img src=\"/img/webpack-mf-0.png\" alt=\"webpack ModuleFederation\"></p>\n<p>如图所示，分别创建了两个项目 <code>host</code> 和 <code>remote</code></p>\n<ul>\n<li><code>remote</code> 中创建了两个组件 <code>Button</code> 和 <code>Header</code></li>\n<li><code>host</code> 中的 <code>bootstrap.jsx</code> 引用了两个组件 (注意，这两个组件在 <code>host</code> 项目中并未定义)</li>\n</ul>\n<p>分别在两个项目下执行 <code>npx webpack serve</code> ，然后访问 <code>host</code> 的开发地址 <code>http://localhost:8080/</code> 效果如图所示，接着尝试修改 <code>remote</code> 中的 <code>components/Header.jsx</code> 发现页面中也相应发生变化</p>\n<p>🤔</p>\n<p>也就是说，我们在 <code>host</code> 中引用了 <code>remote</code> 中的组件？😱</p>\n<p>对的，这就是 webpack5 提供的新特性 ModuleFederation ，中文直译模块联邦</p>\n<p>联邦模块有两个主要概念： <code>host</code> （消费其他 <code>remote</code> ）和 <code>remote</code> （被 <code>host</code> 消费）。 每个项目可以是 <code>host</code> 也可以是 <code>remote</code> ，也可以两个都是。可以通过 webpack 配置来区分，可以参考上述的例子</p>\n<ul>\n<li><p>作为 <code>host</code> 需要配置 <code>remotes</code> 列表</p>\n</li>\n<li><p>作为 <code>remote</code> 需要配置项目名（ <code>name</code> ），打包后的文件名（ <code>filename</code> ），提供的模块（ <code>exposes</code> ）</p>\n</li>\n</ul>\n<p>而且想要开启这一特性，只需要少许的配置即可</p>\n<p>在需要共享的项目中，即上述的 <code>remote</code> 中，添加这个 webpack 配置</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">ModuleFederationPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>).<span class=\"hljs-property\">container</span>;\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ModuleFederationPlugin</span>({\n      <span class=\"hljs-comment\">// 当前应用的名字，全局唯一ID，通过 name/{expose} 的方式使用</span>\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;remote&quot;</span>,\n      <span class=\"hljs-comment\">// *可选，打包方式，与 name 保持一致即可</span>\n      <span class=\"hljs-attr\">library</span>: { <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;var&quot;</span>, <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;remote&quot;</span> },\n      <span class=\"hljs-comment\">// 共享组件/模块打包后所在的文件，使用者直接导入这个文件即可</span>\n      <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&quot;remoteEntry.js&quot;</span>,\n      <span class=\"hljs-attr\">exposes</span>: {\n        <span class=\"hljs-comment\">// 这里便是我们要共享的模块/组件，引用方式为 import(name/{expose})，比如 import(&#x27;remote/Button&#x27;)</span>\n        <span class=\"hljs-string\">&quot;./Button&quot;</span>: <span class=\"hljs-string\">&quot;./src/components/Button.jsx&quot;</span>,\n        <span class=\"hljs-string\">&quot;./Header&quot;</span>: <span class=\"hljs-string\">&quot;./src/components/Header.jsx&quot;</span>,\n      },\n      <span class=\"hljs-comment\">// 在这里指定需要共享的package</span>\n      <span class=\"hljs-attr\">shared</span>: {\n        <span class=\"hljs-attr\">react</span>: { <span class=\"hljs-attr\">singleton</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">requiredVersion</span>: <span class=\"hljs-string\">&quot;^18.1.0&quot;</span> },\n        <span class=\"hljs-string\">&quot;react-dom&quot;</span>: { <span class=\"hljs-attr\">singleton</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">requiredVersion</span>: <span class=\"hljs-string\">&quot;^18.1.0&quot;</span> },\n      },\n    }),\n  ],\n};\n</code></pre>\n<p>同时，在需要引用这些组件的项目中，即上述的<code>host</code>项目，webpack 配置文件中新增这些配置</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-keyword\">const</span> { <span class=\"hljs-title class_\">ModuleFederationPlugin</span> } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;webpack&quot;</span>).<span class=\"hljs-property\">container</span>;\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">ModuleFederationPlugin</span>({\n      <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&quot;host&quot;</span>,\n      <span class=\"hljs-comment\">// 表示当前应用是一个 Host，可以引用 remote 中 expose 的模块</span>\n      <span class=\"hljs-attr\">remotes</span>: {\n        <span class=\"hljs-attr\">remote</span>: <span class=\"hljs-string\">&quot;remote@http://localhost:8081/remoteEntry.js&quot;</span>,\n      },\n      <span class=\"hljs-comment\">// 在这里指定需要共享的package</span>\n      <span class=\"hljs-comment\">// 在使用 Module Federation 时，Host、Remote 必须配置一致的 shared 这样才会生效</span>\n      <span class=\"hljs-attr\">shared</span>: {\n        <span class=\"hljs-attr\">react</span>: { <span class=\"hljs-attr\">singleton</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">requiredVersion</span>: <span class=\"hljs-string\">&quot;^18.1.0&quot;</span> },\n        <span class=\"hljs-string\">&quot;react-dom&quot;</span>: { <span class=\"hljs-attr\">singleton</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">requiredVersion</span>: <span class=\"hljs-string\">&quot;^18.1.0&quot;</span> },\n      },\n    }),\n  ],\n};\n</code></pre>\n<p>在这里，我们也可以简单得分析一下 host 应用加载的 js 文件</p>\n<p><img src=\"/img/webpack-mf-1.png\" alt=\"webpack ModuleFederation配置shared的构建文件\"></p>\n<p>如图所示，在本示例中 host 加载了三个 remote 的文件<code>remoteEntry.js</code>和<code>src_components_Header_jsx.js</code>与<code>src_components_Button_jsx.js</code>，其中后两者是加载的组件代码，<code>remoteEntry.js</code>是入口文件，可以发现并没有加载 react 相关的源码，这是因为我们配置了<code>shared</code>，这样 remote 就可以和 host 共用一套 react（在这里，react 是被打包进<code>main.js</code>中）。如果没有配置<code>shared</code>选项，那么会单独加载一份 react 代码</p>\n<p><img src=\"/img/webpack-mf-2.png\" alt=\"webpack ModuleFederation未配置shared的构建文件\"></p>\n<p>可以看到，这时会单独加载一份react源码</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">WHY</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>在构建工具层面上对模块共享、模块加载做一些扩展、优化</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">HOW</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>修改了 <code>webpack_require</code> 的部分实现，在 <code>require</code> 的时候从远程加载资源，缓存到全局对象 <code>window[&quot;webpackChunk&quot;+appName]</code> 中，然后合并到 <code>webpack_modules</code> 中</p>\n<p>webpack 每次打包都会将资源全部包裹在一个立即执行函数里面，这样虽然避免了全局环境的污染，但也使得外部不能访问内部模块。 在这个立即执行函数里面，webpack 使用 <code>webpack_modules</code> 对象保存所有的模块代码，然后用内部定义的 <code>webpack_require</code> 方法从 <code>webpack_modules</code> 中加载模块。并且在异步加载和文件拆分两种情况下向全局暴露一个 <code>webpackChunk</code> 数组用于沟通多个 webpack 资源，这个数组通过被 webpack 重写 <code>push</code> 方法，会在其他资源向 <code>webpackChunk</code> 数组中新增内容时同步添加到 <code>webpack_modules</code> 中从而实现模块整合</p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">参考</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><a href=\"https://www.zoo.team/article/webpack-modular\">模块联邦浅析</a></p>\n<p><a href=\"https://webpack.docschina.org/concepts/module-federation/#Uncaught-Error-Shared-module-is-not-available-for-eager-consumption\">webpack 中文文档</a></p>\n<p><a href=\"https://github.com/module-federation/module-federation-examples/tree/master/basic-host-remote\">module-federation-examples/basic-host-remote</a></p>\n"}},"__N_SSG":true}