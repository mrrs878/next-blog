{"pageProps":{"post":{"title":"webpack学习-0","tags":["webpack"],"categories":"webpack","description":"## webpack\n\n`webpack`是一个现代的`JavaScript`应用程序打包工具。当`webpack`处理应用程序时，会递归构建一个**依赖关系图**，其中包含应用程序需要的每个模块，然后将这个模块打包成一个或多个bundle\n\n![概念图](https://mrrsblog.oss-cn-shanghai.aliyuncs.com/webpack-0.png)\n\n## webp","createDate":"2020-03-12 23:51:35","updateDate":"10/1/2021, 3:34:43 AM","body":"\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">webpack</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>webpack</code>是一个现代的<code>JavaScript</code>应用程序打包工具。当<code>webpack</code>处理应用程序时，会递归构建一个<strong>依赖关系图</strong>，其中包含应用程序需要的每个模块，然后将这个模块打包成一个或多个bundle</p>\n<p><img src=\"https://mrrsblog.oss-cn-shanghai.aliyuncs.com/webpack-0.png\" alt=\"概念图\"></p>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">webpack的核心概念</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><p><code>entry</code>（入口）</p>\n<p>入口指示<code>webpack</code>应该使用哪个模块来作为构建其内部<strong>依赖图</strong>的开始。进入入口起点后，<code>webpack</code>会找出有哪些模块是库入口起点（直接和间接）依赖的</p>\n<p>每个依赖项随即被处理，最后输出到称之为<code>bundles</code>的文件中。</p>\n<p>可以通过在<code>webpack</code>配置中配置entry属性来指定一个或多个入口起点。默认为<code>./src</code></p>\n</li>\n<li><p><code>output</code>（出口）</p>\n<p><code>output</code>告诉<code>webpack</code>在哪输出它所创建的<code>bundles</code>，以及如何命名这些文件，默认值为<code>./dist</code>。基本上，整个应用程序结构都会被编译到指定的输出路径的文件夹中。可以通过配置文件中的<code>output</code>字段来指定输出的文件夹</p>\n</li>\n<li><p><code>loader</code></p>\n<p><code>loader</code>让<code>webpack</code>能够去处理那些非<code>JavaScript</code>文件（<code>webpack</code>自身只理解<code>JavaScript</code>）。<code>loader</code>能够将所有类型的文件转换为<code>webpack</code>能够处理的有效模块，然后就可以利用<code>webpack</code>的打包能力对它们进行处理。</p>\n<p>同一个<code>rule</code>下的多个<code>loader</code>时将从右往左执行</p>\n</li>\n<li><p><code>plugin</code></p>\n<p><code>loader</code>被用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。插件的范围包括从打包优化和压缩一直到重新定义环境中的变量，插件接口功能极其强大，可以用来处理各种各样的任务。</p>\n<p>想要使用一个插件，只需要<code>require</code>它，然后把它添加到<code>plugins</code>配置项中。多数插件可以通过选项自定义。</p>\n</li>\n</ul>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">配置</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>webpack</code>的相关配置主要由根目录下的<code>webpack.config.js</code>来完成</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">// webpack.config.js</span>\n\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">mode</span>: <span class=\"hljs-string\">&#x27;development&#x27;</span>,\n    <span class=\"hljs-attr\">entry</span>: [<span class=\"hljs-string\">&#x27;&#x27;</span>]\n    <span class=\"hljs-attr\">output</span>: {},\n    <span class=\"hljs-attr\">module</span>: {\n        <span class=\"hljs-attr\">rules</span>: [{}]\n    },\n    <span class=\"hljs-attr\">plugins</span>: [{}],\n    <span class=\"hljs-attr\">devServer</span>: {},\n    <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&#x27;xxx&#x27;</span>\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">处理JavaScript:babel-loader</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p><code>webpack</code>本身可以识别<code>JavaScript</code>，但为了兼容老的浏览器，需要将<code>ES6</code>转换为向后兼容版本的<code>JavaScript</code>代码，<a href=\"https://babel.docschina.org/\">Babel</a>就是这么一种工具链。</p>\n<p>当<code>webpack</code>打包源代码时，可能会很难追踪到错误和警告在源代码中的起始位置。为了<strong>更容易追踪错误和警告</strong>，<code>JavaScript</code>提供了<a href=\"http://blog.teamtreehouse.com/introduction-source-maps\">source map</a>功能，将编译后的代码映射回原始代码。</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//webpack.config.js</span>\n<span class=\"hljs-attr\">module</span>: {\n    <span class=\"hljs-attr\">rules</span>: [\n        {\n            <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.js?$/</span>,\n            <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;babel-loader&#x27;</span>],\n            <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n        }\n    ],\n    <span class=\"hljs-comment\">// 开启source-map</span>\n    <span class=\"hljs-attr\">devtool</span>: <span class=\"hljs-string\">&#x27;cheap-module-eval-source-map&#x27;</span>\n}\n\n<span class=\"hljs-comment\">//babel.config.js</span>\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">api</span>) {\n    api.<span class=\"hljs-title function_\">cache</span>(<span class=\"hljs-literal\">true</span>)\n    <span class=\"hljs-keyword\">const</span> presets = [<span class=\"hljs-string\">&quot;@babel/preset-env&quot;</span>]\n    <span class=\"hljs-keyword\">const</span> plugins = [\n        [\n            <span class=\"hljs-string\">&quot;@babel/plugin-transform-runtime&quot;</span>,\n            {\n                <span class=\"hljs-attr\">corejs</span>: <span class=\"hljs-number\">3</span>\n            }\n        ]\n    ]\n\n    <span class=\"hljs-keyword\">return</span> {\n        presets,\n        plugins\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">处理HTML</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>有时为了清除缓存，打包文件时会带有hash，那么每次生成的文件名会有所不同。如果在<code>html</code>中引用了这些文件，则需要更改引入的文件名，手工改动不可取。我们可以使用<code>html-webpack-plugin</code>来帮助处理</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">plugins</span>: [\n        <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">HtmlWebpackPlugin</span>({\n            <span class=\"hljs-comment\">// template指定生成html的模板文件</span>\n            <span class=\"hljs-attr\">template</span>: <span class=\"hljs-string\">&#x27;./public/index.html&#x27;</span>,\n            <span class=\"hljs-comment\">// 默认生成在./dist/index.html</span>\n            <span class=\"hljs-attr\">filename</span>: <span class=\"hljs-string\">&#x27;index.html&#x27;</span>,\n            <span class=\"hljs-attr\">minify</span>: {\n                <span class=\"hljs-attr\">removeAttributeQuotes</span>: <span class=\"hljs-literal\">false</span>,\n                <span class=\"hljs-attr\">collapseWhitespace</span>: <span class=\"hljs-literal\">false</span>\n            }\n        })\n    ]\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">处理*ss</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <ul>\n<li><code>style-loader</code>，动态创建<code>style</code>标签，将<code>css</code>插入到<code>head</code>中</li>\n<li><code>css-loader</code>，负责处理<code>@import</code>等语句</li>\n<li><code>postcss-loader</code>和<code>autoprefixer</code>，自动生成浏览器兼容性前缀</li>\n<li><code>less-loader</code>，负责编译<code>.less</code>文件</li>\n</ul>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">module</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(le|c)ss$/</span>,\n                <span class=\"hljs-attr\">use</span>: [\n                    <span class=\"hljs-string\">&#x27;style-loader&#x27;</span>,\n                    <span class=\"hljs-string\">&#x27;css-loader&#x27;</span>,\n                    {\n                        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;postcss-loader&#x27;</span>,\n                        <span class=\"hljs-attr\">options</span>: {\n                            <span class=\"hljs-attr\">plugins</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) {\n                                <span class=\"hljs-keyword\">return</span> [\n                                    <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&#x27;autoprefixer&#x27;</span>)({\n                                        <span class=\"hljs-string\">&#x27;overrideBrowserslist&#x27;</span>: [\n                                            <span class=\"hljs-string\">&quot;&gt;0.25%&quot;</span>,\n                                            <span class=\"hljs-string\">&#x27;not dead&#x27;</span>\n                                        ]\n                                    })\n                                ]\n                            }\n                        }\n                    },\n                    <span class=\"hljs-string\">&#x27;less-loader&#x27;</span>\n                ],\n                <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n            }\n        ]\n    }\n}\n</code></pre>\n\n      <h2>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">处理本地资源文件</span>\n        <span class=\"suffix\"></span>\n      </h2>\n    <p>可以使用url-loader或file-loader来处理本地的资源文件。url-loader和file-loader功能类似，但是url-loader可以指定文件在小于某一特定值下返回DataURL，可以减少http请求，推荐使用</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">module</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.(png|jpg|gif|jpeg|svg|ttf)$/</span>,\n                <span class=\"hljs-attr\">use</span>: [\n                    {\n                        <span class=\"hljs-attr\">loader</span>: <span class=\"hljs-string\">&#x27;url-loader&#x27;</span>,\n                        <span class=\"hljs-attr\">options</span>: {\n                            <span class=\"hljs-attr\">limit</span>: <span class=\"hljs-number\">10240</span>,\n                            <span class=\"hljs-attr\">esModule</span>: <span class=\"hljs-literal\">false</span>,\n                            <span class=\"hljs-attr\">name</span>: <span class=\"hljs-string\">&#x27;assets/[name]_[hash:6].[ext]&#x27;</span>\n                        }\n                    }\n                ],\n                <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n            }\n        ]\n    }\n}\n</code></pre>\n<p>此外，对于html中的图片，url-loader则无能为力，此时需要<code>html-withimg-loader</code>来协助</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = {\n    <span class=\"hljs-attr\">module</span>: {\n        <span class=\"hljs-attr\">rules</span>: [\n            {\n                <span class=\"hljs-attr\">test</span>: <span class=\"hljs-regexp\">/\\.html/</span>,\n                <span class=\"hljs-attr\">use</span>: [<span class=\"hljs-string\">&#x27;html-withimg-loader&#x27;</span>],\n                <span class=\"hljs-attr\">exclude</span>: <span class=\"hljs-regexp\">/node_modules/</span>\n            }\n        ]\n    }\n}\n</code></pre>\n"}},"__N_SSG":true}