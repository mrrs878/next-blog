{"pageProps":{"post":{"title":"微前端-技术调研","tags":["微前端"],"categories":"微前端","description":"微前端是近两年比较火热的话题，从国外的 single-spa 到阿里的 qiankun，从京东的 micro-app 到欢聚时代的 emp ，各家大厂使尽浑身解数推出自家的微前端框架，那么微前端到底是什么呢\n\n## 什么是微前端\n\n网上看到一句话对其总结的鞭辟入里\n\n> “微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。”\n\n微前端的概念最早在 2016 年底被[提出](ht","createDate":"2022-04-28 22:12:20","updateDate":"2022-05-12 22:57:34","body":"<p>微前端是近两年比较火热的话题，从国外的 single-spa 到阿里的 qiankun，从京东的 micro-app 到欢聚时代的 emp ，各家大厂使尽浑身解数推出自家的微前端框架，那么微前端到底是什么呢</p>\n<h2 id=\"什么是微前端\">什么是微前端</h2>\n<p>网上看到一句话对其总结的鞭辟入里</p>\n<blockquote>\n<p>“微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。”</p>\n</blockquote>\n<p>微前端的概念最早在 2016 年底被<a href=\"https://www.thoughtworks.com/radar/techniques/micro-frontends\">提出</a>，<strong>微前端不是单纯的前端框架或者工具，而是一套架构体系</strong>，它将微服务的概念扩展到前端世界。在该技术架构下，新的/改造好之后的前端应用可由多个子应用构成，这些子应用间独立开发、独立部署、独立运行时、技术栈无关</p>\n<p>微前端有如下特性：</p>\n<ol>\n<li><p>技术栈无关</p>\n</li>\n<li><p>独立开发/部署</p>\n</li>\n<li><p>增量升级</p>\n</li>\n</ol>\n<p>既然微前端这么好，为什么直到 16 年才被提出来呢</p>\n<p>其实早在上古时代，<code>iframe</code>就可称为微前端，为什么这么说呢，因为<code>iframe</code>可以做到完美隔离 javascript/css ，并且可适用 url 快速接入。那既然这么简单，为啥没有流行起来呢（在微前端领域）？因为<code>iframe</code>缺点同样明显：隔离过于简单粗暴，导致应用间数据交互困难；整个应用全量加载，性能较差；弹窗类业务无法正常施展。。。</p>\n<h2 id=\"为什么要做微前端\">为什么要做微前端</h2>\n<p>微前端既可将多个应用/项目整合到一起，又可减小各应用间的耦合性，提高项目的可扩展性</p>\n<h2 id=\"实现微前端有哪些方案\">实现微前端有哪些方案</h2>\n<p>从集成方式出发可以大致分为构建时集成、运行时集成</p>\n<h3 id=\"构建时集成\">构建时集成</h3>\n<p>最常见的是将子应用独立开发为一个单独的可发布的 Javascript 包，在主应用中引用并加载。但是，这种方法意味着我们必须重新编译并发布每个微前端，才能发布对产品任何单个部分的更改</p>\n<h3 id=\"运行时集成\">运行时集成</h3>\n<p>和构建时集成相反，在运行时动态加载各应用</p>\n<p>最简单的事通过 nginx 来分发</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span> <span class=\"hljs-attr\">dir</span>=<span class=\"hljs-string\">&quot;ltr&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;utf-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Feed me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Feed me<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n    <span class=\"hljs-comment\">&lt;!--# include file=&quot;$PAGE.html&quot; --&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<pre><code class=\"hljs language-sh\">server {\n    listen 8080;\n    server_name localhost;\n\n    root /usr/share/nginx/html;\n    index index.html;\n    ssi on;\n\n    <span class=\"hljs-comment\"># Redirect / to /browse</span>\n    rewrite ^/$ http://localhost:8080/browse redirect;\n\n    <span class=\"hljs-comment\"># Decide which HTML fragment to insert based on the URL</span>\n    location /browse {\n      <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$PAGE</span> <span class=\"hljs-string\">&#x27;browse&#x27;</span>;\n    }\n    location /order {\n      <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$PAGE</span> <span class=\"hljs-string\">&#x27;order&#x27;</span>;\n    }\n    location /profile {\n      <span class=\"hljs-built_in\">set</span> <span class=\"hljs-variable\">$PAGE</span> <span class=\"hljs-string\">&#x27;profile&#x27;</span>\n    }\n\n    <span class=\"hljs-comment\"># All locations should render through index.html</span>\n    error_page 404 /index.html;\n}\n</code></pre>\n<p>这种方式也可勉强称为<em>微前端</em>，因为我们将每个业务都拆分到一个独立的应用中，可以交由独立的团队维护。除了这种服务端集成，在客户端也可以通过一定的手段拆分-集成</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- These scripts don&#x27;t render anything immediately --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Instead they attach entry-point functions to `window` --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://browse.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://order.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://profile.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;micro-frontend-root&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-comment\">// These global functions are attached to window by the above scripts</span>\n      <span class=\"hljs-keyword\">const</span> microFrontendsByRoute = {\n        <span class=\"hljs-string\">&quot;/&quot;</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">renderBrowseRestaurants</span>,\n        <span class=\"hljs-string\">&quot;/order-food&quot;</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">renderOrderFood</span>,\n        <span class=\"hljs-string\">&quot;/user-profile&quot;</span>: <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">renderUserProfile</span>,\n      };\n      <span class=\"hljs-keyword\">const</span> renderFunction = microFrontendsByRoute[<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>];\n\n      <span class=\"hljs-comment\">// Having determined the entry-point function, we now call it,</span>\n      <span class=\"hljs-comment\">// giving it the ID of the element where it should render itself</span>\n      <span class=\"hljs-title function_\">renderFunction</span>(<span class=\"hljs-string\">&quot;micro-frontend-root&quot;</span>);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>在这里，我们将每个应用打包成一个 javascript 文件，在匹配到 URL 后执行对应的代码，渲染页面。</p>\n<p>除了使用 javascript ，还可使用开篇提到的 iframe 集成，但 iframe 缺点过于明显就不讨论。此外，还可使用 web components 来实现，其也属于 javascript 因此不另列</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- These scripts don&#x27;t render anything immediately --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Instead they each define a custom element type --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://browse.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://order.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://profile.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;micro-frontend-root&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">type</span>=<span class=\"hljs-string\">&quot;text/javascript&quot;</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-comment\">// These element types are defined by the above scripts</span>\n      <span class=\"hljs-keyword\">const</span> webComponentsByRoute = {\n        <span class=\"hljs-string\">&quot;/&quot;</span>: <span class=\"hljs-string\">&quot;micro-frontend-browse-restaurants&quot;</span>,\n        <span class=\"hljs-string\">&quot;/order-food&quot;</span>: <span class=\"hljs-string\">&quot;micro-frontend-order-food&quot;</span>,\n        <span class=\"hljs-string\">&quot;/user-profile&quot;</span>: <span class=\"hljs-string\">&quot;micro-frontend-user-profile&quot;</span>,\n      };\n      <span class=\"hljs-keyword\">const</span> webComponentType = webComponentsByRoute[<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">location</span>.<span class=\"hljs-property\">pathname</span>];\n\n      <span class=\"hljs-comment\">// Having determined the right web component custom element type,</span>\n      <span class=\"hljs-comment\">// we now create an instance of it and attach it to the document</span>\n      <span class=\"hljs-keyword\">const</span> root = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;micro-frontend-root&quot;</span>);\n      <span class=\"hljs-keyword\">const</span> webComponent = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(webComponentType);\n      root.<span class=\"hljs-title function_\">appendChild</span>(webComponent);\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>除了这两种分类，还可从拆分粒度来分类</p>\n<h3 id=\"基于路由分发\">基于路由分发</h3>\n<p>上面介绍的基本都是一个页面一个应用，那么还有没有粒度更细一点的：想在一个页面加载多个应用？🤔</p>\n<h3 id=\"前端微服务化\">前端微服务化</h3>\n<p>每个前端应用都是独立的、自主运行的，最后通过模块化的方式组合出完整的前端应用</p>\n<p>比如借助上面的 Web Components 实现</p>\n<pre><code class=\"hljs language-html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Welcome to Feed me!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n\n    <span class=\"hljs-comment\">&lt;!-- These scripts don&#x27;t render anything immediately --&gt;</span>\n    <span class=\"hljs-comment\">&lt;!-- Instead they each define a custom element type --&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://browse.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://order.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">&quot;https://profile.example.com/bundle.js&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;micro-frontend-root&quot;</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-frontend-browse-restaurants</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-frontend-order-food</span> /&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">micro-frontend-user-profile</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<p>在这里，我们加载的 js 资源可以是任何借助框架构建后生成的 web component 组件文件</p>\n<h2 id=\"总结\">总结</h2>\n<p>微前端是一种架构风格，其中众多独立交付的前端应用组合成一个大型整体。</p>\n<p>微前端技术方案可分为运行时集成/构建时集成，或者按照拆分粒度划分为路由分发式和微服务化</p>\n<h2 id=\"参考\">参考</h2>\n<p><a href=\"https://www.icode9.com/content-4-946879.html\">详解微前端</a></p>\n"}},"__N_SSG":true}