{"pageProps":{"post":{"title":"Docker-入门","tags":["Docker入门"],"categories":"Docker","description":"# 什么是Docker\n\n## 简介\n\n[百科](https://baike.baidu.com/item/docker/13344470)：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。\n\n## 核心概念\n\n- 镜像","createDate":"2020-08-10 22:16:00","updateDate":"2020-10-16 15:19:50","body":"<h1 id=\"什么是docker\">什么是Docker</h1>\n<h2 id=\"简介\">简介</h2>\n<p><a href=\"https://baike.baidu.com/item/docker/13344470\">百科</a>：Docker 是一个开源的应用容器引擎，让开发者可以打包他们的应用以及依赖包到一个可移植的镜像中，然后发布到任何流行的 Linux或Windows 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口。</p>\n<h2 id=\"核心概念\">核心概念</h2>\n<ul>\n<li>镜像</li>\n</ul>\n<p>镜像是一个文件，它是用来创建容器的。Docker镜就好比“Win7纯净版.iso”文件</p>\n<ul>\n<li>容器</li>\n</ul>\n<p>像一个虚拟机，容器中运行着一个完整的操作系统。可以在容器中装Nodejs，可以执行<code>npm install</code>，可以做一切你当前操作系统能做的事情</p>\n<h1 id=\"docker能用来做什么\">Docker能用来做什么</h1>\n<p>快速部署应用（DevOps），较虚拟机系统性能消耗低、应用启停高效</p>\n<p><a href=\"/article/Docker-%E5%AE%9E%E6%88%98%E4%B9%8B%E5%9F%BA%E4%BA%8ETravis%E3%80%81Github%E6%90%AD%E5%BB%BACI&amp;CD%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2\">Docker-实战之基于Travis、Github搭建CI/CD自动化部署</a></p>\n<h1 id=\"怎么使用docker\">怎么使用Docker</h1>\n<ol>\n<li><a href=\"https://www.cnblogs.com/sky-k/p/11507441.html\">安装docker(CentOS)</a></li>\n<li>拉取/打包镜像</li>\n</ol>\n<pre><code class=\"hljs language-shell\"><span class=\"hljs-meta\"># </span><span class=\"language-bash\">拉取镜像</span>\ndocker pull mrrs878/blog:latest\n<span class=\"hljs-meta\">\n# </span><span class=\"language-bash\">打包镜像</span>\ndocker build -t mrrs878/blog:latest .\n</code></pre>\n<ol start=\"3\">\n<li>根据镜像创建容器</li>\n</ol>\n<pre><code class=\"hljs language-shell\">docker container create --name blog -p 8081:80 mrrs878/blog:latest\n<span class=\"hljs-meta\"># </span><span class=\"language-bash\">container <span class=\"hljs-built_in\">id</span></span>\n</code></pre>\n<ol start=\"4\">\n<li>启动容器</li>\n</ol>\n<pre><code class=\"hljs language-shell\">docker container start xxx(container id)\n</code></pre>\n<h1 id=\"docker-compose\">docker-compose</h1>\n<h2 id=\"service-name和container-name的关系\">service name和container name的关系</h2>\n<p>如果<code>container_name</code>没有定义，运行<code>docker-cmpose up -d</code>后，docker-compose自动给container分配了一个名字，其格式为：<code>&lt;当前工作路径名&gt;/&lt;servicename&gt;_&lt;sequencenumber&gt;</code></p>\n"}},"__N_SSG":true}