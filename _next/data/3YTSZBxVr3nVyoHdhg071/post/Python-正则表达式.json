{"pageProps":{"post":{"title":"Python-正则表达式","tags":["Python","正则表达式"],"categories":"Python","description":"# 正则表达式\n\n- 正则表达式匹配，就是按照一定的规则将特定的文本提取出来。\n  ![enter image description here](https://t1.picb.cc/uploads/2018/11/15/JXfxNi.jpg)\n\n## match\n\n- match(0)法会尝试从字符串的**起始位置**匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 fa","createDate":"2018-11-15 19:55:58","updateDate":"2021-02-20 17:21:17","body":"<h1 id=\"正则表达式\">正则表达式</h1>\n<ul>\n<li>正则表达式匹配，就是按照一定的规则将特定的文本提取出来。\n<img src=\"https://t1.picb.cc/uploads/2018/11/15/JXfxNi.jpg\" alt=\"enter image description here\"></li>\n</ul>\n<h2 id=\"match\">match</h2>\n<ul>\n<li>match(0)法会尝试从字符串的<strong>起始位置</strong>匹配正则表达式，如果匹配，就返回匹配成功的结果；如果不匹配，就返回 false。</li>\n</ul>\n<h2 id=\"match-示例\">match 示例</h2>\n<h3 id=\"匹配目标\">匹配目标</h3>\n<ul>\n<li>可以使用&quot;（）&quot;将想提取的子字符串括起来，&quot;（）&quot;实际上标记了一个子表达式的开始和结束位置，被标记的每个子表达式会依次对应每一个分组，调用 group()法传入分组的索引即可获取提取的结果。</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span>\nresult0 = re.match(<span class=\"hljs-string\">&#x27;^Hello\\s\\d\\d\\d\\s\\d{4}\\s\\w{10}&#x27;</span>, content)\nresult1 = re.match(<span class=\"hljs-string\">&#x27;^Hello\\s(\\d+)\\s(\\d+)\\sWorld&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(result0)\n<span class=\"hljs-built_in\">print</span>(result1)\n<span class=\"hljs-built_in\">print</span>(result1.group(<span class=\"hljs-number\">1</span>), result1.group(<span class=\"hljs-number\">2</span>))\n\n\n<span class=\"hljs-comment\"># 输出</span>\n&lt;re.Match <span class=\"hljs-built_in\">object</span>; span=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">25</span>), match=<span class=\"hljs-string\">&#x27;Hello 123 4567 World_This&#x27;</span>&gt;\n&lt;re.Match <span class=\"hljs-built_in\">object</span>; span=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">20</span>), match=<span class=\"hljs-string\">&#x27;Hello 123 4567 World&#x27;</span>&gt;\n<span class=\"hljs-number\">123</span> <span class=\"hljs-number\">4567</span>\n</code></pre>\n<h3 id=\"通用匹配\">通用匹配</h3>\n<ul>\n<li>”.*“可以匹配任意长度字符串(换行符除外)。</li>\n<li>”.“可以匹配任意字符(换行符除外)</li>\n<li>”*“代表匹配前面的字符无限次</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span>\nresult = re.match(<span class=\"hljs-string\">&#x27;^Hello\\s(\\d+)\\s(\\d+)\\s(.*?)Demo$&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(result)\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">3</span>))\n\n\n<span class=\"hljs-comment\"># 输出</span>\n&lt;re.Match <span class=\"hljs-built_in\">object</span>; span=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">41</span>), match=<span class=\"hljs-string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span>&gt;\nWorld_This <span class=\"hljs-keyword\">is</span> a Regex\n</code></pre>\n<h3 id=\"贪婪匹配\">贪婪匹配</h3>\n<p>使用”.*“通用匹配时，可能会得不到想要的结果：</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;Hello 1234567 World_This is a Regex Demo&#x27;</span>\n\nresult = re.match(<span class=\"hljs-string\">&#x27;^He.*(\\d+).*Demo$&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">1</span>))\n\n\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-number\">7</span>\n</code></pre>\n<p>想要的结果是 123，却输出了 7。这就涉及到贪婪与非贪婪匹配了。</p>\n<ul>\n<li>在贪婪匹配下， &quot;._&quot;会匹配尽可能多的字符。\n所以在上面的正则表达式中，”._“直接匹配到了&#39;Hello 123 456&#39;，&#39;\\d&#39;匹配到了&#39;7&#39;。</li>\n<li>在非贪婪匹配下， &quot;.<em>&quot;会匹配尽可能少的字符。非贪婪匹配的写法是&quot;.</em>?&quot;。</li>\n</ul>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;Hello 123 4567 World_This is a Regex Demo&#x27;</span>\nresult = re.match(<span class=\"hljs-string\">&#x27;^He.*?(\\d+).*Demo$&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">1</span>))\n\n\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-number\">123</span>\n</code></pre>\n<p>在做匹配的时候，字符串<strong>中间尽量使用非贪婪匹配</strong>，但需要注意，如果匹配的结果在字符串结尾，&quot;.*?&quot;就有可能匹配不到任何内容了。</p>\n<h3 id=\"修饰符\">修饰符</h3>\n<p>正则表达式可以包含一些<strong>可选标志修饰符来控制匹配的模式</strong> 。\n<img src=\"https://t1.picb.cc/uploads/2018/11/15/JX62zc.png\" alt=\"enter image description here\"></p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;&#x27;&#x27;Hello 123 4567 World_This\n          is a Regex Demo&#x27;&#x27;&#x27;</span>\nresult_none = re.match(<span class=\"hljs-string\">&#x27;^He.*?(\\d+).*Demo$&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(result_none)\n\nresult = re.match(<span class=\"hljs-string\">&#x27;^He.*?(\\d+).*Demo$&#x27;</span>, content, re.S)\n<span class=\"hljs-built_in\">print</span>(result)\n\n\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-literal\">None</span>\n&lt;re.Match <span class=\"hljs-built_in\">object</span>; span=(<span class=\"hljs-number\">0</span>, <span class=\"hljs-number\">52</span>), match=<span class=\"hljs-string\">&#x27;Hello 123 4567 World_This \\n          is a Regex &gt;</span>\n</code></pre>\n<h3 id=\"转义匹配\">转义匹配</h3>\n<p>当遇到用于正则匹配模式的特殊字符时，在前面加反斜线转义一下即可 。</p>\n<h2 id=\"search\">search</h2>\n<p>search ()，它在匹配时会扫描整个字符串，然后返回第一个成功匹配的结果 。</p>\n<h3 id=\"search-示例\">search 示例</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\nhtml = <span class=\"hljs-string\">&#x27;&#x27;&#x27;&lt;div id=&quot;songs-list&quot;&gt;\n    &lt;h2 class=&quot;title&quot;&gt;经典老歌&lt;/h2&gt;\n    &lt;p class=&quot;introduction&quot;&gt;\n        经典老歌列表\n    &lt;/p&gt;\n    &lt;ul id=&quot;list&quot; class=&quot;list-group&quot;&gt;\n        &lt;li data-view=&quot;2&quot;&gt;一路上有你&lt;/li&gt;\n        &lt;li data-view=&quot;7&quot;&gt;\n            &lt;a href=&quot;/2.mp3&quot; singer=&quot;任贤齐&quot;&gt;沧海一声笑&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=&quot;4&quot; class=&quot;active&quot;&gt;\n            &lt;a href=&quot;/3.mp3&quot; singer=&quot;齐秦&quot;&gt;往事随风&lt;/a&gt;\n        &lt;/li&gt;\n        &lt;li data-view=&quot;6&quot;&gt;&lt;a href=&quot;/4.mp3&quot; singer=&quot;beyond&quot;&gt;光辉岁月&lt;/a&gt;&lt;/li&gt;\n        &lt;li data-view=&quot;5&quot;&gt;&lt;a href=&quot;/5.mp3&quot; singer=&quot;陈慧琳&quot;&gt;记事本&lt;/a&gt;&lt;/li&gt;\n    &lt;/ul&gt;\n&lt;/div&gt;&#x27;&#x27;&#x27;</span>\n\nresult = re.search(<span class=\"hljs-string\">&#x27;&lt;li.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">1</span>), result.group(<span class=\"hljs-number\">2</span>))\nresult = re.search(<span class=\"hljs-string\">&#x27;&lt;li.*?href=&quot;(.*?)&quot;\\ssinger=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)\n<span class=\"hljs-comment\">#print(result)</span>\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">1</span>), result.group(<span class=\"hljs-number\">2</span>), result.group(<span class=\"hljs-number\">3</span>))\n\n\n<span class=\"hljs-comment\"># 输出</span>\n任贤齐 沧海一声笑\n/<span class=\"hljs-number\">2.</span>mp3 任贤齐 沧海一声笑\n</code></pre>\n<h2 id=\"findall\">findall</h2>\n<p>findall()方法会搜索整个字符串然后返回匹配正则表达式的所有内容。</p>\n<h3 id=\"findall-示例\">findall 示例</h3>\n<pre><code class=\"hljs language-python\">...\n...\nresult = re.search(<span class=\"hljs-string\">&#x27;&lt;li.*?singer=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)\n<span class=\"hljs-built_in\">print</span>(result.group(<span class=\"hljs-number\">1</span>), result.group(<span class=\"hljs-number\">2</span>))\nresult = re.search(<span class=\"hljs-string\">&#x27;&lt;li.*?href=&quot;(.*?)&quot;\\ssinger=&quot;(.*?)&quot;&gt;(.*?)&lt;/a&gt;&#x27;</span>, html, re.S)\n\n\n<span class=\"hljs-comment\"># 输出</span>\n任贤齐 沧海一声笑\n/<span class=\"hljs-number\">2.</span>mp3 任贤齐 沧海一声笑\n/<span class=\"hljs-number\">2.</span>mp3 任贤齐 沧海一声笑\n/<span class=\"hljs-number\">3.</span>mp3 齐秦 往事随风\n/<span class=\"hljs-number\">4.</span>mp3 beyond 光辉岁月\n/<span class=\"hljs-number\">5.</span>mp3 陈慧琳 记事本\n</code></pre>\n<h2 id=\"sub\">sub</h2>\n<p>用来修改/替换文本</p>\n<h3 id=\"sub-使用示例\">sub 使用示例</h3>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\n<span class=\"hljs-keyword\">import</span> re\n\ncontent = <span class=\"hljs-string\">&#x27;54ak54yr50ir54ix5L2g&#x27;</span>\ncontent = re.sub(<span class=\"hljs-string\">&#x27;\\d&#x27;</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>, content)\n<span class=\"hljs-built_in\">print</span>(content)\n\n\n<span class=\"hljs-comment\"># 输出</span>\nakyririxLg\n</code></pre>\n<h2 id=\"compile\">compile</h2>\n<p>compile()可以将正则字符串编译成正则表达式对象，以便在以后的匹配中复用(也可以传入修饰符)。</p>\n<pre><code class=\"hljs language-python\"><span class=\"hljs-keyword\">import</span> re\n\ncontent0 = <span class=\"hljs-string\">&#x27;2016-12-15 12:00&#x27;</span>\ncontent1 = <span class=\"hljs-string\">&#x27;2016-12-17 12:55&#x27;</span>\ncontent2 = <span class=\"hljs-string\">&#x27;2016-12-22 13:21&#x27;</span>\n\npattern = re.<span class=\"hljs-built_in\">compile</span>(<span class=\"hljs-string\">&#x27;\\d{2}:\\d{2}&#x27;</span>)\nresult0 = re.sub(pattern, <span class=\"hljs-string\">&#x27;&#x27;</span>, content1)\nresult1 = re.sub(pattern, <span class=\"hljs-string\">&#x27;&#x27;</span>, content1)\nresult2 = re.sub(pattern, <span class=\"hljs-string\">&#x27;&#x27;</span>, content2)\n\n<span class=\"hljs-built_in\">print</span>(result0, result1, result2)\n\n\n<span class=\"hljs-comment\"># 输出</span>\n<span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">17</span>  <span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">17</span>  <span class=\"hljs-number\">2016</span>-<span class=\"hljs-number\">12</span>-<span class=\"hljs-number\">22</span>\n</code></pre>\n"}},"__N_SSG":true}