{"pageProps":{"post":{"title":"Docker-基于Travis、Github搭建CI&CD自动化部署之自动构建","tags":["Docker实战","自动构建"],"categories":"Docker","description":"> CentOS@7.5\n\n# 流程\n\n1. `git push`到仓库\n2. CI检测到GitHub代码有更新，自动打包出一个docker镜像更新至docker hub\n3. CI编译完成后登录服务器，删掉原有容器，拉取新镜像并创建一个新容器\n\n# 初始化项目\n\n1. 创建仓库\n2. 创建[Travis](https://www.travis-ci.org)账号并关联仓库\n3. 到[dock","createDate":"2020-08-10 22:32:00","updateDate":"2020-10-16 15:07:18","body":"<blockquote>\n<p><a href=\"mailto:&#67;&#x65;&#x6e;&#116;&#x4f;&#83;&#64;&#55;&#x2e;&#x35;\">&#67;&#x65;&#x6e;&#116;&#x4f;&#83;&#64;&#55;&#x2e;&#x35;</a></p>\n</blockquote>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">流程</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ol>\n<li><code>git push</code>到仓库</li>\n<li>CI检测到GitHub代码有更新，自动打包出一个docker镜像更新至docker hub</li>\n<li>CI编译完成后登录服务器，删掉原有容器，拉取新镜像并创建一个新容器</li>\n</ol>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">初始化项目</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <ol>\n<li>创建仓库</li>\n<li>创建<a href=\"https://www.travis-ci.org\">Travis</a>账号并关联仓库</li>\n<li>到<a href=\"https://hub.docker.com\">docker hub</a>注册账号并创建镜像仓库</li>\n<li>Travis个人中心添加环境变量<code>DOCKER_USERNAME</code>和<code>DOCKER_PASSWORD</code>方便更新镜像\n<img src=\"https://user-gold-cdn.xitu.io/2019/9/20/16d4c9d76dc4f557?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\" alt=\"添加环境变量\"></li>\n<li>在项目根目录创建<code>.travis.yml</code>\n```yaml\nlanguage: node_js\nnode_js:</li>\n</ol>\n<ul>\n<li>&quot;12&quot;\nservices:</li>\n<li>docker</li>\n</ul>\n<p>before_install:</p>\n<ul>\n<li>npm install</li>\n</ul>\n<p>script:</p>\n<ul>\n<li>npm run build</li>\n<li>echo &quot;$DOCKER_PASSWORD&quot; | docker login -u &quot;$DOCKER_USERNAME&quot; --password-stdin</li>\n<li>docker build -t mrrs878/blog:latest .</li>\n<li>docker push mrrs878/blog:latest\n```</li>\n</ul>\n<ol start=\"6\">\n<li>在项目根目录创建<code>nginx.conf</code>\n```shell script\nserver {\n listen       80;\n server_name  localhost;\n\n location / {\n     try_files $uri $uri/ /index.html;\n     root /usr/share/nginx/html;\n     index  index.html index.htm;\n }</li>\n</ol>\n<p>}</p>\n<pre><code>7. 在项目根目录创建`Dockerfile`\n```shell script\nFROM nginx\n\nCOPY ./build/ /usr/share/nginx/html/\n\nRUN rm /etc/nginx/conf.d/default.conf\n\nADD nginx.conf /etc/nginx/conf.d/\n\nEXPOSE 80\n</code></pre>\n<ol start=\"8\">\n<li>在项目根目录创建<code>.dockerignore</code>加快打包速度\n```shell script\n/.idea\n/node_modules\n/.pnp\n.pnp.js</li>\n</ol>\n<p>/coverage</p>\n<p>.DS_Store\n.env.local\n.env.development.local\n.env.test.local\n.env.production.local</p>\n<p>npm-debug.log*\nyarn-debug.log*\nyarn-error.log*</p>\n<pre><code>\n# 编写代码push到仓库，Travis自动编译，等待编译完成\n\n# 到[docker hub](https://hub.docker.com)查看镜像状态\n\n# 服务器配置\n\n1. `nginx`添加反向代理\n\n```shell script\nserver {\n        listen       80;\n        server_name  blog.p18c.top;\n\n        location / {\n                proxy_pass   http://127.0.0.1:8081;\n        }\n}\n</code></pre>\n<ol start=\"2\">\n<li>更新镜像并创建容器</li>\n</ol>\n<pre><code class=\"hljs language-shell\">docker pull mrrs878/blog:latest\ndocker container stop blog\ndocker container rm blog\ndocker container create --name blog -p 8081:80 mrrs878/blog:latest\ndocker container start blog\n</code></pre>\n\n      <h1>\n        <span class=\"prefix\"></span>\n        <span class=\"content\">Ref</span>\n        <span class=\"suffix\"></span>\n      </h1>\n    <p><a href=\"https://juejin.im/post/6844903946234904583\">写给前端的Docker实战教程</a></p>\n"}},"__N_SSG":true}