{"pageProps":{"post":{"title":"Nest.js学习-基本概念","tags":["Nest.js"],"categories":"Nest.js","description":"# 核心架构\n\n## 模块\n\n模块是按业务逻辑化分基本单元，包含控制器和服务。控制器是处理请求和响应数据的条件，服务是处理实际业务逻辑的部件\n\n## 中间件\n\n中间件是路由处理handler前的数据处理层，只能在模块或者全局注册，可以做**日志处理中间件**；中间件可以访问整个`request`、`response`的上下文，模块作用域可以依赖注入服务。全局注册只能是一个纯函数或者一个高阶函数","createDate":"2020-09-22 22:35:38","updateDate":"2020-10-16 17:22:32","body":"<h1 id=\"核心架构\">核心架构</h1>\n<h2 id=\"模块\">模块</h2>\n<p>模块是按业务逻辑化分基本单元，包含控制器和服务。控制器是处理请求和响应数据的条件，服务是处理实际业务逻辑的部件</p>\n<h2 id=\"中间件\">中间件</h2>\n<p>中间件是路由处理handler前的数据处理层，只能在模块或者全局注册，可以做<strong>日志处理中间件</strong>；中间件可以访问整个<code>request</code>、<code>response</code>的上下文，模块作用域可以依赖注入服务。全局注册只能是一个纯函数或者一个高阶函数</p>\n<h2 id=\"管道\">管道</h2>\n<p>管道是数据流处理，在中间件后路由处理前做数据处理，可以在控制器中的类、方法、方法参数及全局注册使用，只能是一个纯函数。可以做<strong>数据验证，数据转换</strong></p>\n<h2 id=\"守卫\">守卫</h2>\n<p>守卫决定请求是否可以到达对应的路由处理器，能够知道当前路由的执行上下文，可以在控制器中的类、方法及全局注册使用。可以做<code>RABC</code></p>\n<h2 id=\"异常过滤器\">异常过滤器</h2>\n<p>内置的异常层负责处理整个应用程序中所有抛出的异常。当捕获到未处理的异常时，最终用户将收到友好的响应。可以做<strong>异常处理</strong></p>\n<h2 id=\"拦截器\">拦截器</h2>\n<p>拦截器是进入控制器之前和之后处理相关逻辑，能够知道当前路由的执行上下文，可以控制器中的类、方法、全局注册使用。可以做<strong>接口响应记录</strong></p>\n<h1 id=\"模块划分\">模块划分</h1>\n<p>AppModule应用根模块</p>\n<ul>\n<li>CoreModule 核心模块（注册中间件、过滤器、管道、守卫、拦截器、装饰器等）</li>\n<li>SharedModule 共享模块（注册服务，如DB、redis等）</li>\n<li>ConfigureModule 配置模块（系统配置）</li>\n<li>FeatureModule 特性模块（业务模块）</li>\n</ul>\n"}},"__N_SSG":true}